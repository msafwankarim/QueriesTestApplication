<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Alachisoft.NCache.Runtime</name>
    </assembly>
    <members>
        <member name="T:Alachisoft.NCache.Runtime.Aggregation.IAggregator">
            <summary>
            This interface provides implementaion to perform actual calculations on any data type and can perform different operations.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Aggregation.IAggregator.Aggregate(System.Object)">
             <summary> 
             This method takes in an object and contains the logic of applying the aggregation operation on the same node (locally) just like with the Combiner. If you wish to combine values using an aggregator before being sent for further processing in the Reducer, you can use the Aggregate() call.
             </summary>
             <param name="value">Object.</param>
             <returns>Returns aggregated result.</returns>
             <example>
             The following example illustrates the implementation of Aggregate. 
             <code>
             string function;
             //setting current aggregator function
             
             public IntAggregator(string function)
             {
                this.function = function;
             }
             
             //Implementing interface function
             
             public object Aggregate(object value)
             {
                return calculate(value);
             }
             //Function to calculate values
             
             private object calculate(object value)
             {
                switch (function)
                {
                    case "MIN":
                        value = int.MinValue;
                        return value;
                    case "MAX":
                        value = int.MaxValue;
                        return value;
                    default:
                        return 0;
                }
            }
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Aggregation.IAggregator.AggregateAll(System.Object)">
             <summary>
             This method takes in an object and contains the logic of applying the aggregation operation in the Reduce Phase. If you wish to combine values using an aggregator, you can use the AggregateAll() call.
             </summary>
             <param name="value">Object.</param>
             <returns>Returns aggregated result.</returns>
             <example>
             The following example illustrates the implementation of Aggregate. 
             <code>
             string function;
             //setting current aggregator function
             
             public IntAggregator(string function)
             {
                this.function = function;
             }
             
             //Implementing interface function
             
             public object AggregateAll(object value)
             {
                return calculate(value); //implement inside logic.
             }
             //Function to calculate values
             
             private object calculate(object value)
             {
                switch (function)
                {
                    case "MIN":
                        value = int.MinValue;
                        return value;
                    case "MAX":
                        value = int.MaxValue;
                        return value;
                    default:
                        return 0;
                }
            }
             </code>
             </example>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Aggregation.IValueExtractor">
            <summary>
            Implements the interface to extract meaningful attributes from given objects, similar to Mapper in the MapReduce framework.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Aggregation.IValueExtractor.Extract(System.Object)">
            <summary>
            This method takes in an Object and contains the logic to extract meaningful information/attributes from the object like the Mapper does in the MapReduce.
            </summary>
            <param name="value">Value/Object. </param>
            <returns>Returns the extracted value, which can also be null. </returns>
            <example>
            The following example demonstrates the implementation of Extract. 
            <code>
            public object Extract(object value)
            {
               try
               {
                  if (value.GetType() == typeof(int))
                   {
                       return 0;
                   }
                  if (value.GetType() == typeof(float))
                   {
                       return 0.0;
                   }
               }
               catch (Exception e)
               {
                  //handle exception
               }
               return value;
            }
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Bridge.BridgeItemOpCodes">
            <summary>
            The BridgeItemOpCodes contains the operational codes of Bridge Items. 
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Bridge.BridgeItemOpCodes.Add">
            <summary>
            To add an item.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Bridge.BridgeItemOpCodes.Remove">
            <summary>
            To remove an item.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Bridge.BridgeItemOpCodes.Update">
            <summary>
            To update an item.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Bridge.BridgeItemOpCodes.Clear">
            <summary>
            To clear the cache.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Bridge.BridgeItemOpCodes.RemoveRange">
            <summary>
            To remove a range of items.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Bridge.BridgeItemOpCodes.RemoveGroup">
            <summary>
            To remove a group.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Bridge.BridgeItemOpCodes.RemoveKeyDep">
            <summary>
            To remove the key dependency.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Bridge.BridgeItemOpCodes.AddHint">
            <summary>
            Add dependency in the cache.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Bridge.BridgeItemOpCodes.AddSyncDependency">
            <summary>
            Add sync dependency in the cache.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Bridge.BridgeItemOpCodes.RegisterKeyNotification">
            <summary>
            Opcode of the register key notification operations.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Bridge.BridgeItemOpCodes.UnregisterKeyNotification">
            <summary>
            Opcode of the un-registered key notification operations.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Bridge.BridgeItemOpCodes.AddDepKeyList">
            <summary>
            Opcode of add dependent key operations.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Bridge.BridgeItemOpCodes.RemoveDepKeyList">
            <summary>
            Opcode of remove dependent key operations.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Bridge.BridgeItemOpCodes.UpdateIndice">
            <summary>
            Opcode of update indice for sliding expiration operations.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Bridge.BridgeItemOpCodes.OpenStream">
            <summary>
            Opcode for stream open operations.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Bridge.BridgeItemOpCodes.CloseStream">
            <summary>
            Opcode for stream close operations.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Bridge.BridgeItemOpCodes.WriteToStream">
            <summary>
            Opcode for stream write operations.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Bridge.BridgeItemVersion">
            <summary>
            BridgeItemVersion provides the item version of the item.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Bridge.BridgeItemVersion.LATEST">
            <summary>
            Bridge item version is the latest.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Bridge.BridgeItemVersion.OLD">
            <summary>
            Bridge item version is old.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Bridge.BridgeItemVersion.SAME">
            <summary>
            Bridge item version is the same.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Bridge.ConflictResolution">
            <remark>
            ConflictResolution class is use to resolve the conflicts in bridge.
            </remark>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Bridge.ConflictResolution.ResolutionAction">
            <summary>
             This class provides implementation to take required action e.g., to keep or ignore the cache item to resolve the conflict.
            </summary>
            <returns>Ignores or keeps the cache item to resolve the conflict.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Bridge.ConflictResolution.#ctor">
            <summary>
             An empty constructor for the Conflict Resolution class.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Bridge.ConflictResolution.#ctor(Alachisoft.NCache.Runtime.Bridge.ResolutionAction)">
            <summary>
            The ConflictResolution is used to resolve the conflict.
            </summary>
            <param name="resolutionAction"> Makes decisions regarding keeping or ignoring items in the cache.</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Bridge.IBridgeConflictResolver">
            <summary>
            This interface is required to handle the conflicts in Bridge.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Bridge.IBridgeConflictResolver.Init(System.Collections.IDictionary)">
            <summary>
            Perform tasks like allocating resources or acquiring connections, etc.
            </summary>
            <param name="parameters">Startup parameters defined in the configuration.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Bridge.IBridgeConflictResolver.Resolve(Alachisoft.NCache.Runtime.Bridge.ProviderBridgeItem,Alachisoft.NCache.Runtime.Bridge.ProviderBridgeItem)">
            <summary>
            Perform tasks like the Conflict Resolution between the different cache and Bridge operations.
            </summary>
            <param name="oldEntry">Existing entry in the cache store.</param>
            <param name="newEntry">The new entry to be saved to cache.</param>
            <returns>Conflict resolution between the different cache and Bridge operations.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Bridge.IBridgeConflictResolver.Dispose">
            <summary>
            Perform tasks associated with freeing, releasing, or resetting resources.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Bridge.ProviderBridgeItem">
            <summary>
            When a conflict occurs, the Provider Bridge Item is sent to the Conflict Resolver as NewEntry and an OldEntry.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Bridge.ProviderBridgeItem.#ctor(System.String,System.Object,Alachisoft.NCache.Runtime.Bridge.BridgeItemOpCodes,Alachisoft.NCache.Runtime.Bridge.BridgeItemVersion)">
            <summary>
            Constructor of the class ProviderBridgeItem to set the key, value, operational costs and item version of Bridge items.
            </summary>
            <param name="key"> Contains key of an item.</param>
            <returns>Key of an item.</returns>
            <param name="value">Contains value of an item.</param>
            <returns>Value of the item.</returns>
            <param name="opCode"> Contains <see cref="T:Alachisoft.NCache.Runtime.Bridge.BridgeItemOpCodes"/> of bridgr items. </param>
            <returns>Operational code for bridgeItems.</returns>
            <param name="itemVersion">Contains version of an item (LATEST, OLD, SAME).</param>
            <returns>Version of an item.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Bridge.ProviderBridgeItem.BridgeItemVersion">
            <summary>
            <see cref="P:Alachisoft.NCache.Runtime.Bridge.ProviderBridgeItem.BridgeItemVersion"/> provides the item version of the items.
            </summary>
            <returns>Item version of the items.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Bridge.ProviderBridgeItem.Key">
            <summary>
            It contains the key of an item.
            </summary>
            <returns>Key of an item.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Bridge.ProviderBridgeItem.Value">
            <summary>
            This property contains the value of an item.
            </summary>
            <returns>Value of an item.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Bridge.ProviderBridgeItem.OpCode">
            <summary>
            It contains the <see cref="T:Alachisoft.NCache.Runtime.Bridge.BridgeItemOpCodes"/>. 
            </summary>
            <returns>Operational codes of Bridge Items.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Bridge.ResolutionAction">
            <summary>
            The Resolution Action is an action which decides that which item will remain in the cache and which item will be ignored. 
            Its value is configurable by the client.
            The Bridge Conflict Resolver is executed on the cache side whenever conflicts occur in the cache. If a user hasn't configured any conflict resolver rules, NCache uses the default resolver. In the default conflict resolver, resolution action is set based on BridgeItemVersion value.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Bridge.ResolutionAction.KeepOldEntry">
            <summary>
            Keeps an old entry for the ProviderBridgeItem.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Bridge.ResolutionAction.ReplaceWithNewEntry">
            <summary>
            To replace with the new entry.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.CacheItemPriority">
            <summary>
            Specifies the relative priority of items stored in the cache.
            </summary>
            <remarks>
            When the application's cache is full or runs low on memory, the cache selectively purges 
            items to free the system memory. When an item is added to the cache, you can assign it a 
            relative priority compared to the other items stored in the cache. 
            <para>
            The items that you assign higher 
            priority values are less likely to be deleted from the cache when the server is processing 
            a large number of requests, while items you assign lower priority values are more likely to be 
            deleted. The default value is Normal.
            </para>
            </remarks>
            <example>The following example demonstrates how to set the <see cref="T:Alachisoft.NCache.Runtime.CacheItemPriority"/> of an item in a cache
             to a High Priority.
            <code>
            
            CacheItem item = new CacheItem(product);
            item.Priority = CacheItemPriority.High;
            
            </code>
            </example>
            <requirements>
            <constraint>This member is not available in SessionState edition.</constraint> 
            </requirements>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.CacheItemPriority.Normal">
            <summary>
            Cache items with this priority level are likely to be deleted from the 
            cache as the server frees system memory only after those items with Low 
            or BelowNormal priority. This is the default value.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.CacheItemPriority.Low">
            <summary>
            Cache items with this priority level are most likely to be deleted 
            from the cache as the server frees system memory.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.CacheItemPriority.BelowNormal">
            <summary>
            Cache items with this priority level are more likely to be deleted from 
            the cache as the server frees system memory than items assigned with Normal priority.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.CacheItemPriority.AboveNormal">
            <summary>
            Cache items with this priority level are less likely to be deleted as 
            the server frees system memory than those assigned a Normal priority.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.CacheItemPriority.High">
            <summary>
            Cache items with this priority level are least likely to be deleted 
            from the cache as the server frees system memory.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.CacheItemPriority.NotRemovable">
            <summary>
            The cache items with this priority level will not be deleted from the 
            cache as the server frees system memory.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.CacheItemPriority.Default">
            <summary>
            The default value for cached item's priority is Normal.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.CacheLoader.RefreshPreference">
            <summary>
            This enum represents different RefreshPreferences to refresh the required dataset.
            </summary>
            <param name="RefreshNow">Immediately refreshes the dataset.</param>
            <param name="RefreshOnNextTimeOfDay">Refreshes the dataset anytime within next 24 hours.</param>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.CacheLoader.RefreshPreference.RefreshNow">
            <summary>
            Immediately refreshes the dataset.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.CacheLoader.RefreshPreference.RefreshOnNextTimeOfDay">
            <summary>
            Refreshes the dataset anytime within the next 24 hours.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.CacheLoader.ICacheLoader">
            <summary>
            The ICacheLoader Interface implementation needs to be provided at the cache server in order to load items to the cache on the cache initialization.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Runtime.CacheLoader.ICacheLoader.Init(System.Collections.Generic.IDictionary{System.String,System.String},System.String)" -->
        <member name="M:Alachisoft.NCache.Runtime.CacheLoader.ICacheLoader.LoadDatasetOnStartup(System.String)">
             <summary>
             This method loads item in dataset on cache startup.
             </summary>
             <param name="dataset">Dataset for which loader is called.</param>
             <returns>Result of loading dataset.</returns>
             <example>
             The following example loads product or order into cache based on the dataset.
             <code>
             OrderedDictionary orderedDictionary = new OrderedDictionary();
            
             string key = "";
             ProviderCacheItem cacheItem = null;
             if (dataset.Equals("Product"))
             {
                key = "Product";
                cacheItem = new ProviderCacheItem("Product");
             }
             else if (dataset.Equals("Order"))
             {
                key = "Order";
                cacheItem = new ProviderCacheItem("Order");
             }
             else if (dataset.Equals("Customer"))
             {
                key = "Customer";
                cacheItem = new ProviderCacheItem("Customer");
             }
             orderedDictionary.Add(key, cacheItem);
             LoaderResult result = new LoaderResult();
             result.Data = orderedDictionary;
             result.HasMoreData = false;
             return result;
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.CacheLoader.ICacheLoader.RefreshDataset(System.String,System.Object)">
            <summary>
            Responsible for refreshing items in dataset.
            </summary>
            <param name="userContext">User context object to verify which data needs to refresh.</param>
            <param name="dataset">Dataset to refresh.</param>
            <returns>Result of dataset refresh.</returns>
            <example>
            The following example refreshes product or order into cache based on the dataset.
            <code>
            string key1 = "";
            ProviderCacheItem cacheItem1 = null;
            string key2 = "";
            ProviderCacheItem cacheItem2 = null;
            string key3 = "";
            if (dataset.Equals("Product"))
            {
               key1 = "Product";
               cacheItem1 = new ProviderCacheItem("Product");
               key2 = "Product1";
               cacheItem2 = new ProviderCacheItem("Product1");
            }
            else if (dataset.Equals("Order"))
            {
               key1 = "Order";
               cacheItem1 = new ProviderCacheItem("Order");
               key2 = "Order1";
               cacheItem2 = new ProviderCacheItem("Order1");
            }
            else if (dataset.Equals("Customer"))
            {
               key1 = "Customer1";
               cacheItem1 = new ProviderCacheItem("Customer1");
               key2 = "Customer2";
               cacheItem2 = new ProviderCacheItem("Customer2");
               key3 = "Customer";
            }
            
            RefresherResult result = new RefresherResult();
            result.AddCacheItem(key2,cacheItem2);
            result.UpdateCacheItem(key1,cacheItem1);
            result.RemoveCacheItem(key3);
            result.HasMoreData = false;
            return result;
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.CacheLoader.ICacheLoader.GetDatasetsToRefresh(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Responsible for getting new datasets at real-time through polling if refresh-on-event is enabled. 
            </summary>
            <param name="userContexts">Dictionary of user context objects to verify which data to refresh.</param>
            <returns>Dictionary of datasets to refresh.</returns>
            <example>
            The following example calls the GetRefreshedDatasets method to get new dataset.
            <code>
            IDictionary&lt;string, RefreshPreference&gt; GetDatasetsToRefresh(IDictionary&lt;string, object&gt; userContexts)
            {
                DateTime? lastRefreshTime;
                bool datasetHasUpdated;
              
                // Create a dictionary for datasets to refresh with their refresh preference 
                IDictionary&lt;string, RefreshPreference&gt; DatasetsToRefresh = new Dictionary&lt;string, RefreshPreference&gt;();
                
                foreach (var dataset in userContexts.Keys)
                {
                     switch (dataset.ToLower())
                  {
                     // If dataset is products, check if dataset has been updated in data source
                     // if yes, then refresh the dataset now
                     case "products":
                         lastRefreshTime = userContexts[dataset] as DateTime?;
                         datasetHasUpdated = HasProductDatasetUpdated(dataset, lastRefreshTime);
                         if (datasetHasUpdated)
                            {
                               DatasetsToRefresh.Add(dataset, RefreshPreference.RefreshNow);
                            }
                         break;
                  
                    default:
                    // Invalid dataset
                  }               
                }
              // Return the dictionary containing datasets to refresh on polling with their refresh preferences
              return DatasetsToRefresh;
            }
            
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.CacheManagement.CacheClient">
            <summary>
            CacheClient class contains information about CacheClient
            ProcessId ,ClientIp and Port of the Client process
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.CacheManagement.CacheClient.ProcessID">
            <summary>
            Client process id
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.CacheManagement.CacheClient.ClientIP">
            <summary>
            Client IP Address
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.CacheManagement.CacheClient.Port">
            <summary>
            Client Port
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.CacheManagement.CacheHealth">
            <summary>
            The Alachisoft.NCache.Web.Management namespace provides classes for management operations on cache
            This includes the CacheHealth class, used to store cache health information.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.CacheManagement.CacheHealth.CacheName">
            <summary>
            Cache name represents the name of the cache
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.CacheManagement.CacheHealth.Topology">
            <summary>
            Cache topology represents the topology of the cache
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.CacheManagement.CacheHealth.Status">
            <summary>
            Cache status represents the status of the cache
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.CacheManagement.CacheHealth.ServerNodesStatus">
            <summary>
            Status of cache server nodes
            </summary>
            <returns>
            Collection of <see cref="T:Alachisoft.NCache.Runtime.CacheManagement.NodeStatus"/>.
            </returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.CacheManagement.CacheStatus">
            <summary>
            CacheStatus that tells about cache status that either the cache is Stopped or Running
            This includes the CacheStatus Enum, use to store cache Status information.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.CacheManagement.CacheStatus.Stopped">
            <summary>
            When cache is Stopped then CacheStatus has this value
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.CacheManagement.CacheStatus.Running">
            <summary>
            When cache is Running then CacheStatus has this value
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.CacheManagement.CacheTopology">
            <summary>
            Cache Topology tells about the cache topology
            This includes the CacheTopology Enum, use to store cache Topology information.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.CacheManagement.CacheTopology.Mirrored">
            <summary>
            Mirrored is used for Mirror topology representation
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.CacheManagement.CacheTopology.Replicated">
            <summary>
            Replicated is used for Replicated topology representation
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.CacheManagement.CacheTopology.Partitioned">
            <summary>
            Partitioned is used for Replicated topology representation
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.CacheManagement.CacheTopology.Local">
            <summary>
            Local is used for Local outproc cache representation
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.CacheManagement.CacheTopology.PartitionReplica">
            <summary>
            ParitionReplica is used for Partitioned of Replica cache representation
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.CacheManagement.ConnectivityStatus">
            <summary>
            Cache connectivity status contains the connectivity status of the cache nodes.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.CacheManagement.ConnectivityStatus.Stopped">
            <summary>.
            If the cache node is stop then Connectivity status will be set to Stopped.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.CacheManagement.ConnectivityStatus.Running">
            <summary>
            If the cache node is running then connectivity status will be set to Running.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.CacheManagement.ConnectivityStatus.FullyConnected">
            <summary>
            If the cache is fully connected then connectivity status is FullyConnected.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.CacheManagement.ConnectivityStatus.PartialConnected">
            <summary>
            If the C=cache is partially connected then connectivity status is  PartialConnected.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.CacheManagement.NodeStatus">
            <summary>
            NodeStatus class contains the Node Status related information in it.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.CacheManagement.NodeStatus.NodeInfo">
            <summary>
            Information of the server node.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.CacheManagement.NodeStatus.ConnectivityStatus">
            <summary>
            Connectivity status of the node.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.CacheManagement.NodeStatus.ConnectedNodes">
            <summary>
            Nodes connected to the cache.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.CacheManagement.ServerNode">
            <summary>
            ServerNode contains information about a single node in server
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.CacheManagement.ServerNode.ServerIP">
             <summary>
            IP Address of server node
             </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.CacheManagement.ServerNode.Port">
            <summary>
            Port of server node
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.CacheManagement.ServerNode.IsReplica">
            <summary>
            Is server a replica node.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.CacheItemAttributes">
            <summary>
            The CacheItemAttributes contains the information about the cache attributes.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.CacheItemAttributes._d">
            <summary> Dependency for the object.</summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.CacheItemAttributes._absoluteExpiration">
            <summary> Absolute expiration for the object. </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.CacheItemAttributes.AbsoluteExpiration">
            <summary>
            Gets/Sets the absolute expiration. You can add an item to the cache with the absolute expiration by 
            specifying the exact date and time 
            at which the item should be invalidated. When this time is elapsed, the item will be removed from the cache.
            </summary>
            <returns>The exact date and time at which the item should be invalidated.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.CacheItemAttributes.Dependency">
            <summary>The dependency/dependencies for the item. If there are no dependencies, it contains a null 
            reference.</summary>
            <returns>Dependency/Dependencies for the cache item.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.CacheItemAttributes.ResyncRequired">
            <summary>
            Gets/Sets the flag which indicates whether an item should be reloaded on expiration
            if the Read-Through provider is specified.
            </summary>
            <returns>Flag that indicates wether an item should be reloaded on expiration
            if the Read-Through provider is specified. </returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.ClientInfo">
            <summary>
            This class provides detailed information about cache client.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ClientInfo.AppName">
            <summary>
            Application's name. 
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ClientInfo.ClientID">
            <summary>
            ClientID is a unique id. 
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ClientInfo.IPAddress">
            <summary>
            IPAddress of the cache client.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ClientInfo.MacAddress">
            <summary>
            Mac Address of cache client
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ClientInfo.PhysicalCores">
            <summary>
            Available physical cores of Cache Client
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ClientInfo.LogicalCores">
            <summary>
            Available logical cores of Cache Client
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ClientInfo.ProcessID">
            <summary>
            Process ID of the cache client.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ClientInfo.MachineName">
            <summary>
            Name of the machine the client is running on.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ClientInfo.Status">
            <summary>
            <see cref="T:Alachisoft.NCache.Runtime.Caching.ConnectivityStatus"/>
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ClientInfo.ClientVersion">
            <summary>
            Version of NCache client. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.ClientInfo.GetLegacyClientID(Alachisoft.NCache.Runtime.Caching.ClientInfo)">
            <summary>
            GetLegacyClientId returns the client id in string.
            </summary>
            <param name="info"><see cref="T:Alachisoft.NCache.Runtime.Caching.ClientInfo"/> </param>
            <returns>Client id of the client</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.ClientInfo.TryParseLegacyClientID(System.String)">
            <summary>
            TryParseLegacyClientId parse the Client id and get information about the client id in the form of ClientInfo
            </summary>
            <param name="clientId">Client id of the client</param>
            <returns><see cref="T:Alachisoft.NCache.Runtime.Caching.ClientInfo"/> </returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.ClientInfo.ToString">
            <summary>
            Converts Client Info to string , contains client id , Application name ,Process id , machine name and address.
            </summary>
            <returns>ClientInfo in string form</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.ClientInfo.Deserialize(Alachisoft.NCache.Runtime.Serialization.IO.CompactReader)">
            <summary>
            Deserializes the Compact reader object passed to it
            </summary>
            <param name="reader"><see cref="T:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader"/> </param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.ClientInfo.Serialize(Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter)">
            <summary>
            Serializes the CompactWriter object
            </summary>
            <param name="writer"><see cref="T:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter"/></param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.ClientInfo.Clone">
            <summary>
            Clones the object and returns the newly created clone of the object.
            </summary>
            <returns>The newly cloned ClientInfo object</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.ConnectivityStatus">
            <summary>
            Represents the client connectivity status.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.ConnectivityStatus.Connected">
            <summary>
             Client is connected to the cache.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.ConnectivityStatus.Disconnected">
            <summary>
            Client is disconnected from the cache.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.CacheClientConnectivityChangedCallback">
            <summary>
            Defines a callback method for notifying the application about the status of the cache client connectivity.
            </summary>
            <param name="cacheId">Name of the cache.</param>
            <param name="client">Information about the cache client.</param>
            <example>The following example demonstrates how to use the <see cref="T:Alachisoft.NCache.Runtime.Caching.CacheClientConnectivityChangedCallback"/> class to notify 
            an application when there is a change in the client connectivity of the cache.
            <code>
            
            public void OnCacheClientConnectivityChanged(string cacheId, ClientInfo client)
            {
            	// ...
            }
            
            protected void Application_Start(object sender, EventArgs e)
            {
            	try
            	{
            		ICache cache = CacheManager.GetCache("demoClusteredCache");
            		cache.NotificationService.CacheClientConnectivityChanged += new CacheClientConnectivityChangedCallback(this.OnCacheClientConnectivityChanged);
            	}
            	catch (Exception ex)
            	{
            
            	}
            }
            
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.DistributedDataType">
            <summary>
            Enumeration that defines the data type.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.DistributedDataType.List">
            <summary>
            For a Distributed List.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.DistributedDataType.Queue">
            <summary>
            For a Distributed Queue.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.DistributedDataType.Set">
            <summary>
            For a Distributed Set.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.DistributedDataType.Dictionary">
            <summary>
            For a Distributed Dictionary.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.DistributedDataType.Counter">
            <summary>
            For a Distributed Counter.
            </summary>
            <returns>Value of the Counter.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.IProviderDataTypeItem">
            <summary>
            The ProviderDataTypeItem is just like a CacheItem , but it has some limited fields.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.Expiration">
            <summary>
            This class provides values to specify expiration of items in the cache.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.Expiration.ExpireAfter">
            <summary>
            Value of time in the form of <see cref="T:System.TimeSpan"/> that shows 
            after how much time, the item in cache is to be expired.
            </summary>
            <returns>Timespan after which item expires.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.Expiration.Type">
            <summary>
            The type of expiration to be used while expiring items in the cache. The 
            value of this type varies from item to item in the cache.
            </summary>
            <returns>Type of expiration.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.Expiration.#ctor(Alachisoft.NCache.Runtime.Caching.ExpirationType,System.TimeSpan)">
            <summary>
            Instantiates Expiration to provide expiration values for items in the cache.
            </summary>
            <param name="expirationType">A flag indicating type of expiration to be used while 
            expiring items in cache.</param>
            <param name="expireAfter">The value of time in the form of <see cref="T:System.TimeSpan"/> that 
            shows after how much time, the item in the cache is to be expired.</param>
            <returns>Time interval after which item expires.</returns>
            <example>This example demonstrates how to create an instance of <see cref="T:Alachisoft.NCache.Runtime.Caching.Expiration"/> with
            sliding expiration of 5 minutes.
            <code>
            Expiration slidingExpiration = new Expiration(ExpirationType.Sliding, TimeSpan.FromMinutes(5));
            </code>
            </example>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.Expiration.Sliding">
            <summary>
            This property represents time interval after which item expires.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.ExpirationType">
            <summary>
            The type of expiration to be used while expiring items in the cache. The 
            value of this type varies from item to item in the cache.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.ExpirationType.None">
            <summary>
            Indicates that no expiration is to take place.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.ExpirationType.Sliding">
            <summary>
            Indicates that item expiration in the cache is to follow 
            idle expiration.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.ExpirationType.Absolute">
            <summary>
            Indicates that item expiration in the cache is to follow 
            fixed expiration.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.ExpirationType.DefaultAbsolute">
            <summary>
            Indicates that item expiration in the cache is to follow 
            fixed expiration and value should be taken from 
            'DefaultAbsolute' field in NCache Manager.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.ExpirationType.DefaultAbsoluteLonger">
            <summary>
            Indicates that item expiration in the cache is to follow 
            fixed expiration and value should be taken from 
            'DefaultAbsoluteLonger' field in NCache Manager.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.ExpirationType.DefaultSliding">
            <summary>
            Indicates that item expiration in the cache is to follow 
            fixed expiration and value should be taken from 
            'DefaultSliding' field in NCache Manager.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.ExpirationType.DefaultSlidingLonger">
            <summary>
            Indicates that item expiration in the cache is to follow 
            fixed expiration and value should be taken from 
            'DefaultSlidingLonger' field in NCache Manager.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.INamedTagTypeRetrieval">
            <summary>
            This interface provides implementation to retrieve NamedTags of primitive types including string.
            </summary>
            <returns> NamedTags of primitive types including String.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary">
            <summary>
            Represents a dictionary that can be associated with cache items to provide extra information so that items
            are grouped together and can be queried efficiently based on the provided information. 
            </summary>
            <remarks>
            One dictionary can be associated with each cache item that might contain multiple the named tags. 
            </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.#ctor">
            <summary>
            Initializes the NamedTagsDictionary object.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.Nullable{System.Int32})">
            <summary>
            Adds an integer value against a key in the NamedTagsDictionary.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="value">Integer value of an item.</param>
            <example>
            The following example adds named tag of integer type.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", int.MaxValue);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.Nullable{System.Int16})">
            <summary>
            Adds a short value against a key in the NamedTagsDictionary.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="value">Short value of an item.</param>
            <example>
            The following example adds the named tag of a short type.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", int.MaxValue);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.Nullable{System.Byte})">
            <summary>
            Adds a byte value against a key in the NamedTagsDictionary.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="value">Byte value of an item.</param>
            <example>
            The following example adds the named tag of byte type.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", int.MaxValue);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.Nullable{System.Int64})">
            <summary>
            Adds a long value against a key in the NamedTagsDictionary.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="value">Long value of an item.</param>
            <example>
            The following example adds named tag of long type.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", long.MaxValue);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.Nullable{System.Single})">
            <summary>
            Adds a float value against a key in the NamedTagsDictionary.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="value">Float value of an item.</param>
            <example>
            The following example adds named tag of float type.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", float.MaxValue);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.Nullable{System.Double})">
            <summary>
            Adds a double value against a key in the NamedTagsDictionary.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="value">Double value of an item.</param>
            <example>
            The following example adds named tag of double type.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", double.MaxValue);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.Nullable{System.Decimal})">
            <summary>
            Adds a decimal value against a key in the NamedTagsDictionary.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="value">Decimal value of an item.</param>
            <example>
            The following example adds named tag of decimal type.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", decimal.MaxValue);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.String)">
             <summary>
             Adds a string value against a key in the the NamedTagsDictionary.
             </summary>
             <param name="key">Key of an item.</param>
             <param name="value">String value of an item.</param>
             <example>
            The following example adds named tag of string type.
             <code>
             NamedTagsDictionary tags = new NamedTagsDictionary();
             tags.Add("Tag1", "Tag1_Value");
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.Nullable{System.Char})">
            <summary>
            Adds a character value against a key in the NamedTagsDictionary.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="value">Char value of an item.</param>
            <example>
            The following example adds named tag of character type.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", 'a');
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.Nullable{System.Boolean})">
            <summary>
            Adds a boolean value against a key in the NamedTagsDictionary.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="value">Boolean value of an item.</param>
            <example>
            The following example adds named tag of boolean type.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", false);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.Nullable{System.DateTime})">
            <summary>
            Adds a DateTime value against a key in the NamedTagsDictionary.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="value">DateTime value of an item.</param>
            <example>
            The following example adds named tag of DateTime type.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", DateTime.Now);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.Nullable{System.SByte})">
            <summary>
            Adds a sbyte value against a key in the NamedTagsDictionary.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="value">Sbyte value of an item.</param>
            <example>
            The following example adds named tag of sbyte type.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", sbyte.MaxValue);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.Nullable{System.UInt32})">
            <summary>
            Adds a uint value against a key in the NamedTagsDictionary.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="value">uint value of an item.</param>
            <example>
            The following example adds named tag of uint type.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", uint.MaxValue);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.Nullable{System.UInt64})">
             <summary>
             Adds a ulong value against a key in the NamedTagsDictionary.
             </summary>
             <param name="key">Key of an item.</param>
             <param name="value">ulong value of an item.</param>
             <example>
            The following example adds named tag of ulong type.
             <code>
             NamedTagsDictionary tags = new NamedTagsDictionary();
             tags.Add("Tag1", ulong.MaxValue);
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.Nullable{System.UInt16})">
            <summary>
            Adds a ushort value against a key in the NamedTagsDictionary.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="value">ushort value of an item.</param>
            <example>
            The following example adds named tag of ushort type.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", ushort.MaxValue);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.Int32)">
            <summary>
            Adds an integer value against a key in the NamedTagsDictionary.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="value">Integer value of an item.</param>
            <example>
            The following example adds named tag of integer type.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", int.MaxValue);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.Int16)">
            <summary>
            Adds a short value against a key in the NamedTagsDictionary.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="value">Short value of an item.</param>
            <example>
            The following example adds named tag of short type. 
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", int.MaxValue);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.Byte)">
            <summary>
            Adds a byte value against a key in the NamedTagsDictionary.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="value">Byte value of an item.</param>
            <example>
            The following example adds named tag of byte type.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", int.MaxValue);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.Int64)">
            <summary>
            Adds a long value against a key in the NamedTagsDictionary.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="value">Long value of an item.</param>
            <example>
            The following example adds named tag of long type.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", long.MaxValue);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.Single)">
             <summary>
             Adds a float value against a key in the NamedTagsDictionary.
             </summary>
             <param name="key">Key of an item.</param>
             <param name="value">Float value of an item.</param>
             <example>
            The following example adds named tag of float type.
             <code>
             NamedTagsDictionary tags = new NamedTagsDictionary();
             tags.Add("Tag1", float.MaxValue);
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.Double)">
            <summary>
            Adds a double value against a key in the NamedTagsDictionary.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="value">Double value of an item.</param>
            <example>
            The following example adds named tag of double type.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", double.MaxValue);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.Decimal)">
            <summary>
            Adds a decimal value against a key in the NamedTagsDictionary.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="value">Decimal value of an item.</param>
            <example>
            The following example adds named tag of decimal type.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", decimal.MaxValue);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.Char)">
            <summary>
            Adds a character value against a key in the NamedTagsDictionary.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="value">Char value of an item.</param>
            <example>
            The following example adds named tag of character type.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", 'a');
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.Boolean)">
            <summary>
            Adds a boolean value against a key in the NamedTagsDictionary.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="value">Boolean value of an item.</param>
            <example>
            The following example adds named tag of bool type.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", false);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.DateTime)">
            <summary>
            Adds a DateTime value against a key in the the NamedTagsDictionary.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="value">DateTime value of an item.</param>
            <example>
            The following example adds named tag of DateTime type.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", DateTime.Now);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.SByte)">
            <summary>
            Adds sbyte value against a key in the NamedTagsDictionary.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="value">Sbyte value of an item.</param>
            <example>
            The following example adds named tag of sbyte type.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", sbyte.MaxValue);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.UInt32)">
            <summary>
            Adds a uint value against a key in the NamedTagsDictionary.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="value">uint value of an item.</param>
            <example>
            The following example adds named tag of uint type.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", uint.MaxValue);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.UInt64)">
            <summary>
            Adds a ulong value against a key in the NamedTagsDictionary.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="value">ulong value of an item.</param>
            <example>
            The following example adds named tag of ulong type.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", ulong.MaxValue);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Add(System.String,System.UInt16)">
            <summary>
            Adds a ushort value against a key in the NamedTagsDictionary.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="value">ushort value of an item.</param>
            <example>
            The following example adds named tag of ushort type.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", ushort.MaxValue);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Remove(System.String)">
            <summary>
            Removes the key value pair from the NamedTagsDictionary.
            </summary>
            <param name="key">Key of an item.</param>
            <example>
            The following example removes a named tag.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", int.MaxValue);
            tags.Remove("Tag1");
            </code>
            </example>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Count">
            <summary>
            It returns the number of items in the NamedTagsDictionary.
            </summary>
            <returns>Number of items in the NamedTagsDictionary.</returns>
            <example>
            The following example prints the number of tags.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            tags.Add("Tag1", int.MaxValue);
            Console.WriteLine("Number of the named tags: " + tags.Count);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the entries of the NamedTagsDictionary.
            </summary>
            <returns>IEnumerator of the the NamedTagsDictionary.</returns>
            <example>
            The following example gets enumerator of the NamedTagsDictionary.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            IEnumerator tagsEnumerator = tags.GetEnumerator();
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NamedTagsDictionary.Contains(System.String)">
            <summary>
            This method searches for the key in the NamedTagsDictionary and returns true, if it is found and false, in other case.
            </summary>
            <param name="key">Searches this key in NamedTagsDictionary.</param>
            <returns> True, if key found, and false, in other case.</returns>
            <example>
            The following example verifies if the tags dictionary contains a tag.
            <code>
            NamedTagsDictionary tags = new NamedTagsDictionary();
            if(!tags.Contains("Tag1"))
            {
                tags.Add("Tag1", int.MaxValue);
            }
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.NonQueryIndexedAttribute">
            
             <summary>
             Indicates that a field or property of a query indexable class should not be indexed.
             </summary>
             <example>
             <code>
             public class Product {
                 ...
                 [NonQueryIndexed] 
                 public string ProductName;
                 
                 [NonQueryIndexed]
                 public int UnitPrice { get; set; }
                 
                 [NonQueryIndexed]
                 private int quantity;
                 
                 [NonQueryIndexed]
                 private int UnitsAvailable { get; set; }
                 ...
             </code>
             </example>
             <seealso cref="T:Alachisoft.NCache.Runtime.Caching.QueryIndexedAttribute"/>
             <seealso cref="T:Alachisoft.NCache.Runtime.Caching.QueryIndexableAttribute"/>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.NonQueryIndexedAttribute.#ctor">
            
             <summary>
             Mark class, field or property that are not to be indexed with NCache.
             </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.QueryIndexableAttribute">
            
             <summary>
             Indicates that dynamic query indexes can be created on
             all supported fields and properties of this class.
             </summary>
             <example>
             <code>
             [QueryIndexable]
             public class Product {
                 ...
             </code>
             </example>
             <seealso cref="T:Alachisoft.NCache.Runtime.Caching.NonQueryIndexedAttribute"/>
             <seealso cref="T:Alachisoft.NCache.Runtime.Caching.QueryIndexedAttribute"/>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.QueryIndexableAttribute.#ctor">
            
             <summary>
             Mark class to be indexable with NCache.
             </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.QueryIndexedAttribute">
            <summary>
            Indicates that a dynamic query index can be created on the field or a property of the class.
            </summary>
            <remarks>
            <para>
            You can attribute your class to have a custom identification name. 
            The name that is specified is used as the identification, 
            otherwise the property name will be used as the identification.
            </para>
            </remarks>
            <example>
            The following example demonstrates how you can create query index on the field or property of the class.
            <code>
             public class Product {
                ...
                [QueryIndexed] 
                // OR [QueryIndexed("IndexName")]
                public string ProductName;
                
                [QueryIndexed] 
                // OR [QueryIndexed("IndexName")]
                public int UnitPrice { get; set; }
                
                [QueryIndexed]
                // OR [QueryIndexed("IndexName")]
                private int quantity;
                
                [QueryIndexed]
                // OR [QueryIndexed("IndexName")]
                private int UnitsAvailable { get; set; }
                ...
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.QueryIndexedAttribute.#ctor(System.String)">
            
             <summary>
             Mark class, field, or property to be indexed with NCache.
             </summary>
             <returns>Class, field, or property to be indexed with NCache.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.QueryIndexedAttribute.#ctor">
            
             <summary>
             Mark class, field, or property to be indexed with NCache.
             </summary>
             <returns>Class, field, or property to be indexed with NCache.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.DeliveryMode">
            <summary>
            NCache provides a DeliveryOption enum which specifies how the message should be delivered to any registered subscribers. The delivery option is specified during message publishing phase.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.DeliveryMode.Async">
             <summary>
            Async invocation of messages. 
            Using async method of delivery does not guarantee the ordered delivery of messages. 
             </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.DeliveryMode.Sync">
             <summary>
            Sync invocation of messages. 
            Using sync method of delivery guarantees the ordered delivery of messages.
             </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.DeliveryOption">
            <summary>
            NCache provides a DeliveryOption enum which specifies how the message should be delivered to any registered subscribers. 
            The delivery option is specified during message publishing phase. 
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.DeliveryOption.All">
            <summary>
            Delivers message to all registered subscribers, if no subscriber has been registered,
            it will return without any failure acknowledgment. The message 
            will be sent to any subscriber when it registers on topic; unless message expiration has not occurred.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.DeliveryOption.Any">
            <summary>
            Delivers message to any one of the registered subscribers. 
            If an acknowledgement is not received, the message is reassigned to another subscriber 
            till it reaches its expiration time limit.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.IDurableTopicSubscription">
            <summary>
            Contains information about the subscription created.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.IDurableTopicSubscription.SubscriptionName">
            <summary>
             It returns the name for durable subscriptions.
            </summary>
            <returns>Name for the durable subscription.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.IDurableTopicSubscription.SubscriptionPolicy">
            <summary>
            It returns the type of Subscription Policy the user has subscribed with.
            </summary>
            <returns>Type of Subscription Policy.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.IMessage">
            <summary>
            A message contains the actual data object which is sent by the publisher and delivered to the 
            interested subscribers for the topic. NCache provides the Message class which implements the IMessage 
            interface to create a message.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.IMessage.MessageId">
            <summary>
            Auto generated ID for the message, as same messages can be stored on different topics.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.IMessage.ExpirationTime">
            <summary>
            	ExpirationTime of TimeSpan type after which the message is expired from the topic. 
            	This can also accept null value, which will ensure that the message is not expired from the topic. 
            	In case of no expiration time specified, null is considered as default.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.IMessage.Payload">
            <summary>
            The actual data object of interest for subscribers, for example, Order.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.IMessage.CreationTime">
            <summary>
            Creation time in DateTime for the message.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.ITopic">
            <summary>
            The ITopic interface facilitates creating subscription and publishing of messages against the topic. 
            This also provides event registrations for message delivery failure, receiving messages and deleting topics.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ITopic.Name">
            <summary>
            Specifies the topic's name.
            </summary>
            <returns>Name of the topic.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ITopic.MessageCount">
            <summary>
            Number of messages published for this topic.
            </summary>
            <returns> Number of published messages.</returns>
            <remarks>
            This property returns value for a specific topic. Count of other topics play no role.
            </remarks>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ITopic.Priority">
            <summary>
            Defines the relative priority of the topic.
            </summary>
            <returns>Relative priority of the topic.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ITopic.ExpirationTime">
            <summary>
            The default expiry time of messsage for the topic.
            Its default value is TimeSpan.MaxValue.
            </summary>
            <returns>Time interval after which the message expires.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ITopic.IsClosed">
            <summary>
            This property specifies whether the topic is closed or not?
            </summary>
            <returns>Boolean value, either true or false.</returns>
        </member>
        <member name="E:Alachisoft.NCache.Runtime.Caching.ITopic.MessageDeliveryFailure">
            <summary>
            Subscribes for message delivery failure events.
            </summary>
            <returns>Failure notification to any publisher which has registered a message delivery failure event on that topic.</returns>
            <remarks>
            You can use this event to perform tasks when message delivery fails.
            For more information on how to use this callback see the documentation for <see cref="T:Alachisoft.NCache.Runtime.Caching.MessageDeliveryFailureCallback"/>.
            </remarks>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ITopic.OnTopicDeleted">
            <summary>
            Topic deletion events are delivered through this callback.
            </summary>
            <returns> Topic deletion events.</returns>
            <remarks>
            You can use this event to perform the tasks when a topic is deleted.
            For more information on how to use this callback, see the documentation for <see cref="T:Alachisoft.NCache.Runtime.Caching.TopicDeletedCallback"/>.
            </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.ITopic.CreateSubscription(Alachisoft.NCache.Runtime.Caching.MessageReceivedCallback,Alachisoft.NCache.Runtime.Caching.DeliveryMode)">
            <summary>
            This method is used to register against a topic on the cache if a topic exists, otherwise throws exception.
            </summary>
            <param name="messageReceivedCallback"> The Message is delivered through this callback. </param> 
            <param name="deliveryMode"> An optional parameter which specifies whether to deliver messages to register subscribers synchronously or asynchronously. Default value of this parameter is <see cref="F:Alachisoft.NCache.Runtime.Caching.DeliveryMode.Sync"/>.</param> 
            <returns>It returns the created topic subscription.</returns>
            <example>The following example demonstrates how to create a subscription on a topic. 
            
            First, initialize the cache.
            <code>
            ICache cache = CacheManager.GetCache("myCache");
            </code>
            
            Then, get messaging service from the cache.
            <code>
            IMessagingService messagingService=cache.MessagingService;
            </code>
            
            Then, get topic from the messagingService.
            
            <code>
            ITopic topic=messagingService.GetTopic("mytopic");  
            if(topic==null)  //If topic not exists create it.
            {
              topic=messagingService.CreateTopic("mytopic");
            }
            </code>     
            
            Then, create the subscription.
            <code>
            void MessageReceivedCallback(object sender, MessageEventArgs args)
            {
              
            }
            
            topic.CreateSubscription(MessageReceivedCallback);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.ITopic.Publish(Alachisoft.NCache.Runtime.Caching.Message,Alachisoft.NCache.Runtime.Caching.DeliveryOption,System.Boolean)">
            <summary>
            This method is used to publish the message in the cache with the specified DeliveryOption. 
            And the option to notify the publisher if the message has failed to deliver because of expiration, eviction or internal system issue.
            </summary>
            <param name="message">Message to be published.</param>
            <param name="deliverOption"> Specified delivery option. </param>
            <param name="notifyDeliveryFailure">Specifies if  MessageDeliveryFailure event is required for this message.</param>
            <example>The following example demonstrates how to publish message on a topic. 
            
            First, initialize the cache.
            <code>
            ICache cache = CacheManager.GetCache("myCache");
            </code>
            
            Then, get messaging service from the cache.
            <code>
            IMessagingService messagingService=cache.MessagingService;
            </code>
            
            Then, get the topic from the messagingService.
            <code>
            ITopic topic=messagingService.GetTopic("mytopic");  
            if(topic==null)  //If topic not exists create it.
            {
              topic=messagingService.CreateTopic("mytopic");
            }
            </code>        
            Then, publish the message on the topic.
            <code>
            object payload = "mymessage"; 
            Message message = new Message(payload);   //creating message
            topic.Publish(message, DeliveryOption.All);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.ITopic.PublishAsync(Alachisoft.NCache.Runtime.Caching.Message,Alachisoft.NCache.Runtime.Caching.DeliveryOption,System.Boolean)">
            <summary>
            This method is used to publish a message asynchronously in the cache with the specified <seealso cref="T:Alachisoft.NCache.Runtime.Caching.DeliveryOption"/>
            and the option to notify the publisher if the message has failed to deliver because of expiration, eviction or internal system issue.
            </summary>
            <param name="message">Message to be published.</param>
            <param name="deliverOption"> Specifies delivery option. </param>
            <param name="notifyDeliveryFailure"> Specifies whether the MessageDeliveryFailure event required for this message.</param>
            <returns>Returns the Task.</returns>
            <example>The following example demonstrates how to publish a message asynchronously on a topic. 
            
            First, initialize the cache.
            <code>
            ICache cache = CacheManager.GetCache("myCache");
            </code>
            
            Then, get messaging service from the cache.
            <code>
            IMessagingService messagingService=cache.MessagingService;
            </code>
            
            Then, get topic from the messagingService.
            <code>
            ITopic topic=messagingService.GetTopic("mytopic");  
            if(topic==null)  //If topic not exists create it.
            {
              topic=messagingService.CreateTopic("mytopic");
            }
            </code>        
            Then, publish message on the topic.
            <code>
            object payload = "mymessage"; 
            Message message = new Message(payload);   //creating message
            topic.PublishAsync(message, DeliveryOption.All).ContinueWith(task => 
            {
                if (task.Status == TaskStatus.RanToCompletion)
                {
                    Console.WriteLine("Message Published Successfully");
                }
                if (task.Status == TaskStatus.Faulted)
                {
                    Console.WriteLine("Error has occurred");
                }
                if (task.Exception != null)
                {
                    Console.WriteLine(task.Exception);
                }
            });
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Runtime.Caching.ITopic.PublishBulk(System.Collections.Generic.IEnumerable{System.Tuple{Alachisoft.NCache.Runtime.Caching.Message,Alachisoft.NCache.Runtime.Caching.DeliveryOption}},System.Boolean)" -->
        <member name="M:Alachisoft.NCache.Runtime.Caching.ITopic.Publish(Alachisoft.NCache.Runtime.Caching.Message,Alachisoft.NCache.Runtime.Caching.DeliveryOption,System.String,System.Boolean)">
            <summary>
            This method is used to publish the message in the cache with the specified DeliveryOption and the SequenceName. The order of messages with the same sequence name is retained. 
            And the option to notify the publisher if the message has failed to deliver because of expiration, eviction or internal system issue.
            </summary>
            <param name="message">Message to be published.</param>
            <param name="deliverOption"> Delivery Option. </param>
            <param name="sequenceName">Sequence name of the message to be publsihed. The messages with same sequence name will be delivered in the same order as they are published.</param>
            <param name="notifyDeliveryFailure">Specifies if MessageDeliveryFailure event required for the specified message.</param>
            <example>The following example demonstrates how to publish message on a topic. 
            
            First, initialize the cache.
            <code>
            ICache cache = CacheManager.GetCache("myCache");
            </code>
            
            Then, get the messaging service from the cache.
            <code>
            IMessagingService messagingService=cache.MessagingService;
            </code>
            
            Then, get the topic from the messagingService.
            <code>
            ITopic topic=messagingService.GetTopic("mytopic");  
            if(topic==null)  //If topic not exists create it.
            {
              topic=messagingService.CreateTopic("mytopic");
            }
            </code>        
            Then, publish the message on the topic.
            <code>
            object payload = "mymessage"; 
            string sequenceName = "myOrderedMessages";
            Message message = new Message(payload);   //creating message
            topic.Publish(message, DeliveryOption.All, sequenceName);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.ITopic.CreateDurableSubscription(System.String,Alachisoft.NCache.Runtime.Caching.SubscriptionPolicy,Alachisoft.NCache.Runtime.Caching.MessageReceivedCallback,System.Nullable{System.TimeSpan},Alachisoft.NCache.Runtime.Caching.DeliveryMode)">
            <summary>
            It creates a Durable subscription.
            </summary>
            <param name="subscriptionName">Name of the Subscription.</param>
            <param name="subscriptionPolicy">Subscription policy whether Shared or Exclusive.</param>
            <param name="messageReceivedCallback"> Message is delivered through this callback.</param>
            <param name="timespan">An optional paramater that determines the expiration time.</param>
            <param name="deliveryMode"> An optional parameter which specifies whether to deliver messages to register subscribers synchronously or asynchronously. Default value of this parameter is <see cref="F:Alachisoft.NCache.Runtime.Caching.DeliveryMode.Sync"/>.</param> 
            <returns>Definition of the subscription created.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ITopic.SearchOptions">
            <summary>
            Returns whether the user has subscribed to the pattern based or the simple subscription.
            </summary>
            <returns>Type of subscription.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.ITopicSubscription">
            <summary>
            NCache provides the ITopicSubscription interface which is returned against the desired topic, 
            containing information for topic subscriptions.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ITopicSubscription.Topic">
             <summary>
             ITopic instance containing information about the topic. 
             </summary>
             <returns>ITopic instance of the topic.</returns>
             <example>
             The following example prints the topic name of the subscription.
             <code>
             ITopicSubscription topicSubscription = _topic.CreateSubscription(messageReceivedCallback);
            
             Console.WriteLine("Topic Name : {0}", topicSubscription.Topic.Name);
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.ITopicSubscription.UnSubscribe">
             <summary>
             This method unsubscribes the topic. 
             </summary>
             <remarks>
             You can use this method to allow the subscriber to unregister from the topic, i.e., 
             the subscriber will not receive any messages in the future.
             </remarks>
             <example>
             The following example demonstrates how to unsubscribe the subscription.
             <code>
             ITopicSubscription topicSubscription = _topic.CreateSubscription(messageReceivedCallback);
            
             topicSubscription.UnSubscribe();
             </code>
             </example>
        </member>
        <member name="E:Alachisoft.NCache.Runtime.Caching.ITopicSubscription.OnMessageRecieved">
            <summary>
            Event to register subscriber against the topic so that it can receive published messages.
            </summary>
            <returns> Callback for receiving messages in application.</returns>
            <example>
            The following example registers the message received callback on topic subscription
            <code>
            topicSubscription.OnMessageRecieved += messageReceivedCallback;
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.Message">
            <summary>
            A message contains the actual 
            data object which is sent by the publisher and delivered to interested subscribers for the topic.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.Message.#ctor(System.Object,System.Nullable{System.TimeSpan})">
            <summary>
            Initializes an instance of class Message.
            </summary>
            <param name="payload">This property specifies the payload of the message.</param>
            <param name="timeSpan">A constant value that indicates that messages have been added into the cache without expiry.</param>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.Message.MessageId">
            <summary>
            Auto generated ID for the message, as same messages can be stored on different topics.
            </summary>
            <returns>Auto generated ID for the message.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.Message.ExpirationTime">
            <summary>
            The ExpirationTime of TimeSpan type after which the message is expired from the topic. 
            This can also accept a null value, which will ensure that the message is not expired from the topic. 
            In case of no expiration time specified, null is considered as a default value.
            </summary>
            <returns>Time after which the message is expired from the topic. This can also accept a null value, which will ensure that the message is not expired from the topic. </returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.Message.Payload">
            <summary>
            	The actual data object of interest for subscribers, for example, Order.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.Message.CreationTime">
            <summary>
            This property specifies the time of creation in DateTime for the message.
            </summary>
            <returns>Creation time of message in DateTime.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.Message.NoExpiration">
            <summary>
            Specifies the TimeSpan.MaxValue for the message, so that it is not expired.
            </summary>
            <returns>A constant value that indicates that messages have been added into cache without expiry.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.MessageDeliveryFailureCallback">
            <summary>
            Delivery failure notification is raised to any publisher which has registered a message failure event on that topic.
            </summary>
            <param name="sender">Sender's information.</param>
            <param name="args">Event Arguments.</param>
            <example>The following example demonstrates how to use the <see cref="T:Alachisoft.NCache.Runtime.Caching.MessageDeliveryFailureCallback"/> class to notify 
            an application about the message delivery failure. 
            
            First, initialize the cache.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            </code>
            
            Then, get messaging service from the cache.
            <code>
            IMessagingService messagingService=cache.MessagingService;
            </code>
            
            Then, get topic from the messagingService.
            <code>
            ITopic topic=messagingService.GetTopic("mytopic");  
            if(topic==null)  //If topic not exists create it.
            {
              topic=messagingService.CreateTopic("mytopic");
            }
            </code>     
            
            Then, register for message delivery failure events.
            <code>
            public void MessageDeliveryFailure(object sender, MessageFailedEventArgs args)
            {
            	// ...
            }
            
            topic.MessageDeliveryFailure += MessageDeliveryFailure;
            </code>
            
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.MessageEventArgs">
            <summary>
            Arguments containing details of the received message including the topic, sender and type.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.MessageEventArgs.#ctor(Alachisoft.NCache.Runtime.Caching.IMessage,Alachisoft.NCache.Runtime.Caching.DeliveryOption,Alachisoft.NCache.Runtime.Caching.ITopic,System.String)">
            <summary>
            This constructor of class MessageEventArgs creates an instance of class with message to be delivered, DeliveryOption, topic to which message belongs, and the topic on which message is published.
            </summary>
            <param name="message">Message to be delivered.</param>
            <param name="deliverOption">How message should be delivered.</param>
            <param name="messageTopic">Topic to which message belongs.</param>
            <param name="topicName"> Topic on which message is published.</param> 
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.MessageEventArgs.Message">
            <summary>
            A message contains the actual data object which is sent by the publisher and delivered to the 
            interested subscribers for the topic. NCache provides the Message class which implements the IMessage 
            interface to create a message.
            </summary>
            <returns> The actual data object which is sent by the publisher and delivered to the 
            interested subscribers for the topic.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.MessageEventArgs.DeliveryOption">
             <summary>
             This property specifies how message should be delivered.
             </summary>
            <returns>Specifies the delivery option for message.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.MessageEventArgs.Topic">
            <summary>
            This property specifies the topic to which the message belongs.
            </summary>
            <returns>Topic to which the message belongs. </returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.MessageEventArgs.TopicName">
            <summary>
            This property specifies the topic name on which the message is published.
            </summary>
            <returns>The topic name on which the message is published.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.MessageFailedEventArgs">
            <summary>
            This class represents the arguments containing message failure information.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.MessageFailedEventArgs.#ctor(Alachisoft.NCache.Runtime.Caching.IMessage,Alachisoft.NCache.Runtime.Caching.DeliveryOption,Alachisoft.NCache.Runtime.Caching.ITopic,Alachisoft.NCache.Runtime.Caching.MessageFailureReason)">
            <summary>
            This constuctor creates an instance of class MessageFailedEventArgs.
            </summary>
            <param name="message">This property specifies message to be delivered.</param>
            <param name="deliverOption">This property specifies message delivery options.</param>
            <param name="topic">This property specifies the topic to which message belongs.</param>
            <param name="messageFailureReason">This property specifies the reason of message delivery failure.</param>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.MessageFailedEventArgs.MessageFailureReason">
            <summary>
            Reason of message delivery failure.
            </summary>
            <returns>Reason of message delivery failure.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.MessageReceivedCallback">
            <summary>
            This delegate represents callback for receiving messages in application.
            </summary>
            <param name="sender">Sender's information.</param>
            <param name="args">Event Arguments.</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.MessageFailureReason">
            <summary>
            The reason for failed message delivery.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.MessageFailureReason.Expired">
            <summary>
            Failed, because it could not be delivered within expiration time.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.MessageFailureReason.Evicted">
            <summary>
            Failed, because it got evicted before delivery.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.SubscriptionPolicy">
            <summary>
            Defines the policy used in case of Durable subscription.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.SubscriptionPolicy.Shared">
            <summary>
            Shared subscription policy is for multiple subscribers on a single subscription. In this case, messages are sent to any of the topic subscribers. This policy provides better load division over clients subscribing to a subscription.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.SubscriptionPolicy.Exclusive">
            <summary>
            Exclusive subscription policy is for a single subscriber on a single subscription. In this case, messages are recieved by the single subscriber only.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.TopicDeletedCallback">
            <summary>
             In case a topic is deleted, it is a forceful deletion and deletes all messages 
             and related meta information form the cache. Hence, the subscriber and publisher must be notified of
             this deletion through TopicDeleteCallback method for notifying application about topic deletion.
            </summary>
            <param name="sender">Sender's information.</param>
            <param name="args">Event Arguments.</param>
            <example>The following example demonstrates how to use the <see cref="T:Alachisoft.NCache.Runtime.Caching.TopicDeletedCallback"/> class to notify 
            an application about topic deletion.
            
            First, initialize the cache.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            </code>
            
            Then, get messaging service from the cache.
            <code>
            IMessagingService messagingService=cache.MessagingService;
            </code>
            
            Then, get the topic from the messagingService.
            <code>
            ITopic topic=messagingService.GetTopic("mytopic");  
            if(topic==null)  //Create the topic if it doesnt exist.
            {
              topic=messagingService.CreateTopic("mytopic");
            }
            </code>     
            
            Then, register for topic deletion events.
            <code>
            public void TopicDeletedCallback(object sender, TopicDeleteEventArgs args)
            {
            	// ...
            }
            
            topic.OnTopicDeleted = TopicDeletedCallback;
            </code>
            
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.TopicDeleteEventArgs">
            <summary>
            This class represents the arguments containing deleted topic information.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.TopicDeleteEventArgs.#ctor(System.String)">
            <summary>
            Creates the TopicDeleteEventArgs instance.
            </summary>
            <param name="topicName">Deleted topic name</param>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.TopicDeleteEventArgs.TopicName">
            <summary>
            This property specifies the name of the deleted topic.
            </summary>
            <returns>Name of the deleted topic.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.Messaging.TopicSearchOptions">
            <summary>
            Specifies the option through which the topic is searched by.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.Messaging.TopicSearchOptions.ByName">
            <summary>
            Search by name.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.Messaging.TopicSearchOptions.ByPattern">
            <summary>
            Search by pattern.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.ProviderItemBase">
            <summary>
            The ProviderItemBase is just like a CacheItem, but it has some limited fields.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ProviderItemBase.Group">
            <summary>
            Gets/Sets the group of cache item.
            </summary>
            <returns>Group of cacheitem.</returns>
            
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ProviderItemBase.SubGroup">
            <summary>
            Gets/Sets the sub group of the cache item.
            </summary>
            <returns> SubGroup of the cache item.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ProviderItemBase.Tags">
            <summary>
            Gets/Sets the tags for the cache item.
            </summary>
            <returns>Represents a string based identifier that can be associated with the cache items so that they are logically grouped 
            together and can be retrieved efficiently.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ProviderItemBase.NamedTags">
            <summary>
            Gets/Sets the NamedTags for the cache items.
            </summary>
            <returns> Represents a dictionary that can be associated with cache items to provide extra information.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ProviderItemBase.ResyncItemOnExpiration">
            <summary>
            Gets/Sets the flag which indicates whether item should be reloaded on
            expiration if Read-Through provider is specified.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ProviderItemBase.Dependency">
            <summary>
            Gets/Sets the cache dependency.
            </summary>
            <returns>Tracks cache dependencies, which can be files, directories, or keys to other objects in 
            application's cache. This class cannot be inherited.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ProviderItemBase.AbsoluteExpiration">
            <summary>
            Gets/Sets absolute expiration.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ProviderItemBase.SlidingExpiration">
            <summary>
            Gets/Sets the sliding expiration.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ProviderItemBase.ItemPriority">
            <summary>
            Gets/Sets the priority of the item.
            </summary>
            <returns>Relative priority of items stored in the cache.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ProviderItemBase.ResyncProviderName">
            <summary>
            Gets/Sets provider name for re-synchronization of cache.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ProviderItemBase.IsJavaReadThrough">
            <summary>
            Gets/Sets Read-Through, if ReadThru is a type of Java.
            </summary>
            <retuns>Gets/Sets ReadThrough, if ReadThru is a type of Java.</retuns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ProviderItemBase.Expiration">
            <summary>
            Gets/Sets expiration of cache items in the 
            form of <see cref="T:Alachisoft.NCache.Runtime.Caching.Expiration"/>.
            </summary> 
            <returns> Value of time in the form of TimeSpan that shows 
            after how much time, the item in cache is to be expired.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ProviderItemBase.ResyncOptions">
            <summary>
            Gets/Sets <see cref="T:Alachisoft.NCache.Runtime.Caching.ResyncOptions"/> 
            for cache items.
            </summary>
            <returns> This property contains information for the items that would be resynced after expiration from the Read-Through provider. </returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.DataSourceModifiedCallBack">
            <summary>
            Defines a callback method for notifying applications when the data source is modified.
            </summary>
            <param name="key">Key on which the dependency is based upon.</param>
            <param name="result"> Contains the status of the operation.</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.WriteBehindOpResult">
            <summary>
            This class represents the result(s) of data source operations.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.WriteBehindOpResult.Status">
            <summary>
            Specifies the <see cref="T:Alachisoft.NCache.Runtime.Caching.WriteBehindOpStatus"/> of the data source operation.
            </summary>
            <returns>This property specifies the status of write behind operations.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.WriteBehindOpResult.Exception">
            <summary>
            This property represents errors that occur during application execution.
            </summary>
            <return>This property represents errors that occur during application execution.</return>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.WriteBehindOpStatus">
            <summary>
            Enumeration that defines the status of write behind operations.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.WriteBehindOpStatus.Failure">
            <summary>
            If user code returned false.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.WriteBehindOpStatus.Success">
            <summary>
            If write behind operation was successful.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.ReadMode">
            <summary>
            Enumeration that defines the read mode if the item is not found in the cache.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.ReadMode.None">
            <summary>
            Returns null if item not found.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.ReadMode.ReadThru">
            <summary>
            Looks in data source for item if not found.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.ReadMode.ReadThruForced">
            <summary>
            Forcefully look into data source for item and update/add item in the cache.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.ReadThruOptions">
            <summary>
            A class that defines how fetch operations can be handled through the datasource if the desired data is not present in the cache.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ReadThruOptions.Mode">
            <summary>
            Specifies ReadMode for read-through options.
            </summary>
            <returns>ReadMode for read-through options.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ReadThruOptions.ProviderName">
            <summary>
            Specifies the unique identifier for the data source provider.
            </summary>
            <returns> Unique identifier for the data source provider.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.ReadThruOptions.#ctor(Alachisoft.NCache.Runtime.Caching.ReadMode,System.String)">
            <summary>
            Initializes a new instance of class ReadThruOptions.
            </summary>
            <param name="mode"><see cref="T:Alachisoft.NCache.Runtime.Caching.ReadMode"/> for ReadThruOptions.</param>
            <param name="providerName">A unique identifier for the data source provider.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.ReadThruOptions.Deserialize(Alachisoft.NCache.Runtime.Serialization.IO.CompactReader)">
            <summary>
            Used for deserializing through the <see cref="T:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader"/>.
            </summary>
            <param name="reader">Reads an object of type <see cref="T:System.Object"/> from the current stream and advances the stream position. </param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.ReadThruOptions.Serialize(Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter)">
            <summary>
            Used for serializing through the <see cref="T:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter"/>.
            </summary>
            <param name="writer">Writes to the current stream and advances the stream position. </param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.ResyncOptions">
            <summary>
            The ResyncOptions class contains information for items that would be resynced after expiration from the Read-Through Provider.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.ResyncOptions.#ctor(System.Boolean,System.String)">
            <summary>
             Basic constructor for ResyncOptions, provider name is optional.
            </summary>
            <param name="providerName">Name of the specified provider.</param>
            <param name="resyncOnExpiration">Specifies if items are to be ReSynced at expiry.</param>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ResyncOptions.ResyncOnExpiration">
            <summary>
             Specifies if items are to be ReSynced at expiry.
            </summary>
            <returns>Boolean value, true or false.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ResyncOptions.ProviderName">
            <summary>
            Specifies the Read-Through provider name when an item will be resynced at expiry.
            </summary>
            <returns>Name of the Read-Through provider.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.WriteMode">
            <summary>
            Enumeration that defines the update operation on the cache that can update data source.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.WriteMode.None">
            <summary>
            Does not update the data source.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.WriteMode.WriteThru">
            <summary>
            Updates the data source synchronously.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Caching.WriteMode.WriteBehind">
            <summary>
            Updates the data source asynchronously.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions">
            <summary>
            A class that defines WriteThruOptions regarding updating the data source.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.WriteThruOptions.Mode">
            <summary>
            Specifies the <see cref="T:Alachisoft.NCache.Runtime.Caching.WriteMode"/> for write-through options.
            </summary>
            <returns>WriteMode for write-through options.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.WriteThruOptions.ProviderName">
            <summary>
            Specifies the unique identifier for the data source provider.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.WriteThruOptions.#ctor(Alachisoft.NCache.Runtime.Caching.WriteMode,System.String)">
            <summary>
            Initializes a new instance of WriteThruOptions.
            </summary>
            <param name="mode"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteMode"/> for write-through options.</param>
            <param name="providerName">A unique identifier for the data source provider.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.WriteThruOptions.SetDataSourceNotification(Alachisoft.NCache.Runtime.Caching.DataSourceModifiedCallBack,Alachisoft.NCache.Runtime.Events.EventType)">
            <summary>
            Sets the data source modified notification for write-through options.
            </summary>
            <param name="callback">A delegate that is called when
            an item is added to the data source.</param>
            <param name="eventType"><see cref="P:Alachisoft.NCache.Runtime.Caching.WriteThruOptions.EventType"/> specifies the type of event to be registered.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.WriteThruOptions.Deserialize(Alachisoft.NCache.Runtime.Serialization.IO.CompactReader)">
            <summary>
            Used for deserializing through the <see cref="T:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader"/>.
            </summary>
            <param name="reader">Reads an object of type <see cref="T:System.Object"/> from the current stream 
            and advances the stream position.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.WriteThruOptions.Serialize(Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter)">
            <summary>
            Used for serializing through the <see cref="T:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter"/>.
            </summary>
            <param name="writer"> Writes to the current stream and advances the stream position.</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.ProviderDataTypeItem`1">
            <summary>
            ProviderDataTypeItem is just like a CacheItem, but it has some limited fields
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.ProviderDataTypeItem`1.#ctor(`0)">
            <summary>
            Initializes an instance of the class DataTypeItem.
            </summary>
            <param name="data">Data object.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.ProviderDataTypeItem`1.#ctor(System.Int64)">
            <summary>
            Initializes an instance of the Counter Item.
            </summary>
            <param name="counter">Value to initialize with.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.ProviderDataTypeItem`1.#ctor(Alachisoft.NCache.Runtime.Caching.DistributedDataType)">
            <summary>
            Initializes an instance of the CacheItem.
            </summary>
            <param name="type">Contains the type of distributed data type.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.ProviderDataTypeItem`1.#ctor(`0,Alachisoft.NCache.Runtime.Caching.DistributedDataType)">
            <summary>
            Initializes an instance of CacheItem.
            </summary>
            <param name="data">Data object.</param>
            <param name="type">Contains the type of distributed data type.</param>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ProviderDataTypeItem`1.Type">
            <summary>
            Gets/Sets the value of the CacheItem.
            </summary>
            <returns>Value of the CacheItem.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ProviderDataTypeItem`1.Data">
            <summary>
            Gets/Sets the value of the DataType Item.
            </summary>
            <returns>Value of the DataType Item.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.ProviderDataTypeItem`1.Counter">
            <summary>
            Gets/Sets the value of the Counter.
            </summary>
            <returns>Value of the counter.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.ProviderDataTypeItem`1.GetDataAsJson``1">
            <summary>
            Gets the value of DataType item in the form of 
            <see cref="T:Alachisoft.NCache.Runtime.JSON.JsonValueBase"/>.
            </summary>
            <typeparam name="T">Type of <see cref="T:Alachisoft.NCache.Runtime.JSON.JsonValueBase"/> 
            or other derived classes.</typeparam>
            <returns>DataType item in the form of 
            <see cref="T:Alachisoft.NCache.Runtime.JSON.JsonValueBase"/>.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.ProviderCacheItem">
            <summary>
            The ProviderCacheItem class is just like a CacheItem class, but it has some limited fields.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.ProviderCacheItem.#ctor(System.Object)">
            <summary>
            Initializes an instance of the CacheItem.
            </summary>
            <param name="value">The object to initialize the ProviderCacheItem with.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.ProviderCacheItem.GetValue``1">
            <summary>
            Gets value of the CacheItem.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.ProviderCacheItem.SetValue(System.Object)">
            <summary>
            Sets value of the CacheItem.
            </summary>
            <returns>Value of the CacheItem.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Caching.Tag">
            <summary>
            Represents a string based identifier that can be associated with cache items so that they are logically grouped 
            together and can be retrieved efficiently.
            </summary>
            <remarks>
            One or more tags can be associated with each cache item. 
            </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.Tag.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Tag class.
            </summary>
            <param name="tag">Name of the tag.</param>
            <example>
            The following example initializes a tag.
            <code>
            Tag tag1 = new Tag("Alpha");
            </code>
            </example>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Caching.Tag.TagName">
             <summary>
             Gets the string based tag name.
             </summary>
             <example>
             The following example prints tag value.
             <code>
             Tag tag1 = new Tag("Alpha");
             Tag tag2 = new Tag("Beta");
            
                if (tag1.Equals(tag2))
                {
                    Console.WriteLine("{0} and {1} are same", tag1.TagName, tag2.TagName);
                }
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.Tag.ToString">
             <summary>
             String representation of the Tag class.
             </summary>
             <returns>String value of tag.</returns>
             <example>
             The following example prints a tag string.
             <code>
             Tag tag1 = new Tag("Alpha");
             Tag tag2 = new Tag("Beta");
            
                if (tag1.Equals(tag2))
                {
                    Console.WriteLine("{0} and {1} are same", tag1.ToString(), tag2.ToString());
                }
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.Tag.Equals(System.Object)">
             <summary>
             It compares the object with the tag and returns true if is equal, otherwise it will return false.
             </summary>
             <param name="obj">Object must be of type Tag.</param>
             <returns>True/False.</returns>
             <example>
             The following example compares multiple tags.
             <code>
             Tag tag1 = new Tag("Alpha");
             Tag tag2 = new Tag("Beta");
            
             if (tag1.Equals(tag2))
             {
                 Console.WriteLine("Tags are same");
             }
             else
             {
                 Console.WriteLine("Tags are not same");
             }
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Caching.Tag.GetHashCode">
             <summary>
             Gets the HashCode for the tag.
             </summary>
             <returns>HashCode for the tag.</returns>
             <example>
             The following example prints Hashcode of tag.
             <code>
             Tag tag1 = new Tag("Alpha");
            
             Console.WriteLine("Hashcode of {0} is {1}", tag1.ToString(), tag1.GetHashCode());
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DataPersistence.IDataPersistenceProvider.Initialize(System.String,System.Collections.IDictionary)">
            <summary>
            Initializes the data persistence provider on startup.
            </summary>
            <param name="storeName">Name of the persistence store.</param>.
            <param name="parameters"> Parameters required to connect to the persistence provider.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DataPersistence.IDataPersistenceProvider.StoreData(Alachisoft.NCache.Runtime.DataPersistence.DatasetIdentifier,System.String,Alachisoft.NCache.Runtime.DataPersistence.StorageEntryInfo,Alachisoft.NCache.Runtime.Enum.Persistence.CollectionType)">
            <summary>
             Store cache data in the persistence provider. Used for both add and update operations.
            </summary>
            <param name="datasetId"> Unique identifier for the specified dataset.</param>
            <param name="key"> Keys of the items to be loaded. </param>
            <param name="storageEntryInfo"> </param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DataPersistence.IDataPersistenceProvider.StoreData(Alachisoft.NCache.Runtime.DataPersistence.DatasetIdentifier,System.Collections.Generic.IDictionary{System.String,Alachisoft.NCache.Runtime.DataPersistence.StorageEntryInfo})">
            <summary>
            Used for addBulk, updateBulk and storing whole bucket data to the persistence provider.
            </summary>
            <param name="datasetId"> Unique identifier for the specified dataset. </param>
            <param name="storageEntriesInfo"> </param> 
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DataPersistence.IDataPersistenceProvider.LoadData(Alachisoft.NCache.Runtime.DataPersistence.DatasetIdentifier,System.String,Alachisoft.NCache.Runtime.Enum.Persistence.CollectionType)">
            <summary>
            Used for get call while data is being loaded into the cache from the persistence store.
            </summary>
            <param name="datasetId"> </param>
            <param name="key"> </param>
            <returns> KeyValuePair of entry returned from persistence provider </returns>  
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DataPersistence.IDataPersistenceProvider.LoadData(Alachisoft.NCache.Runtime.DataPersistence.DatasetIdentifier,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Used for getBulk call while data is being loaded into the cache from the persistence store.
            </summary>
            <param name="datasetId">Unique identifier for the specified dataset. </param>
            <param name="keys">Keys of the items to be loaded. </param>
            <returns> Dictionary of bulk items returned from the persistence provider.</returns>  
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DataPersistence.IDataPersistenceProvider.LoadDataset(Alachisoft.NCache.Runtime.DataPersistence.DatasetIdentifier,Alachisoft.NCache.Runtime.Enum.Persistence.CollectionType)">
            <summary>
            Used to load the whole bucket into the cache.
            </summary>
            <param name="datasetId">Identification for bucket</param> 
            <returns> Dictionary of bulk items returned from persistence provider</returns>  
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DataPersistence.IDataPersistenceProvider.GetDatasetReader(Alachisoft.NCache.Runtime.DataPersistence.DatasetIdentifier,Alachisoft.NCache.Runtime.Enum.Persistence.CollectionType)">
            <summary>
            Used to load whole bucket into the cache.
            </summary>
            <param name="datasetId"> </param> 
            <returns> Dictionary of bulk items returned from persistence provider  </returns>  
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DataPersistence.IDataPersistenceProvider.GetDatasetItemsCount(Alachisoft.NCache.Runtime.DataPersistence.DatasetIdentifier)">
            <summary>
             Used to get the count of all the items of the given dataset in the persistence provider.
            </summary>
            <param name="datasetId">Unique identifier for the specified dataset.</param> 
            <returns> Count of items. </returns>  
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DataPersistence.IDataPersistenceProvider.RemoveData(Alachisoft.NCache.Runtime.DataPersistence.DatasetIdentifier,System.String,Alachisoft.NCache.Runtime.Enum.Persistence.CollectionType)">
            <summary>
            Used to remove/delete a dataset from the persistence provider.
            </summary>
            <param name="datasetId"> </param>
            <param name="key"> </param>  
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DataPersistence.IDataPersistenceProvider.RemovePatternData(Alachisoft.NCache.Runtime.DataPersistence.DatasetIdentifier,System.String,Alachisoft.NCache.Runtime.Enum.Persistence.CollectionType)">
            <summary>
            Used for remove/delete a dataset from persistence provider using pattern.
            </summary>
            <param name="datasetId"> </param>
            <param name="key"> </param>  
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DataPersistence.IDataPersistenceProvider.RemoveData(Alachisoft.NCache.Runtime.DataPersistence.DatasetIdentifier,System.Collections.Generic.ICollection{System.String},Alachisoft.NCache.Runtime.Enum.Persistence.CollectionType)">
            <summary>
            Used to remove/delete bulk data from the persistence provider.
            </summary>
            <param name="datasetId"> </param>
            <param name="keys"> </param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DataPersistence.IDataPersistenceProvider.ClearDataset(Alachisoft.NCache.Runtime.DataPersistence.DatasetIdentifier)">
            <summary>
            Used to remove all data against the bucket.
            </summary>
            <param name="datasetId"> Unique identifier for the dataset. </param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DataPersistence.IDataPersistenceProvider.DisposeDataset(Alachisoft.NCache.Runtime.DataPersistence.DatasetIdentifier)">
            <summary>
            Dispose the resources of dataset used by this node.
            </summary>
            <param name="datasetId"></param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DataPersistence.IDataPersistenceProvider.TestConnection">
            <summary>
            Checks store connection.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DataPersistence.IDataPersistenceProvider.CreateStore">
            <summary>
            Creates a new store.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DataPersistence.IDataPersistenceProvider.VerifyStore">
            <summary>
            Checks if the store already exists.
            </summary>  
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DataPersistence.IDataPersistenceProvider.Destroy">
            <summary>
            Removes all files related to persistence.
            </summary>  
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DataPersistence.IDataPersistenceProvider.RemoveSafeDeletedRows">
            <summary>
            Removes the safe deleted rows permanently.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.DataPersistence.StoreOperationType.Add">
            <summary>
            The data is being stored for the first time.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.DataPersistence.StoreOperationType.Update">
            <summary>
            The existing data is being updated.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Enum.Persistence.CollectionType.NCacheCollection">
            <summary>
            Store cache entries
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Enum.Persistence.CollectionType.Metadata">
            <summary>
            Store metadata
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Enum.JsonDataType">
            <summary>
            An enum demonstrating the type of data contained by the Json class.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Enum.JsonDataType.Null">
            <summary>
            Contained data is null. This value is 
            actually just a counterpart of <see langword="null" />.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Enum.JsonDataType.Boolean">
            <summary>
            Contained data is of boolean type.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Enum.JsonDataType.Number">
            <summary>
            Contained data is of number type.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Enum.JsonDataType.String">
            <summary>
            Contained data is of string type.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Enum.JsonDataType.Object">
            <summary>
            Contained data is a Json object class.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Enum.JsonDataType.Array">
            <summary>
            Contained data is a Json array.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Enum.JsonDataType.Date">
            <summary>
            Contained data is a date type.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.InvalidSurrogateException.#ctor(System.String)">
            <summary> 
            Overloaded constructor, takes the reason as parameter. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.InvalidSurrogateException.#ctor(System.String,System.Exception)">
            <summary>
            overloaded constructor. 
            </summary>
            <param name="reason">Reason for exception</param>
            <param name="inner">Nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.InvalidSurrogateException.#ctor(System.Int32)">
            <summary>
            overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.InvalidSurrogateException.#ctor(System.Int32,System.String)">
            <summary>
            Overloaded Constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.InvalidSurrogateException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Overloaded Constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
            <param name="inner">nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.InvalidSurrogateException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="errorCode">Assigned ErrorCode</param>
            <param name="reason">Exception message</param>
            <param name="stackTrace">Stacktrace</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Runtime.Exceptions.InvalidSurrogateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" -->
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.InvalidSurrogateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Manual serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.MemberIsStoppedException">
            <summary>
            This exception is thrown whenever the object is not initailized.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.MemberIsStoppedException.#ctor">
            <summary> 
            The default constructor of MemberIsStoopedException class. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.MemberIsStoppedException.#ctor(System.String)">
            <summary>
            An overloaded constructor that takes message as parameter.
            </summary>
            <param name="message">Exception Message.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.MemberIsStoppedException.#ctor(System.String,System.Exception)">
            <summary>
            An overloaded constructor that takes message and nested exception as parameters.
            </summary>
            <param name="message">Exception message.</param>
            <param name="inner">Nested exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.MemberIsStoppedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            An overloaded constructor that takes serialization info and streaming context. 
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.MemberIsStoppedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
            Populates the SerializationInfo class with the data needed to serialize the target object.
             </summary>
             <param name="info">Stores all the data needed to serialize or deserialize an object. </param>
             <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.ObjectNotInitializedException">
            <summary>
            This is a data class used to inform the user that the requested object is not initialized yet.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ObjectNotInitializedException.#ctor">
            <summary> 
            The default constructor of class ObjectNotInitializedException. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ObjectNotInitializedException.#ctor(System.String)">
            <summary>
            An overloaded constructor that takes message as parameter.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ObjectNotInitializedException.#ctor(System.String,System.Exception)">
            <summary>
            An overloaded constructor that takes exception message and nested exception as parameters.
            </summary>
            <param name="message">Exception message.</param>
            <param name="inner">Nested exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ObjectNotInitializedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            An overloaded constructor that takes serialization info and streaming context as parameters.
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>     
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ObjectNotInitializedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the SerializationInfo class with the data needed to serialize the target object.
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.PubSub.InvalidOperationException">
            <summary>
            This exception is thrown whenever an API fails. In case of bulk operation, you even receive 
            information about existing keys or unavailable space wrapped within this exception.
            </summary>
            <example>The following example demonstrates how to use this exception in your code.
            <code>
            
            try
            {
                ...
            }
            catch(InvalidOperationException ex)
            {
                ...
            }
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.PubSub.InvalidOperationException.#ctor(System.Int32)">
            <summary> 
            Default constructor. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.PubSub.InvalidOperationException.#ctor(System.String)">
            <summary> 
            Overloaded constructor, takes the reason as parameter. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.PubSub.InvalidOperationException.#ctor(System.String,System.Boolean)">
            <summary> 
            Overloaded constructor, takes the reason as parameter. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.PubSub.InvalidOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Overloaded constructor. 
            </summary>
            <param name="reason">Reason for exception</param>
            <param name="inner">Nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.PubSub.InvalidOperationException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
            Overloaded constructor. 
            </summary>
            <param name="reason">Reason for exception</param>
            <param name="inner">Nested exception</param>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Exceptions.PubSub.InvalidOperationException.IsTracable">
            <summary>
            Specifies whether the exception is to be logged or not
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.PubSub.InvalidOperationException.#ctor(System.Int32,System.Object)">
            <summary>
            Overloaded Constructor
            </summary>
            <param name="errorCode">Assigned ErrorCode</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.PubSub.InvalidOperationException.#ctor(System.Int32,System.String)">
            <summary>
            Overloaded Constructor
            </summary>
            <param name="errorCode">Assigned ErrorCode</param>
            <param name="reason">Exception message</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.PubSub.InvalidOperationException.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
            Overloaded Constructor
            </summary>
            <param name="errorCode">Assigned ErrorCode</param>
            <param name="reason">Exception message</param>
            <param name="isTracable"></param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.PubSub.InvalidOperationException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="errorCode">Assigned errorcode</param>
            <param name="reason">Exception message</param>
            <param name="inner">Nested Exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.PubSub.InvalidOperationException.#ctor(System.Int32,System.String,System.Exception,System.Boolean)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
            <param name="inner">Nested exception</param>
            <param name="isTracable"></param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.PubSub.InvalidOperationException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Overloaded Constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
            <param name="stackTrace">stacktrace</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.PubSub.InvalidOperationException.#ctor(System.Int32,System.String,System.Boolean,System.String)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
            <param name="isTracable"></param>
            <param name="stackTrace">stacktrace</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.PubSub.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Overloaded constructor, manual serialization. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.PubSub.InvalidOperationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Manual serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.PubSub.PubSubException">
            <summary>
            It is the base class for all the exceptions that are thrown from NCache. 
            So you can catch this exception for all the exceptions thrown from within the cache.
            </summary>
            <example>The following example demonstrates how to use this exception in your code.
            <code>
            
            try
            {
                ...
            }
            catch(PubSubException ex)
            {
                ...
            }
            
            </code>
            </example>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Exceptions.PubSub.PubSubException.ErrorCode">
            <summary>
            Property for setting ErrorCode 
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Exceptions.PubSub.PubSubException.StackTrace">
            <summary>
            Property for setting stack trace
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.PubSub.PubSubException.#ctor">
            <summary> 
            Default constructor. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.PubSub.PubSubException.#ctor(System.String)">
            <summary> 
            Overloaded constructor, takes the reason as parameter. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.PubSub.PubSubException.#ctor(System.String,System.Exception)">
            <summary>
            Overloaded constructor. 
            </summary>
            <param name="reason">Reason for exception</param>
            <param name="inner">Nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.PubSub.PubSubException.#ctor(System.Int32)">
            <summary>
            overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.PubSub.PubSubException.#ctor(System.Int32,System.Exception)">
            <summary>
            overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="exception">nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.PubSub.PubSubException.#ctor(System.Int32,System.String)">
            <summary>
            Overloaded Constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">reason for exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.PubSub.PubSubException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            overloaded exception
            </summary>
            <param name="errorCode">asigned errorcode</param>
            <param name="reason">exception message</param>
            <param name="stackTrace">stacktrace</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.PubSub.PubSubException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
            <param name="inner">nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.PubSub.PubSubException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Overloaded constructor, manual serialization. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.PubSub.PubSubException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Manual serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.PubSub.PubSubException.ToString">
            <summary>
            Represents the exception in string form with type and stack trace
            </summary>
            <returns></returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.AggregateException">
            <summary>
            This exception is thrown when multiple exceptions occur from multiple nodes. It combines all
            exceptions as an inner exception and throw it to the client application.
            </summary>
            <example>The following example demonstrates how to use this exception in your code.
            <code>
            
            try
            {
                ...
            }
            catch(AggregateException ex)
            {
                ...
            }
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.AggregateException.#ctor(System.Exception[])">
             <summary> 
            This constructor overload of class of the Aggregate Exception takes the exceptions that are the cause of the current exception as parameter. 
             </summary>
             <param name="exceptions">The exceptions that are the cause of the current exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.AggregateException.#ctor(System.Collections.ArrayList)">
            <summary> 
            This constructor overload of class of the Aggregate Exception takes the array list of exceptions that are the cause of the current exception as parameter. 
            </summary>
            <param name="exceptions">The exceptions that are the cause of the current exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.AggregateException.#ctor(System.String,System.Collections.ArrayList)">
            <summary> 
            This constructor overload of class of the Aggregate Exception takes the reason of the exception and array list of exceptions as parameters. 
            </summary>
            <param name="reason">The reason for exception.</param>
            <param name="exceptions">The exceptions that are the cause of the current exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.AggregateException.#ctor(System.Int32,System.String,System.Collections.ArrayList)">
            <summary>
            This constructor overload of class of the Aggregate Exception takes errorcode, reason and list of exceptions as parameters.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Exception message.</param>
            <param name="exceptions">The exceptions that are the cause of the current exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.AggregateException.#ctor(System.Int32,System.String,System.Collections.ArrayList,System.String)">
            <summary>
            This constructor overload of class of the Aggregate Exception takes assigned errorcode and exception message as parameters.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Exception message.</param>
            <param name="exceptions">The exceptions that are the cause of the current exception.</param>
            <param name="stackTrace">Stacktrace for exception.</param>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Exceptions.AggregateException.InnerExceptions">
            <summary>
            The exceptions that are the cause of the current exception.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Exceptions.AggregateException.Message">
            <summary>
            The message of the exception. This message is the aggregate message from multiple exceptions.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.AggregateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            This constructor overload of class of the Aggregate Exception takes serialization info and streaming context as parameters.
            </summary>
            <param name="context">This parameter contains the information about source and destination with additional context of given serialized stream.</param>
            <param name="info">It contains information to serialize exception manually.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.AggregateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method contains information to serialize the exception manually.
            </summary>
            <param name="info">It contains information to serialize the exception manually.</param>
            <param name="context">This parameter contains information about source and destination with additional context of the given serialized stream.</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.CollectionTypeMismatchException">
            <summary>
            Thrown whenever an API fails. In case of GetCollection with invalid Type, 
            if created collection on cache store is of differente type, then it throws this type of exception,
            </summary>
            <example>The following example demonstrates how to use this exception in your code.
            <code>
            
            try
            {
                IDistributedList &lt;int&gt; distributedList = cache.Collections.CreateList &lt;int&gt;("key");
                IDistributedQueue &lt;int&gt; distributedQueue = cache.Collections.GetQueue &lt;int&gt; ("key");
            }
            catch(CollectionTypeMismatch ex)
            {
                ...
            }
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.CollectionTypeMismatchException.#ctor">
            <summary> 
            Default constructor of class CollectionTypeMismatchException. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.CollectionTypeMismatchException.#ctor(System.String)">
            <summary> 
            Overloaded constructor, takes the reason as parameter. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.CollectionTypeMismatchException.#ctor(System.String,System.Boolean)">
            <summary> 
            Overloaded constructor, takes the reason as parameter. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.CollectionTypeMismatchException.#ctor(System.String,System.Exception)">
            <summary>
            Overloaded constructor. 
            </summary>
            <param name="reason">reason for exception</param>
            <param name="inner">nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.CollectionTypeMismatchException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
            overloaded constructor. 
            </summary>
            <param name="reason">reason for exception</param>
            <param name="inner">nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.CollectionTypeMismatchException.#ctor(System.Int32,System.String)">
            <summary>
            overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.CollectionTypeMismatchException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
            <param name="stackTrace">stacktrace for exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.CollectionTypeMismatchException.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
            overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
            <param name="isTracable"></param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.CollectionTypeMismatchException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
            <param name="inner">nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.CollectionTypeMismatchException.#ctor(System.Int32,System.String,System.Exception,System.Boolean)">
            <summary>
            overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
            <param name="inner">nested exception</param>
            <param name="isTracable"></param>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Exceptions.CollectionTypeMismatchException.IsTracable">
            <summary>
            Specifies whether the exception is to be logged or not
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.CollectionTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            overloaded constructor, manual serialization. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.CollectionTypeMismatchException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            manual serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.MetricsException.#ctor">
            <summary>
            The default constructor of class MetricsException.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.MetricsException.#ctor(System.String)">
            <summary> 
            An overloaded constructor that takes the reason as parameter. 
            </summary>
            <param name="reason">Reason of the exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.MetricsException.#ctor(System.String,System.Exception)">
            <summary>
            An overloaded constructor that takes the reason and nested exception as parameters.
            </summary>
            <param name="reason">Reason of exception.</param>
            <param name="inner">Nested exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.MetricsException.#ctor(System.Int32)">
            <summary>
            An overloaded constructor that takes the errorcode as parameter.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.MetricsException.#ctor(System.Int32,System.String)">
            <summary>
            An overloaded constructor that takes errorcode and exception message as parameters.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Exception message.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.MetricsException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            An overloaded constructor that takes errorcode,exception message and stacktrace as parameters.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Exception message.</param>
            <param name="stackTrace">A string representation of the immediate frames on the call stack.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.MetricsException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
             An overloaded constructor that takes errorcode,exception message and nested exception as parameters.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Exception message.</param>
            <param name="inner">Nested exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.MetricsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            An overloaded constructor that takes serialization info and streaming context as parameters.
            </summary>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.MetricsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the SerializationInfo class with the data needed to serialize the target object.
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.VersionException">
            <summary>
            This exception is thrown whenever the configurations of two nodes of the same cache contradict with each other.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.VersionException.#ctor(System.Int32)">
            <summary>
            Overloaded constructor that takes the errorcode as an argument.
            </summary>
            <param name="errorCode">ErrorCode for the Exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.VersionException.#ctor(System.String,System.Int32)">
            <summary> 
            Overloaded constructor, takes the reason as parameter. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.VersionException.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Overloaded Constructor
            </summary>
            <param name="reason">Exception message</param>
            <param name="errorCode">assigned errorcode</param>
            <param name="stackTrace">stacktrace</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.VersionException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            overloaded constructor. 
            </summary>
            <param name="reason">reason for exception</param>
            <param name="inner">nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.VersionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the System.Exception class with a specified error
            message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.VersionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Manual serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.APILoggingException">
            <summary>
            This Exception is thrown when Logging is stopped because of some connection loss or due to some other problem.
            </summary>
            <example>The following example demonstrates how to use this exception in your code.
            <code>
            
            try
            {
                ...
            }
            catch(APILoggingException ex)
            {
                ...
            }
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.APILoggingException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.APILoggingException.#ctor(System.String)">
            <summary> 
            overloaded constructor, takes the reason as parameter. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.APILoggingException.#ctor(System.String,System.Exception)">
            <summary>
            overloaded constructor. 
            </summary>
            <param name="reason">reason for exception</param>
            <param name="inner">nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.APILoggingException.#ctor(System.Int32)">
            <summary>
            overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.APILoggingException.#ctor(System.Int32,System.String)">
            <summary>
            overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.APILoggingException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
            <param name="inner">nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.APILoggingException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
            <param name="stackTrace">stacktrace for exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.APILoggingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            overloaded constructor, takes serialization info and streaming context.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.APILoggingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            manual serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.AttributeIndexNotDefined">
            <summary>
             This exception is thrown whenever Attribute index is not found in case of NamedTags
            </summary>
            <example>The following example demonstrates how to use this exception in your code.
            <code>
            
            try
            {
                ...
            }
            catch(AttributeIndexNotDefined ex)
            {
                ...
            }
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.AttributeIndexNotDefined.#ctor(System.String)">
            <summary>
            Constructor that takes error as argument.
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.AttributeIndexNotDefined.#ctor(System.String,System.Exception)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="error"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.AttributeIndexNotDefined.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor that take serialization info and streaming context.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.BadResponseException">
            <summary>
            This exception is thrown whenever an API fails.
            </summary>
            <example>The following example demonstrates how to use this exception in your code.
            <code>
            
            try
            {
                ...
            }
            catch(BadResponseException ex)
            {
                ...
            }
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.BadResponseException.#ctor">
            <summary> 
            Default constructor. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.BadResponseException.#ctor(System.String)">
            <summary> 
            Overloaded constructor, takes the reason as parameter. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.BadResponseException.#ctor(System.String,System.Exception)">
            <summary>
            Overloaded constructor. 
            </summary>
            <param name="reason">Reason for exception</param>
            <param name="inner">Nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.BadResponseException.#ctor(System.Int32)">
            <summary>
            overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.BadResponseException.#ctor(System.Int32,System.String)">
            <summary>
            overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.BadResponseException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
            <param name="stackTrace">stacktrace</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.BadResponseException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
            <param name="inner">nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.BadResponseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Overloaded constructor, manual serialization. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.BadResponseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Manual serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.BucketTransferredException">
            <summary>
            BucketTransferredException is thrown on Add/Insert operation in POR cache when during the 
            node up/down process, a bucket is moved to another node and this node has received 
            the item according to an older map.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.BucketTransferredException.#ctor">
            <summary> 
            default constructor. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.BucketTransferredException.#ctor(System.String)">
            <summary> 
            overloaded constructor, takes the reason as parameter. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.BucketTransferredException.#ctor(System.String,System.Exception)">
            <summary>
            overloaded constructor. 
            </summary>
            <param name="reason">reason for exception</param>
            <param name="inner">nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.BucketTransferredException.#ctor(System.Int32)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="errorCode">error code associated with exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.BucketTransferredException.#ctor(System.Int32,System.String)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="errorCode">error code associated with exception</param>
            <param name="reason">reason for exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.BucketTransferredException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="errorCode">error code associated with exception</param>
            <param name="reason">reason for exception</param>
            <param name="inner">nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.BucketTransferredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            overloaded constructor, manual serialization. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.BucketTransferredException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            manual serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.ClusterMembershipChangingException">
            <summary>
            Thrown whenever an operation is performed on Cache and state transfer is in progress
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.ConfigurationException">
            <summary>
            Thrown when an exception occurs during configuration. Likely, causes are badly specified
            configuration strings.
            </summary>
            <example>The following example demonstrates how to use this exception in your code.
            <code>
            
            try
            {
                ...
            }
            catch(ConfigurationException ex)
            {
                ...
            }
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ConfigurationException.#ctor">
            <summary> 
            Default constructor. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ConfigurationException.#ctor(System.String)">
            <summary> 
            Overloaded constructor, takes the reason as parameter. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Overloaded constructor. 
            </summary>
            <param name="reason">Reason for exception</param>
            <param name="inner">Nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ConfigurationException.#ctor(System.Int32)">
            <summary>
            overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ConfigurationException.#ctor(System.Int32,System.String)">
            <summary>
            overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ConfigurationException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
            <param name="stackTrace">stacktrace</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ConfigurationException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            overloaded cnstructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
            <param name="inner">nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            overloaded constructor, manual serialization. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ConfigurationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            manual serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.ConnectionException">
            <summary>
            This exception is thrown whenever the connection with the cache server is lost while performing an operation on an outproc cache.
            </summary>
            <example>The following example demonstrates how to use this exception in your code.
            <code>
            
            try
            {
                Cache cache = NCache.InitializeCache("sampleCache");
                cache.Add("TestKey","sampleData");
            }
            catch(ConnectionException ex)
            {
                
            }
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ConnectionException.#ctor">
            <summary> 
            Default constructor. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ConnectionException.#ctor(System.String)">
            <summary> 
            Overloaded constructor, takes the reason as parameter. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ConnectionException.#ctor(System.String,System.Net.IPAddress,System.Int32)">
            <summary> 
            Overloaded constructor, takes the reason, ipAddress and port as parameter. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ConnectionException.#ctor(System.Net.IPAddress,System.Int32)">
            <summary> 
            Overloaded constructor, takes the  ipAddress and port as parameter. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ConnectionException.#ctor(System.Int32)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ConnectionException.#ctor(System.Int32,System.String)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ConnectionException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
            <param name="stackTrace">stacktrace</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ConnectionException.#ctor(System.Int32,System.String,System.Net.IPAddress,System.Int32)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
            <param name="ipAddress"></param>
            <param name="port"></param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ConnectionException.#ctor(System.Int32,System.Net.IPAddress,System.Int32)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="ipAddress"></param>
            <param name="port"></param>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Exceptions.ConnectionException.IPAddress">
            <summary>
            IPAddress of broken connection
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Exceptions.ConnectionException.Port">
            <summary>
            Port of broken connection
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Overloaded constructor, manual serialization. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ConnectionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Manual serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.CacheException">
            <summary>
            It is the base class for all the exceptions that are thrown from NCache. 
            So you can catch this exception for all the exceptions thrown from within the cache.
            </summary>
            <example>The following example demonstrates how to use this exception in your code.
            <code>
            
            try
            {
                ...
            }
            catch(CacheException ex)
            {
                ...
            }
            
            </code>
            </example>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Exceptions.CacheException.ErrorCode">
            <summary>
            Property for setting ErrorCode 
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Exceptions.CacheException.StackTrace">
            <summary>
            Property for setting stack trace
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.CacheException.#ctor">
            <summary> 
            Default constructor. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.CacheException.#ctor(System.String)">
            <summary> 
            Overloaded constructor, takes the reason as parameter. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.CacheException.#ctor(System.String,System.Exception)">
            <summary>
            Overloaded constructor. 
            </summary>
            <param name="reason">Reason for exception</param>
            <param name="inner">Nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.CacheException.#ctor(System.Int32)">
            <summary>
            overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.CacheException.#ctor(System.Int32,System.Exception)">
            <summary>
            overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="exception">nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.CacheException.#ctor(System.Int32,System.String)">
            <summary>
            Overloaded Constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">reason for exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.CacheException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            overloaded exception
            </summary>
            <param name="errorCode">asigned errorcode</param>
            <param name="reason">exception message</param>
            <param name="stackTrace">stacktrace</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.CacheException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
            <param name="inner">nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.CacheException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Overloaded constructor, manual serialization. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.CacheException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Manual serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.CacheException.ToString">
            <summary>
            Represents the exception in string form with type and stack trace
            </summary>
            <returns></returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.GeneralFailureException">
            <summary>
            Thrown when an exception occurs during a clustered operation.
            </summary>
            <example>The following example demonstrates how to use this exception in your code.
            <code>
            
            try
            {
                ...
            }
            catch(GeneralFailureException ex)
            {
                ...
            }
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.GeneralFailureException.#ctor">
            <summary> 
            Default constructor. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.GeneralFailureException.#ctor(System.String)">
            <summary> 
            Overloaded constructor, takes the reason as parameter. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.GeneralFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Overloaded constructor. 
            </summary>
            <param name="reason">Reason for exception</param>
            <param name="inner">Nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.GeneralFailureException.#ctor(System.Int32)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.GeneralFailureException.#ctor(System.Int32,System.String)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.GeneralFailureException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
            <param name="stackTrace">stacktrace</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.GeneralFailureException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
            <param name="inner">nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.GeneralFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            overloaded constructor, manual serialization. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.GeneralFailureException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            manual serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.InternalCommandException">
            <summary>
            Thrown when an exception occurs like ActivityBlockedException or ConnectionException.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.InternalCommandException.#ctor">
            <summary>
            Default Constructor for InternalCommandException 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.InternalCommandException.#ctor(System.String)">
            <summary>
            Overloaded constructor that takes message as an argument 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.InternalCommandException.#ctor(System.String,System.Exception)">
            <summary>
            Overloaded Constructor that takes two arguments message as a string and innerException
            </summary>
            <param name="message">message is a string message of Exception</param>
            <param name="inner">inner is an inner Exception for this Exception</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.InvalidReaderException">
            <summary>
            This exception is thrown whenever one of the data partition goes down.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.InvalidReaderException.#ctor">
            <summary> 
            The default constructor of class InvalidReaderException. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.InvalidReaderException.#ctor(System.String)">
            <summary> 
            An overloaded constructor that takes the reason as parameter. 
            </summary>
            <param name="reason">Reason of exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.InvalidReaderException.#ctor(System.String,System.Exception)">
            <summary>
            An overloaded constructor that takes reason of exception and nested exception as parameters. 
            </summary>
            <param name="reason">Reason of exception.</param>
            <param name="inner">Nested exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.InvalidReaderException.#ctor(System.Int32)">
            <summary>
            An overloaded constructor that takes assigned errorcode as parameter.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.InvalidReaderException.#ctor(System.Int32,System.String)">
            <summary>
            An overloaded constructor that takes errorcode and exception message as parameters.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Exception message.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.InvalidReaderException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            An overloaded constructor that takes errorcode, nested exception and exception message as parameters.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Exception message.</param>
            <param name="inner">Nested exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.InvalidReaderException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            An overloaded constructor that takes errorcode, nested exception and exception message as parameters.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Exception message.</param>
            <param name="stackTrace">A string representation of the immediate frames on the call stack.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.InvalidReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the System.Exception class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.InvalidReaderException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            An overloaded constructor that takes serialization info and streaming context as parameters.
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.InvalidTaskEnumeratorException">
            <summary>
            InvalidTaskEnumeratorException is thrown when the MapReduce Task Enumerator is invalid.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.InvalidTaskEnumeratorException.#ctor">
            <summary>
            The default constructor of class InvalidTaskEnumeratorException
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.InvalidTaskEnumeratorException.#ctor(System.String)">
            <summary>
            An overloaded constructor that takes reason as a parameter.
            </summary>
            <param name="reason">Reason of the exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.InvalidTaskEnumeratorException.#ctor(System.String,System.Exception)">
            <summary>
             An overloaded constructor that takes reason and nested exception as parameters.
            </summary>
            <param name="reason">reason of the exception</param>
            <param name="inner">inner exception because of which this exception occurs</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.InvalidTaskEnumeratorException.#ctor(System.Int32)">
             <summary>
            An overloaded constructor that takes errorcode as a parameter.
             </summary>
             <param name="errorcode">Assigned errorcode.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.InvalidTaskEnumeratorException.#ctor(System.Int32,System.String)">
            <summary>
            An overloaded constructor that takes errorcode and exception message as parameters.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Exception message.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.InvalidTaskEnumeratorException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            An overloaded constructor that takes errorcode, stacktrace and exception message as parameters.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Exception message.</param>
            <param name="stackTrace">A string representation of the immediate frames on the call stack.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.InvalidTaskEnumeratorException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
             An overloaded constructor that takes errorcode, nested exception and exception message as parameters.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Exception message.</param>
            <param name="inner">Nested exception.</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.LicensingException">
            <summary>
            LicensingException is thrown when either license has expired or some
            error occurred during the validation of license.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.LicensingException.#ctor">
            <summary> 
            The default constructor of class LiceningException.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.LicensingException.#ctor(System.String)">
            <summary> 
            An overloaded constructor that takes the reason as parameter. 
            </summary>
            <param name="reason">Reason of the exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.LicensingException.#ctor(System.String,System.Exception)">
            <summary>
            An overloaded constructor that takes reason and nested exception as parameters. 
            </summary>
            <param name="reason">Reason of exception.</param>
            <param name="inner">Nested exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.LicensingException.#ctor(System.Int32)">
            <summary>
            An overloaded constructor that takes errorcode as parameter.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.LicensingException.#ctor(System.Int32,System.String)">
            <summary> 
            An overloaded constructor that takes reason and errorcode as parameters. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.LicensingException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            An overloaded constructor that takes errorcode, message and stacktrace as parameters.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Exception message.</param>
            <param name="stackTrace">A string representation of the immediate frames on the call stack.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.LicensingException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            An overloaded constructor that takes reason, nested exception and errorcode as parameters.
            </summary>
            <param name="reason">Reason of exception.</param>
            <param name="inner">Nested exception.</param>
            <param name="errorCode">Assigned errorCode.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.LicensingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            An overloaded constructor that takes serialization info and streaming context as parameters.
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.LicensingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the SerializationInfo class with the data needed to serialize the target object.
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.LockingException">
            <summary>
            LockingException is thrown on Insert/Remove operation if the item is locked and incorrect Lockid 
            is specified.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.LockingException.#ctor">
            <summary> 
            The default constructor of class LockingException. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.LockingException.#ctor(System.String)">
            <summary> 
            An overloaded constructor that takes the reason as parameter. 
            </summary>
            <param name="reason">Reason of exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.LockingException.#ctor(System.String,System.Exception)">
            <summary>
            An overloaded constructor that takes the reason and nested exception as parameters. 
            </summary>
            <param name="reason">Reason of exception.</param>
            <param name="inner">Nested exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.LockingException.#ctor(System.Int32)">
            <summary>
            An overloaded constructor that takes the errorcode as parameter. 
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.LockingException.#ctor(System.Int32,System.String)">
            <summary>
            An overloaded constructor that takes the errorcode and exception message as parameters.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Exception message.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.LockingException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            An overloaded constructor that takes the errorcode, stacktrace and exception message as parameters.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Exception message.</param>
            <param name="stackTrace">A string representation of the immediate frames on the call stack.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.LockingException.#ctor(System.Int32,System.String,System.Exception)">
             <summary>
            An overloaded constructor that takes the errorcode, nested exception and exception message as parameters.
             </summary>
             <param name="errorCode">Assigned errorcode.</param>
             <param name="reason">Exception message.</param>
             <param name="inner">Nested exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.LockingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            An overloaded constructor that takes serialization info and streaming context as parameters.
            </summary>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.LockingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Populates the SerializationInfo class with the data needed to serialize the target object.
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.MaintenanceException">
            <summary>
            This exception is thrown when the cluster is under maintenance.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.MaintenanceException.#ctor">
            <summary> 
            The default constructor of the class MaintenanceException.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.MaintenanceException.#ctor(System.String)">
            <summary> 
            An overloaded constructor that takes the reason as parameter. 
            </summary>
            <param name="reason">Reason of exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.MaintenanceException.#ctor(System.String,System.Exception)">
            <summary>
            An overloaded constructor that takes the reason as parameter. 
            </summary>
            <param name="reason">Reason of exception.</param>
            <param name="inner">Nested exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.MaintenanceException.#ctor(System.Int32)">
            <summary>
            An overloaded constructor that takes the errorcode as parameter. 
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.MaintenanceException.#ctor(System.Int32,System.String)">
            <summary>
            An overloaded constructor that takes the errorcode and exception message as parameters. 
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Excption message.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.MaintenanceException.#ctor(System.Int32,System.String,System.String)">
             <summary>
            An overloaded constructor that takes the errorcode, stacktrace and exception message as parameters. 
             </summary>
             <param name="errorCode">Assigned errorcode.</param>
             <param name="reason">Exception message</param>
             <param name="stackTrace">A string representation of the immediate frames on the call stack.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.MaintenanceException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            An overloaded constructor that takes the errorcode, nested exception and exception message as parameters. 
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Exception message.</param>
            <param name="inner">Nested exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.MaintenanceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            An overloaded constructor that takes serialization info and streaming context as parameters. 
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.MaintenanceException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the SerializationInfo class with the data needed to serialize the target object.
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.ManagementException">
            <summary>
            This exception is thrown when the system is unable to find the installation folder or the 
            cache configuration file and requests for the cache initialization.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ManagementException.#ctor">
            <summary> 
            The default constructor of class ManagementException. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ManagementException.#ctor(System.String)">
            <summary> 
            An overloaded constructor that takes the reason as parameter. 
            </summary>
            <param name="reason">Reason of exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ManagementException.#ctor(System.String,System.Exception)">
            <summary>
            An overloaded constructor that takes reason and nested exception as parameters. 
            </summary>
            <param name="reason">Reason of  exception.</param>
            <param name="inner">Nested exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ManagementException.#ctor(System.Int32)">
            <summary>
            An overloaded constructor that takes errorcode as parameter.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ManagementException.#ctor(System.Int32,System.String)">
            <summary>
            An overloaded constructor that takes errorcode and exception message as parameters.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Exception message.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ManagementException.#ctor(System.Int32,System.String,System.String)">
             <summary>
            An overloaded constructor that takes errorcode, message and stacktrace as parameters.
             </summary>
             <param name="errorCode">Assigned errorCode.</param>
             <param name="reason">Exception message.</param>
             <param name="stackTrace">A string representation of the immediate frames on the call stack.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ManagementException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            An overloaded constructor that takes errorcode,message and nested exception as parameters.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Exception message.</param>
            <param name="inner">Nested exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ManagementException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            An overloaded constructor that takes serialization info and streaming context as parameters.
            </summary>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ManagementException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the SerializationInfo class with the data needed to serialize the target object.
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.MaxClientReachedException">
            <summary>
            This exception is thrown whenever an error occurs on the remote node.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.MaxClientReachedException.#ctor(System.String)">
            <summary> 
            The default constructor of class MaxClientReachedException. 
            </summary>
            <param name="reason">Reason of exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.MaxClientReachedException.#ctor(System.Int32,System.String)">
            <summary>
            An overloaded constructor that takes errorcode and reason as parameters.
            </summary>
            <param name="errorCode">Errorcode for the exception.</param>
            <param name="reason">Reason of exception.</param>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Exceptions.MaxClientReachedException.StackTrace">
            <summary>
            Gets the stack trace of the exception.
            </summary>
            <returns>Stacktrace of the exception.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Exceptions.MaxClientReachedException.Message">
            <summary>
            Gets the message that describes the current exception.
            </summary>
            <returns>The message that describes the current exception.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.MaxClientReachedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Overloaded constructor that takes serialization info and streaming context as parameters.
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.MaxClientReachedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the SerializationInfo class with the data needed to serialize the target object.
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.OperationFailedException">
            <summary>
            This exception is thrown whenever an API fails, in case of bulk operation, the exception also provides information about existing keys.
            </summary>
            <example>The following example demonstrates how to use this exception in your code.
            <code>
            
            try
            {
                ...
            }
            catch(OperationFailedException ex)
            {
                ...
            }
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.OperationFailedException.#ctor">
            <summary> 
            The default constructor of class OperationFailedException. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.OperationFailedException.#ctor(System.String)">
            <summary> 
            An overloaded constructor that takes the reason as parameter. 
            </summary>
            <param name="reason">Reason of exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.OperationFailedException.#ctor(System.String,System.Boolean)">
            <summary> 
            An overloaded constructor that takes the reason and a boolean value as parameters. 
            </summary>
            <param name="isTracable">Boolean value true or false.</param>
            <param name="reason">Reason of exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.OperationFailedException.#ctor(System.String,System.Exception)">
            <summary>
            An overloaded constructor that takes the reason and nested exception as parameters.
            </summary>
            <param name="reason">Reason of exception.</param>
            <param name="inner">Nested exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.OperationFailedException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
            An overloaded constructor that takes the reason, nested exception and a boolean value as parameters.
            </summary>
            <param name="reason">Reason of exception.</param>
            <param name="inner">Nested exception.</param>
            <param name="isTracable">Bollean value true or false.</param>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Exceptions.OperationFailedException.IsTracable">
            <summary>
            Specifies whether the exception is to be logged or not.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.OperationFailedException.#ctor(System.Int32)">
            <summary>
            An overloaded constructor that takes the errorcode as parameter.
            </summary>
            <param name="errorCode">Assigned ErrorCode.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.OperationFailedException.#ctor(System.Int32,System.String)">
            <summary>
            An overloaded constructor that takes the errorcode and exception message as parameters.
            </summary>
            <param name="errorCode">Assigned ErrorCode.</param>
            <param name="reason">Exception message.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.OperationFailedException.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
            An overloaded constructor that takes the errorcode, exception message and a boolean value as parameters.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Exception message.</param>
            <param name="isTracable">Boolean value true or false.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.OperationFailedException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
             An overloaded constructor that takes the errorcode, exception message and nested exception as parameters.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Exception message.</param>
            <param name="inner">Nested Exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.OperationFailedException.#ctor(System.Int32,System.String,System.Exception,System.Boolean)">
            <summary>
             An overloaded constructor that takes the errorcode, exception message,nested exception and a boolean value as parameters.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Exception message.</param>
            <param name="inner">Nested exception.</param>
            <param name="isTracable">Boolean value true or false.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.OperationFailedException.#ctor(System.Int32,System.String,System.String)">
            <summary>
             An overloaded constructor that takes the errorcode, exception message and stacktrace as parameters.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Exception message.</param>
            <param name="stackTrace">A string representation of the immediate frames on the call stack.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.OperationFailedException.#ctor(System.Int32,System.String,System.Boolean,System.String)">
            <summary>
            An overloaded constructor that takes the errorcode, exception message, stacktrace and a boolean value as parameters.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Exception message.</param>
            <param name="isTracable">Boolean value true or false.</param>
            <param name="stackTrace">A string representation of the immediate frames on the call stack.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.OperationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            An overloaded constructor that takes the serialization info and streaming context as parameters.
            </summary>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.OperationFailedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the SerializationInfo class with the data needed to serialize the target object.
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.OperationNotSupportedException">
            <summary>
            This is a data class used to inform the user that the requested operation is not supported in the current edition of NCache.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.OperationNotSupportedException.#ctor">
            <summary> 
            The default constructor of class OperationNtSupportedException. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.OperationNotSupportedException.#ctor(System.String)">
            <summary> 
            Overloaded constructor that takes the reason as parameter. 
            </summary>
            <param name="reason">Reason of exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.OperationNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            An overloaded constructor that takes reason of exception and nested exception as parameters. 
            </summary>
            <param name="reason">Reason of exception.</param>
            <param name="inner">Nested exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.OperationNotSupportedException.#ctor(System.Int32,System.String)">
            <summary> 
            An overloaded constructor that takes reason of exception and errorcode as parameters. 
            </summary>
            <param name="reason">Reason of exception.</param>
            <param name="errorCode">Assigned errorcode.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.OperationNotSupportedException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            An overloaded constructor that takes reason of exception, errorcode and stacktrace as parameters.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Exception message.</param>
            <param name="stackTrace">A string representation of the immediate frames on the call stack.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.OperationNotSupportedException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            An overloaded constructor that takes reason of exception and nested exception as parameters.
            </summary>
            <param name="reason">Reason of exception.</param>
            <param name="inner">Nested exception.</param>
            <param name="errorCode">Assigned errorcode.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.OperationNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            An overloaded constructor that takes serialization info and streaming context as parameters. 
            </summary>
            <param name="context">Describes the source and destination of a given serialized stream, and provides  an additional caller-defined context.</param>    
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.OperationNotSupportedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Manual serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.ParserException">
            <summary>
            This exception is thrown whenever a query fails to parse and have any issue in parsing.
            </summary>
            <example>The following example demonstrates how to use this exception in your code.
            <code>
            
            try
            {
                ...
            }
            catch(ConfigurationException ex)
            {
                ...
            }
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ParserException.#ctor">
            <summary> 
            The default constructor of class ParseException. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ParserException.#ctor(System.String)">
            <summary> 
            An overloaded constructor that takes the reason of exception as parameter. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ParserException.#ctor(System.String,System.Exception)">
            <summary>
            An overloaded constructor that takes reason for exception and nested exception as parameters. 
            </summary>
            <param name="reason">Reason for exception.</param>
            <param name="inner">Nested exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ParserException.#ctor(System.Int32)">
            <summary>
            An overloaded constructor that takes errorcode as parameter.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ParserException.#ctor(System.Int32,System.String)">
            <summary>
            An overloaded constructor that takes errorcode and exception message as parameters.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Exception message.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ParserException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            An overloaded constructor that takeserrorcode, exception message and stacktrace as parameters.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Exception message.</param>
            <param name="stackTrace">A string representation of the immediate frames on the call stack.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ParserException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            An overloaded constructor that takes errorcode, exception message and nested exception as parameters.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Exception message.</param>
            <param name="inner">Nested Exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ParserException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
             An overloaded constructor that takes serialization info and streaming context as parameters. 
            </summary>
            <param name="info"> Stores all the data needed to serialize or deserialize an object.</param>
            <param name="context"> Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>  
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.ParserException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            manual serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.RemoteException">
            <summary>
            This exception is thrown whenever an error occurs on remote node.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.RemoteException.#ctor(System.Exception)">
            <summary> 
            Default constructor. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.RemoteException.#ctor(System.Int32,System.Exception)">
            <summary>
            Overloaded Constructor
            </summary>
            <param name="errorCode">errorcode assigned to the exception</param>
            <param name="e">Exception that was thrown</param>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Exceptions.RemoteException.StackTrace">
            <summary>
            Gets the stack trace of the exception
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Exceptions.RemoteException.Message">
            <summary>
            Gets the message that describes the current exception.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.RemoteException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Overloaded constructor, manual serialization. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.RemoteException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Manual serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.SecurityException">
            <summary>
            This exception is thrown when the authorized user cannot access the secure cache.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.SecurityException.#ctor">
            <summary> 
            The default constructor of class SecurityException. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.SecurityException.#ctor(System.String)">
            <summary> 
            An overloaded constructor, takes the reason as parameter. 
            </summary>
            <returns>Reason of the exception.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.SecurityException.#ctor(System.String,System.Exception)">
            <summary>
            An overloaded constructor takes reason for exception and nested exception as parameters. 
            </summary>
            <param name="reason">Reason for exception.</param>
            <param name="inner">Nested exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.SecurityException.#ctor(System.Int32)">
            <summary>
            An overloaded constructor that takes errporcode as a parameter. 
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.SecurityException.#ctor(System.Int32,System.String)">
            <summary>
            An overloaded constructor that takes errorcode and exception message as parameters.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">exception message.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.SecurityException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            An overloaded constructor that takes assigned errorcode, exception message and stacktrace as parameters.
            </summary>
            <param name="errorCode">Assigned errorcode.</param>
            <param name="reason">Exception message.</param>
            <param name="stackTrace">A string representation of the immediate frames on the call stack.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.SecurityException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            An overloaded constructor that takes errorcode, exception message and nested exception as parameters.
            </summary>
            <param name="errorCode">Assigned ErrorCode.</param>
            <param name="reason">Exception message.</param>
            <param name="inner">Nested exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.SecurityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Overloaded constructor that takes serialization info and streaming context as parameters. 
            </summary>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.SecurityException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Manual serialization.
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.StateTransferInProgressException">
            <summary>
            Thrown whenever an operation is performed on the cache and the state transfer is in progress.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StateTransferInProgressException.#ctor(System.String)">
            <summary>
            Overloaded constructor that takes error as an argument
            </summary>
            <param name="error">error message of the Exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StateTransferInProgressException.#ctor(System.String,System.Exception)">
            <summary>
            Overloaded constructor that takes error message and exception as an arguments
            </summary>
            <param name="error">error message for the exception</param>
            <param name="exception">inner exception object</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StateTransferInProgressException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            overloaded constructor that takes info and context as an arguments
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">context</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.StreamAlreadyLockedException">
             <summary>
             StreamAlreadyLockedException is thrown if a stream is already locked.
             </summary>
             <remarks>CacheStream opened for reading or writing mode acquires read or writer lock.
            If stream is already opened with reader/writer lock then this exception is thrown.
             </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StreamAlreadyLockedException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StreamAlreadyLockedException.#ctor(System.Int32)">
            <summary>
            Default constructor with errorCode
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StreamAlreadyLockedException.#ctor(System.Int32,System.String)">
            <summary>
            Default constructor with error code and message
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StreamAlreadyLockedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Overloaded constructor, manual serialization. 
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.StreamCloseException">
            <summary>
            StreamCloseException is thrown if a write operation is performed on closed
            CacheStream.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StreamCloseException.#ctor">
            <summary>
            Default constructor. Initializes the instance of StreamCloseException.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StreamCloseException.#ctor(System.Int32)">
            <summary>
            Overloaded exception.
            </summary>
            <param name="errorCode">error code for the exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StreamCloseException.#ctor(System.Int32,System.String)">
            <summary>
            OverLoaded exception
            </summary>
            <param name="errorCode">error code for the exception</param>
            <param name="reason">reason for exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StreamCloseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Overloaded constructor, manual serialization. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StreamCloseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Manual Deserialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.StreamException">
            <summary>
            StreamException is thrown if any error occurs during operation on the CacheStream.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StreamException.#ctor">
            <summary>
            Default constructor. Initializes the instance of StreamException.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StreamException.#ctor(System.String)">
            <summary>
            Initializes the instance of StreamException with give message.
            </summary>
            <param name="message">Message of the exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StreamException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes the instance of StreamException with give message.
            </summary>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StreamException.#ctor(System.Int32)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="errorCode">Assigned errorcode</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StreamException.#ctor(System.Int32,System.String)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="message">exception message</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StreamException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="errorCode">Assigned errorcode</param>
            <param name="message">exception message</param>
            <param name="stackTrace">Exception stacktrace</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StreamException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="errorCode">Assigned errorCode</param>
            <param name="message">Exception message</param>
            <param name="innerException">nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StreamException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            overloaded constructor, manual serialization. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StreamException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            manual deserialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.StreamInvalidLockException">
            <summary>
            StreamInvalidLockException is thrown if the current lock handle becomes invalid.
            </summary>
            <remarks>CacheStream opened for reading or writing mode acquires read or writer lock.
            Suppose there are two cache clients. First opens stream for either reading/writing.
            Before first client closes the stream, it is removed from the cache due to expiration
            or eviction. Now at this moment second client opens a fresh stream. If first client
            performs any operation on the stream, his lock handle becomes invalid and StreamInvalidLockException
            is thrown.
            </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StreamInvalidLockException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StreamInvalidLockException.#ctor(System.Int32)">
            <summary>
            Overloaded Constructor
            </summary>
            <param name="errorCode">Assigned ErrorCode</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StreamInvalidLockException.#ctor(System.Int32,System.String)">
            <summary>
            Overloaded Constructor
            </summary>
            <param name="errorCode">assigned errorCode</param>
            <param name="reason">exception message</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StreamInvalidLockException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Overloaded constructor, manual serialization. 
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.StreamNotFoundException">
            <summary>
            StreamNotFoundException is thrown if a CacheStream is not found in the cache.
            </summary>
            <remarks>Possible reasoning for this exception can either be that the stream was not
            created or that it was removed from the cache.</remarks>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StreamNotFoundException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StreamNotFoundException.#ctor(System.Int32)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StreamNotFoundException.#ctor(System.Int32,System.String)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.StreamNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Overloaded constructor, manual serialization. 
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.SuspectedException">
            <summary>
            This exception is thrown whenever an API fails.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.SuspectedException.#ctor">
            <summary> 
            Default constructor for this class. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.SuspectedException.#ctor(System.String)">
            <summary> 
            Overloaded constructor, takes the reason as parameter. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.SuspectedException.#ctor(System.String,System.Exception)">
            <summary>
            Overloaded constructor. 
            </summary>
            <param name="reason">Reason for exception</param>
            <param name="inner">Nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.SuspectedException.#ctor(System.Int32)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="errorCode">Assigned errorcode</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.SuspectedException.#ctor(System.Int32,System.String)">
            <summary> 
            Overloaded constructor, takes the reason as parameter. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.SuspectedException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
            <param name="stackTrace">stacktrace</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.SuspectedException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Overloaded constructor. 
            </summary>
            <param name="reason">Reason for exception</param>
            <param name="inner">Nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.SuspectedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Overloaded constructor, manual serialization. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.SuspectedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Manual serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.TimeoutException">
            <summary>
            This exception is thrown whenever the response time for an operation exceeds 90 seconds.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.TimeoutException.#ctor">
            <summary> 
            Default constructor for this class. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.TimeoutException.#ctor(System.String)">
            <summary> 
            Overloaded constructor, takes the reason as parameter. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.TimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Overloaded constructor. 
            </summary>
            <param name="reason">Reason for exception</param>
            <param name="inner">Nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.TimeoutException.#ctor(System.Int32)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.TimeoutException.#ctor(System.Int32,System.String)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="errorCode">Assigned ErrorCode</param>
            <param name="reason">Exception Message</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.TimeoutException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="errorCode">Assigned ErrorCode</param>
            <param name="reason">Exception message</param>
            <param name="stackTrace">Stacktrace</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.TimeoutException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="errorCode">Assigned errorcode</param>
            <param name="reason">Exception message</param>
            <param name="inner">nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.TimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Overloaded constructor, manual serialization. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.TimeoutException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Manual serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Exceptions.TypeIndexNotDefined">
            <summary>
            This exception is thrown whenever a Type Index is not found in case of NamedTags.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.TypeIndexNotDefined.#ctor(System.String)">
            <summary>
            Overloaded constructor that takes error message as an argument.
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.TypeIndexNotDefined.#ctor(System.String,System.Exception)">
            <summary>
            Overloaded constructor that take error message and exception as arguments.
            </summary>
            <param name="error"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Exceptions.TypeIndexNotDefined.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Overloaded constructor that take info and context as arguments.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.DatasourceProviders.DatastructureOperationType">
            <summary>
            Enumeration that defines the operation on the data type.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.DatasourceProviders.DatastructureOperationType.CreateDataType">
            <summary>
            Creates data type.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.DatasourceProviders.DatastructureOperationType.DeleteDataType">
            <summary>
            Deletes data type.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.DatasourceProviders.DatastructureOperationType.AddToDataType">
            <summary>
            Adding element to the data type.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.DatasourceProviders.DatastructureOperationType.UpdateDataType">
            <summary>
            Updating element in the data type.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.DatasourceProviders.DatastructureOperationType.DeleteFromDataType">
            <summary>
            Deleting element from the data type.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.DatasourceProviders.DataTypeWriteOperation">
            <summary>
            This class contains operations to be performed on the created collection.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DatasourceProviders.DataTypeWriteOperation.#ctor">
            <summary>
            Default constructor of the class DataTypeWriteOperation to initialize its object. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DatasourceProviders.DataTypeWriteOperation.#ctor(System.String,Alachisoft.NCache.Runtime.DatasourceProviders.DatastructureOperationType,System.Int32,Alachisoft.NCache.Runtime.Caching.DistributedDataType,System.String)">
            <summary>
            DataTypeWriteOperation constructor which takes key, WriteOperationType and retries count.
            </summary>
            <param name="key">key of an item on which operation has to be performed</param>
            <param name="opType">WriteOperationType that contains the type of the Operation that is need to be performed</param>
            <param name="retryCount">RetryCount is a count for how many times the retries are need to be performed for the FailureRetry items</param>
            <param name="dataType"><see cref="T:Alachisoft.NCache.Runtime.Caching.DistributedDataType"/> specifying data type.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DatasourceProviders.DataTypeWriteOperation.#ctor(System.String,Alachisoft.NCache.Runtime.Caching.ProviderDataTypeItem{System.Object},Alachisoft.NCache.Runtime.DatasourceProviders.DatastructureOperationType,System.Int32,System.String)">
            <summary>
            DataTypeWriteOperation constructor which takes key, ProviderDataTypeItem, WriteOperationType and retries count.
            </summary>
            <param name="key">key of an item on which operation has to be performed</param>
            <param name="cacheItem">is a ProviderCollectionItem that contains the object on which operation is need to be performed</param>
            <param name="opType">WriteOperationType that contains the type of the Operation that is need to be performed</param>
            <param name="retryCount">RetryCount is a count for how many times the retries are need to be performed for the FailureRetry items</param>      
        </member>
        <member name="P:Alachisoft.NCache.Runtime.DatasourceProviders.DataTypeWriteOperation.OperationType">
            <summary>
            Gets the type of the write operation.
            </summary>
            <returns> Defines the operation on the data type.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.DatasourceProviders.DataTypeWriteOperation.ProviderItem">
            <summary>
            Gets/Sets the cache item.
            </summary>
            <returns>DataTypeItem is just like CacheItem with some limited fields.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.DatasourceProviders.DataTypeWriteOperation.DataType">
            <summary>
            Type of collection.
            </summary>
            <returns>Enumeration that defines the data type.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.DatasourceProviders.IWriteThruProvider">
            <summary>
            Contains methods used to save/update an object to the master data source. Must be 
            implemented by write-through components.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DatasourceProviders.IWriteThruProvider.Init(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Perform tasks like allocating resources or acquiring connections, etc.
            </summary>
            <param name="parameters">Startup parameters defined in the configuration.</param>
            <param name="cacheId">Id of the cache.</param>
            <example>
            The following example connects to the data source.
            <code>
            public void Init(IDictionary parameters, string cacheId)
            {
                object connString = parameters["connstring"];
                _source.Connect(connString == null ? "" : connString.ToString());
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DatasourceProviders.IWriteThruProvider.WriteToDataSource(Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperation)">
            <summary>
            Responsible for atomic write operations on the data source.
            </summary>
            <param name="operation">Write operation applied on the data source.</param>
            <returns>Failed operations, null otherwise.</returns>
            <example>
            The following example performs a single operation on data source.
            <code>
            public OperationResult WriteToDataSource(WriteOperation operation)
            {
                bool result = false;
            	OperationResult operationResult = new OperationResult(operation, OperationResult.Status.Failure);
            	object value = operation.ProviderItem.GetValue&lt;object>();
            
            	if (value.GetType().Equals(typeof(Customer)))
            	{
            		result = _source.SaveCustomer((Customer)value);
            	}
            	if (result) operationResult.OperationStatus = OperationResult.Status.Success;
            	return operationResult;
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DatasourceProviders.IWriteThruProvider.WriteToDataSource(System.Collections.Generic.ICollection{Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperation})">
            <summary>
            Responsible for bulk write operations on the data source.
            </summary>
            <param name="operations">Array of write operations applied on the data source.</param>
            <returns>Array of failed operations.</returns>
            <example>
            The following example performs multiple operations on the data source.
            <code>
            public ICollection&lt;OperationResult> WriteToDataSource(ICollection&lt;WriteOperation> operations)
            {
            	ICollection&lt;OperationResult> operationResults = new OperationResult[operations.Count];
            
            	foreach(WriteOperation operation in operations)
            	{
            		operationResults.Add(WriteToDataSource(operation));
            	}
            
            	return operationResults;
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DatasourceProviders.IWriteThruProvider.WriteToDataSource(System.Collections.Generic.ICollection{Alachisoft.NCache.Runtime.DatasourceProviders.DataTypeWriteOperation})">
            <summary>
            When datatype is created or removed as bulk, data source will be notified with this method.
            </summary>
            <param name="dataTypeWriteOperations">Operation containing properties.</param>
            <returns>OperationResult.</returns>
            <example>
            <code>
            public ICollection&lt;OperationResult> WriteToDataSource(ICollection&lt;DataTypeWriteOperation> operations)
            {
            	List&lt;OperationResult> operationResult = new List&lt;OperationResult>();
            
            	foreach (DataTypeWriteOperation operation in operations)
            	{
            		var list = new List&lt;Product>();
            		ProviderDataTypeItem&lt;object> cacheItem = operation.ProviderItem;
            		Product product = (Product)cacheItem.Data;
            
            		switch (operation.OperationType)
            		{
            			case DatastructureOperationType.CreateDataType:
            				// Insert logic for creating a new List
            				IList myList = new List&lt;Product>();
            				myList.Add(product.Id);
            				break;
            
            			case DatastructureOperationType.AddToDataType:
            				// Insert logic for any Add operation 
            				list.Add(product);
            				break;
            
            			case DatastructureOperationType.DeleteFromDataType:
            				// Insert logic for any Remove operation
            				list.Remove(product);
            				break;
            
            			case DatastructureOperationType.UpdateDataType:
            				// Insert logic for any Update operation 
            				list.Insert(0, product);
            				break;
            		}
            
            		// Write Thru operation status can be set according to the result. 
            		operationResult.Add(new OperationResult(operation, OperationResult.Status.Success));
            	}
            
            	return operationResult;
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DatasourceProviders.IWriteThruProvider.Dispose">
            <summary>
            Perform tasks associated with freeing, releasing, or resetting resources.
            </summary>
            <example>
            The following example disconnects from the data source when disposed.
            <code>
            public void Dispose()
            {
                _source.DisConnect();
            }
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult">
            <summary>
            OperationResult contains the result of the operation that is manipulated after the Read/WriteThru Provider.  
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.Status">
            <summary>
            Status contains the Operation Status flag that is either Success/Failure/FailureRetry/FailureDontRemove.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.Status.Success">
            <summary>
            Status is success, in case of successful operation.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.Status.Failure">
            <summary>
            Status is Failure, in case of unsuccessful operation.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.Status.FailureRetry">
            <summary>
            In case of Failure, this flag is used for the retry functionality.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.Status.FailureDontRemove">
            <summary>
            Status is FailureDontRemove, in case of unsuccessful operation and if the user doesn't want to remove that item from the cache.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.#ctor(Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperation,Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.Status)">
             <summary>
            OperationResult constructor that takes WriteOptions and OperationStatus as arguments. 
             </summary>
             <param name="writeOperation"><see cref="T:Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperation"/> is used with DSWriteOperation to get an operation to perform on the cache.</param>
             <param name="operationStatus"><see cref="T:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.Status"/> contains the Operation Status flag that is either Success/Failure/FailureRetry/FailureDontRemove.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.#ctor(Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperation,Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.Status,System.String)">
            <summary>
            OperationResult constructor that takes WriteOptions, OperationStatus and errorMessage as arguments.
            </summary>
            <param name="writeOperation"><see cref="T:Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperation"/> is used with DSWriteOperation to get an operation to perform on the cache.</param>
            <param name="operationStatus"><see cref="T:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.Status"/> contains the Operation Status flag that is either Success/Failure/FailureRetry/FailureDontRemove.</param>
            <param name="errorMessage">Error message about the failure of an operation.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.#ctor(Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperation,Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.Status,System.Exception)">
            <summary>
            OperationResult constructor that takes WriteOptions, OperationStatus and Exception as arguments.
            </summary>
            <param name="writeOperation"><see cref="T:Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperation"/> is used with DSWriteOperation to get an operation to perform on the cache.</param>
            <param name="operationStatus"><see cref="T:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.Status"/> contains the Operation Status flag that is either Success/Failure/FailureRetry/FailureDontRemove.</param>
            <param name="exception">Exception object about the failure of an operation.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.#ctor(Alachisoft.NCache.Runtime.DatasourceProviders.DataTypeWriteOperation,Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.Status)">
             <summary>
            OperationResult constructor that takes WriteOptions and OperationStatus. 
             </summary>
             <param name="writeDataTypeOperation"><see cref="T:Alachisoft.NCache.Runtime.DatasourceProviders.DataTypeWriteOperation"/> contains operations to be performed on collections.</param>
             <param name="operationStatus"><see cref="T:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.Status"/> contains the Operation Status flag that is either Success/Failure/FailureRetry/FailureDontRemove.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.#ctor(Alachisoft.NCache.Runtime.DatasourceProviders.DataTypeWriteOperation,Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.Status,System.String)">
            <summary>
            OperationResult constructor that takes WriteOptions, OperationStatus and errorMessage as arguments.
            </summary>
            <param name="writeDataTypeOperation"><see cref="T:Alachisoft.NCache.Runtime.DatasourceProviders.DataTypeWriteOperation"/> contains operations to be performed on collections.</param>
            <param name="operationStatus"><see cref="T:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.Status"/> contains the Operation Status flag that is either Success/Failure/FailureRetry/FailureDontRemove.</param>
            <param name="errorMessage">Error message about the failure of an operation.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.#ctor(Alachisoft.NCache.Runtime.DatasourceProviders.DataTypeWriteOperation,Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.Status,System.Exception)">
            <summary>
            OperationResult constructor that takes WriteOptions, OperationStatus and Exception as arguments.
            </summary>
            <param name="writeDataTypeOperation"><see cref="T:Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperation"/> is used with DSWriteOperation to get an operation to perform on the cache.</param>
            <param name="operationStatus"><see cref="T:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.Status"/> contains the Operation Status flag that is either Success/Failure/FailureRetry/FailureDontRemove.</param>
            <param name="exception">Exception object about the failure of an operation.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.#ctor(Alachisoft.NCache.Runtime.DatasourceProviders.QueryWriteOperation,Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.Status)">
             <summary>
            OperationResult Constructor that takes WriteOptions and OperationStatus 
             </summary>
             <param name="writeOperation"><see cref="T:Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperation"/></param>
             <param name="operationStatus"><see cref="T:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.Status"/></param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.#ctor(Alachisoft.NCache.Runtime.DatasourceProviders.QueryWriteOperation,Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.Status,System.String)">
            <summary>
            OperationResult Constructor that takes WriteOptions and OperationStatus and errorMessage as arguments
            </summary>
            <param name="writeOperation"><see cref="T:Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperation"/></param>
            <param name="operationStatus"><see cref="T:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.Status"/></param>
            <param name="errorMessage">Error message about the failure of an operation</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.#ctor(Alachisoft.NCache.Runtime.DatasourceProviders.QueryWriteOperation,Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.Status,System.Exception)">
            <summary>
            OperationResult Constructor that takes WriteOptions and OperationStatus and Exception as an arguments
            </summary>
            <param name="writeOperation"><see cref="T:Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperation"/></param>
            <param name="operationStatus"><see cref="T:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.Status"/></param>
            <param name="exception">Exception object about the failure of an Operation</param>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.UpdateInCache">
            <summary>
            Specify if item will be updated in cache store after write operation.
            </summary>
            <returns>Boolean value, true or false.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.OperationStatus">
            <summary>
            This property specifies the status of the write operation.
            </summary>
            <returns> OperationResult contains the result of the operation that is manipulated after the Read/WriteThru Provider.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.Operation">
            <summary>
            This property represents the write operation.
            </summary>
            <returns>Base class of the write operation.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.Exception">
            <summary>
            Exception associated with the write operation.
            </summary>
            <returns>Exception message.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.DatasourceProviders.OperationResult.Error">
            <summary>
            Error message associated with the write operation.
            </summary>
            <returns>Error message.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperation">
            <summary>
            WriteOperation is used with the DSWriteOperation to get an operation to perform on the cache.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperation.#ctor(System.String,Alachisoft.NCache.Runtime.Caching.ProviderCacheItem,Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperationType,System.Int32,System.String)">
            <summary>
            WriteOperation constructor which takes key, ProviderCache, WriteOperationType and retries count.
            </summary>
            <param name="key">key of an item on which operation has to be performed</param>
            <param name="cacheItem">is a ProviderCacheItem that contains the object on which operation is need to be performed</param>
            <param name="opType">WriteOperationType that contains the type of the Operation that is need to be performed</param>
            <param name="retryCount">RetryCount is a count for how many times the retries are need to be performed for the FailureRetry items</param>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperation.ProviderItem">
            <summary>
            Gets the <see cref="T:Alachisoft.NCache.Runtime.Caching.ProviderCacheItem"/>.
            </summary>
            <returns>A CacheItem class with limited fields.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperation.OperationType">
            <summary>
            Gets the type of the write operation.
            </summary>
            <returns>Logs the operations type in write-behind operation. </returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperationBase">
            <summary>
            Base class of the write operation.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperationBase._retryCount">
            <summary>
            Retries in case of data source operation failure.
            </summary>
            <returns>Number of retries.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperationBase.Key">
            <summary>
            Key on which the operation has been performed.
            </summary>
            <returns>Key on which the operation has been performed.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperationBase.RetryCount">
            <summary>
            Specifies number of retries in case of data source operation failure.
            </summary>
            <returns>Number of retries.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperationBase.MethodOverlaod">
            <summary>
            Which overload of the operation has been performed
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperationType">
            <summary>
            Used to log operation types in the write behind.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperationType.Add">
            <summary>
            To log the Add items operation in write-behind.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperationType.Update">
            <summary>
            To log the Update items operation in write-behind.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperationType.Delete">
            <summary>
            To log the Delete operation in write-behind.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.DatasourceProviders.IReadThruProvider">
            <summary>
            Contains methods used to read an object by its key from the master data source. 
            Must be implemented by read-through components.
            </summary>
            <remark>
            IReadThruProvider is an interface that is need to be implemented in order to allow cache to read data from your data source.
            </remark>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DatasourceProviders.IReadThruProvider.Init(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Perform tasks like allocating resources or acquiring connections, etc.
            </summary>
            <param name="parameters">Startup parameters defined in the configuration.</param>
            <param name="cacheId">Id of the cache.</param>
            <example>
            The following example connects to the data source.
            <code>
            public void Init(IDictionary parameters, string cacheId)
            {
               object connString = parameters["connstring"];
               _source.Connect(connString == null ? "" : connString.ToString());
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DatasourceProviders.IReadThruProvider.LoadFromSource(System.String)">
            <summary>
            Responsible for loading the object from the data source. Key is passed as a parameter.
            </summary>
            <param name="key">Key used to reference the object.</param>
            <returns>A CacheItem with some limited fields.</returns>
            <example>
            The following example performs a single operation on the data source.
            <code>
            public ProviderCacheItem LoadFromSource(string key)
            {	
            	return new ProviderCacheItem(_source.LoadCustomer(key));
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DatasourceProviders.IReadThruProvider.LoadFromSource(System.Collections.Generic.ICollection{System.String})">
             <summary>
             Responsible for loading array of objects from the data source. Keys are passed as a parameter.
             </summary>
             <param name="keys">Array of keys.</param>
             <example>
            The following example performs multiple operations on data source.
             <code>
             public IDictionary&lt;string, ProviderCacheItem> LoadFromSource(ICollection&lt;string> keys)
             {
             	Dictionary&lt;string, ProviderCacheItem> dictionary = new Dictionary&lt;string, ProviderCacheItem>();
             	foreach (string key in keys)
             	{
             		ProviderCacheItem item = LoadFromSource(key);
             		dictionary.Add(key, item);
             	}
             	 return dictionary;
             }
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DatasourceProviders.IReadThruProvider.LoadDataTypeFromSource(System.String,Alachisoft.NCache.Runtime.Caching.DistributedDataType)">
            <summary>
            Responsible for loading the list from the data source. Name is passed as a parameter.
            </summary>
            <param name="key">Key used to reference the object.</param>
            <param name="dataType">Type of collection.</param>
            <returns>A CacheItem with limited fields.
            </returns>
            <example> The following example performs operation to load the specified data type from the data source.
            <code>
            public ProviderDataTypeItem&lt;IEnumerable> LoadDataTypeFromSource(string key, DistributedDataType dataType)
            {
            	IEnumerable value = null;
            	ProviderDataTypeItem&lt;IEnumerable> dataTypeItem = null;
            
            	switch (dataType)
            	{
            		case DistributedDataType.List:
            			value = new List&lt;object>()
            		{
            			LoadFromDataSource(key)
            		};
            			dataTypeItem = new ProviderDataTypeItem&lt;IEnumerable>(value);
            			break;
            
            		case DistributedDataType.Dictionary:
            			value = new Dictionary&lt;string, object>()
            		{
            			{ key ,  LoadFromDataSource(key) }
            		};
            			dataTypeItem = new ProviderDataTypeItem&lt;IEnumerable>(value);
            			break;
            
            		case DistributedDataType.Counter:
            			dataTypeItem = new ProviderDataTypeItem&lt;IEnumerable>(1000);
            			break;
            	}
            
            	return dataTypeItem;
            }
            
            private object LoadFromDataSource(string key)
            {
            	// Load item from your data source and return retrieved Object
            	return _source.LoadObject(key);
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.DatasourceProviders.IReadThruProvider.Dispose">
            <summary>
            Perform tasks associated with freeing, releasing, or resetting resources.
            </summary>
            <example>
            The following example disconnects from the data source on dispose.
            <code>
            public void Dispose()
            {
               _source.DisConnect();
            }
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.MapReduce.IMapReduceTaskResult">
            <summary>
            Returns the result of Map Reduce Task result from server.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.MapReduce.IMapReduceTaskResult.GetEnumerator">
             <summary>
             Obtain the result in form of dictionary.
             </summary>
             <returns>dictionary containing the MapReduce result</returns>
             <example>
             Example gets map reduce task result enumerator
             <code>
             IMapReduceTaskResult result = taskTracker.GetResult();
            
             IDictionaryEnumerator enumResult = result.GetEnumerator();
             </code>
             </example>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.MapReduce.IMapReduceTrackableTask">
            <summary>
            This component lets you keep track of the progress of the task and its status as the task is executed. And lets you fetch the output of the task and enumerate it.
            <para><b> Note:</b>MapReduceCallback() and GetResult() cannot be executed together because GetResult is a blocking call and this combination will throw an exception.</para>
            </summary>
        </member>
        <member name="E:Alachisoft.NCache.Runtime.MapReduce.IMapReduceTrackableTask.OnTrackableTaskComplete">
             <summary>
             Users can register a callback on the MapReduce task that is called when task execution is completed, failed or cancelled with a parameter response that encapsulates status of the task and result (if completed).
             </summary>
             <example>
             Example registers a callback
             <code>
             ITrackableTask taskTracker = cache.ExecuteTask(prodAggregatorTask, new OrderKeyFilter());
            
             taskTracker.OnTrackableTaskComplete += new MapReduceCallback(MapReduceCompleted);
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.MapReduce.IMapReduceTrackableTask.GetResult">
             <summary>
             This is a blocking call that waits for the callback from the server about the task’s completion, failure or cancellation in the form of an IMapReduceTaskResult. 
             </summary>
             <returns>Returns an IMapReduceTaskResult instance</returns>
             <example>
             Example gets task result
             <code>
             IMapReduceTrackableTask taskTracker = cache.ExecuteTask(prodAggregatorTask, new OrderKeyFilter());
            
             IMapReduceTaskResult result = taskTracker.GetResult();
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.MapReduce.IMapReduceTrackableTask.GetResult(System.Int32)">
             <summary>
             If no result is obtained within the provided timeout, OperationFailedException will be thrown. 
             </summary>
             <param name="timeout">Time in millisecond in which if result is not returned, thread will be terminated and exception or null will be given</param>
             <returns>Returns an IMapReduceTaskResult instance</returns>
             <example>
             Example gets task result with a timeout of 5 seconds
             <code>
             IMapReduceTrackableTask taskTracker = cache.ExecuteTask(prodAggregatorTask, new OrderKeyFilter());
            
             IMapReduceTaskResult result = taskTracker.GetResult(5000);
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.MapReduce.MapReduceTask.#ctor">
            <summary>
            MapReduceTask Default constructor with no arguments to initialize MapReduceTask
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.MapReduce.MapReduceTask.#ctor(Alachisoft.NCache.Runtime.MapReduce.IMapper,Alachisoft.NCache.Runtime.MapReduce.ICombinerFactory,Alachisoft.NCache.Runtime.MapReduce.IReducerFactory)">
            <summary>
            MapReduceTask overloaded constructor with mapper ,combinerFactory and reducerFactory objects
            </summary>
            <param name="mapper"><see cref="T:Alachisoft.NCache.Runtime.MapReduce.IMapper"/> </param>
            <param name="combinerFactory"><see cref="T:Alachisoft.NCache.Runtime.MapReduce.ICombinerFactory"/></param>
            <param name="reducerFactory"><see cref="T:Alachisoft.NCache.Runtime.MapReduce.IReducerFactory"/></param>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.MapReduce.MapReduceTask.Mapper">
            <summary>
            Set/Gets values of the Mapper
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.MapReduce.MapReduceTask.Combiner">
            <summary>
            Set/Gets values of Combiner
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.MapReduce.MapReduceTask.Reducer">
            <summary>
            Set/Gets Values of Reducer
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.MapReduce.MapReduceTaskCallback">
            <summary>
            Users can register a callback on the MapReduce task that is called when task execution is completed, failed or cancelled with a parameter response that encapsulates status of the task and result (if completed).
            </summary>
            <param name="response">Encapsulates task and result if completed</param>
            <remarks><b>Note:</b> If map reduce call back is registered than GetTaskResult(taskID) for specific taskID can not be called. </remarks>
            
        </member>
        <member name="M:Alachisoft.NCache.Runtime.MapReduce.ICombiner.BeginCombine">
            <summary>
            This method will provide the user with a starting point to initialize any parameters you want to be used before the actual combining of elements begins.
            </summary>
            <example>
            Following code demonstrates implementation of BeginCombine method. 
            <code>
            int count;
            public void BeginCombine()
            {
               count = 0;
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.MapReduce.ICombiner.Combine(System.Object)">
            <summary>
            This method reduces the task result locally in chunks so that the Reducer is not burdened with excessive processing. If the workflow diagram is referred, it means that the elements with the same keys are grouped together before being sent to the Reducer for counting the word occurrence.
            </summary>
            <param name="value">Value for making grouped data for reducer.</param>
            <example>
            Following example demonstrates how to implement Combine.
            <code>
            public void Combine(object value)
            {
               count += int.Parse(value.ToString());
            }
            </code>
            </example>
            
        </member>
        <member name="M:Alachisoft.NCache.Runtime.MapReduce.ICombiner.FinishChunk">
            <summary>
            This method marks the end of the Combiner functionality as when the number of combined results reaches the specified chunk size, it sends the tasks in the form of a chunk to the Reducer and resets its internal state for the next chunk.
            </summary>
            <example>
            Following example demonstrates how to implement FinishChunk. 
            <code>
            public object FinishChunk()
            {
               //finalize current chunk and re-initialize resources here
               int countToBeReturned = count;
               count = 0;
               return countToBeReturned;
            }
            </code>
            </example>
            <returns>Sends the chunk to Reducer.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.MapReduce.ICombinerFactory.Create(System.Object)">
            <summary>
             This method will provide the incoming element with a new instance of the Combiner so that it merges the intermediate key-value pairs from the Mapper.
            </summary>
            <param name="key">Key for new Combiner</param>
            <returns>New instance of ICombiner.</returns>
            <example>
            Following example demonstrates the implementation of create.
            <code>
            public ICombiner Create(object key)
             {
                 WordCountCombiner wcCombiner = new WordCountCombiner(); //new instance of combiner.
                 return wcCombiner;
             }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.MapReduce.IKeyFilter.FilterKey(System.Object)">
             <summary>
             Implement the interface IKeyFilter to provide implementation for the FilterKey() method. Providing this interface is optional.
             </summary>
             <param name="key">Key for filtering </param>
             <returns>Returns if map has to be applied or not.</returns>
             <example>
             Following example illustrate the usage of FilterKey. 
             <code>
             public class MapReduceKeyFilter : IKeyFilter
             {
              public bool FilterKey(object key)
               {
                try
                {
                    if (key.ToString().Contains("hungry"))
                    {
                        return true;
                    }
            
                }
                catch (Exception exp)
                {
                    //handle exception
                }
                return false;
               }
             }
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.MapReduce.IMapper.Map(System.Object,System.Object,Alachisoft.NCache.Runtime.MapReduce.IOutputMap)">
            <summary>
            This method will contain the logic to map the input from cache into more meaningful and goal specific key-value pairs which can be sent to the Reducer or optional Combiner.
            <para>
            Referring to the workflow diagram, the string input is transformed by emitting each word with a key-value pair in the Mapper.
            </para>
            </summary>
            <param name="key">Key value of cache Entry.</param>
            <param name="value">Value for the key</param>
            <param name="context">Emitted output value for each key-value pair</param>
            <example>
            Following example demonstrate the usage of Map. 
            <code>
            string[] parsedline;
            string line;
            public void Map(Object key, Object value, IOutputMap context)
            {
                line = value.ToString();
                parsedline = line.Split(' ');
                for (int i = parsedline.Length; i>=0; i++)
                 {
                   context.Emit(parsedline[i], 1);
                  }
              }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.MapReduce.IReducer.BeginReduce">
            <summary>
            This method will provide the user with a starting point to initialize any parameters you want to be used before the actual reducing of elements begins.
            </summary>
            <example>
            Following example illustrate the usage of BeginReduce. 
            <code>
            int count;
            public void BeginReduce()
            {
               //All initialization related tasks are done here
               count = 0;
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.MapReduce.IReducer.Reduce(System.Object)">
            <summary>
            This method will reduce (process) the intermediate key-value pairs into further meaningful pairs.
            <para>
            If the workflow diagram is referred, it means that the values of the grouped elements from Combiner are summed up to find the actual word count.
            </para>
            </summary>
            <param name="value">Value for the specified key. </param>
            <example>
            Following example illustrate the usage of Reduce. 
            <code>
            public void Reduce(object value)
            {
              count += int.Parse(value.ToString());
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.MapReduce.IReducer.FinishReduce">
            <summary>
            This method will provide the task with the final result of the map reduce operation for specific intermediate key/value pair.
            </summary>
            <returns>Return key-value pair.</returns>
            <example>
            <code>
            public KeyValuePair FinishReduce()
            {
              KeyValuePair kvp = null;
              kvp.Key = key;
              kvp.Value = count;
              return kvp;
             }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.MapReduce.IReducerFactory.Create(System.Object)">
            <summary>
            This method will provide the incoming element with a new instance of the Reducer so that it merges the intermediate key-value pairs from the Combiner.
            </summary>
            <param name="key">Key for new Reducer</param>
            <returns>New instance of IReducer.</returns>
            <example>
            Following example demonstrates the implementation of Create.
            <code>
            public IReducer Create(object key)
             {
                 WordCountReducer wcReducer = new WordCountReducer(); //new instance of Reducer.
                 return wcReducer;
             }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.MapReduce.IOutputMap.Emit(System.Object,System.Object)">
            <summary>
            Transforms the input by emitting each word with a key-value pair in Mapper. 
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
            <example>
            <code>
            public void Map(object key, object value, IOutputMap context)
            {
                if (value is IList)
                {
                    IList order = value as IList;
                    foreach (string product in order)
                    {
                        context.Emit(product, 1);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Messaging.TopicPriority">
            <summary>
            Specifies the relative priority of topics stored in the cache.
            </summary>
            <remarks>
            When the application's cache is full or runs low on memory, the cache selectively purges 
            items to free system memory. When a topic is added to the cache, you can assign it a 
            relative priority compared to the other topics stored in the cache. 
            <para>
            Messages in topics you assign higher 
            priority values to are less likely to be deleted from the cache when the server is processing 
            a large number of requests, while messages in topics you assign lower priority values are more likely to be 
            deleted. The default is Normal.
            </para>
            </remarks>
            <example>The following example demonstrates how to set <see cref="T:Alachisoft.NCache.Runtime.Messaging.TopicPriority"/> of a topic in a cache
             to <see cref="F:Alachisoft.NCache.Runtime.Messaging.TopicPriority.High"/>.
            <code>
            
            ITopic topic=messagingService.CreateTopic("mytopic", TopicPriority.High);
            
            </code>
            </example>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Messaging.TopicPriority.Low">
            <summary>
            Messages in topic with this priority level are the most likely to be deleted 
            from the cache as the server frees system memory.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Messaging.TopicPriority.Normal">
            <summary>
            Messages in topic with this priority level are likely to be deleted from the 
            cache as the server frees system memory only after those topics with Low 
            priority. This is the default priority of the topic.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Messaging.TopicPriority.High">
            <summary>
            Messages in topic with this priority level are less likely to be deleted from the 
            cache as the server frees system memory.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.NCacheConfigurationOptions">
            <summary>
             This class provides options to configure NCache.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.NCacheConfigurationOptions.InstallDir">
            <summary>
            Sets the install directory of NCache.
            </summary>
            <returns>Installation directory of NCache.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.NCacheConfigurationOptions.LogPath">
            <summary>
            Sets the path for client logs.
            </summary>
            <returns>The path for client logs.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.CustomDependencyProviders.ICustomDependencyProvider">
            <summary>
            This interface provides implementation for the instance of <see cref="T:Alachisoft.NCache.Runtime.Dependencies.ExtensibleDependency"/>
            on the server-side. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.CustomDependencyProviders.ICustomDependencyProvider.Init(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Initializes the ICustomDependencyProvider instance with parameters provided at the time of cache configuration.
            </summary>
            <param name="parameters">Collection of parameters provided at the time of cache configuration.</param>
            <param name="cacheName">Name of the cache that initiated this instance.</param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.CustomDependencyProviders.ICustomDependencyProvider.CreateDependency(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            This method is called on the server-side to create the instance of the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.ExtensibleDependency"/>.
            Provider can create instance of any class derived from either <see cref="T:Alachisoft.NCache.Runtime.Dependencies.ExtensibleDependency"/>,
            <see cref="T:Alachisoft.NCache.Runtime.Dependencies.NotifyExtensibleDependency"/> or <see cref="T:Alachisoft.NCache.Runtime.Dependencies.BulkExtensibleDependency"/>.
            </summary>
            <param name="dependencyParameters">Collection of parameters in key/value pair passed by application to create the instance of Extensible Dependency.</param>
            <param name="key">Cache key.</param>
            <returns>Instance of <see cref="T:Alachisoft.NCache.Runtime.Dependencies.ExtensibleDependency"/>. </returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.CustomDependencyProviders.ICustomDependencyProvider.Dispose">
            <summary>
            Perform tasks associated with freeing, releasing, or resetting resources.
            </summary>
            <example>
            The following example disconnects from the data source on dispose.
            <code>
            public void Dispose()
            {
               _source.DisConnect();
            }
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.AggregateCacheDependency">
            <summary>
            Combines multiple dependencies between an item stored in an application's cache object 
            and an array of CacheDependency objects. This class cannot be inherited. 
            </summary>
            <remarks>
            The AggregateCacheDependency class monitors a collection of dependency objects so that
            when any of them changes, the cached item is automatically removed. 
            The objects in the array can be CacheDependency objects, DBCacheDependency objects
            or any combination of these. 
            <para>
            The AggregateCacheDependency class differs from the CacheDependency class as
            it allows you to associate multiple dependencies of different types with a single 
            cached item. For example, if you create a page that imports data from a SQL Server database 
            table and an XML file, you can create a SqlCacheDependency object to represent a dependency 
            on the database table and a CacheDependency to represent the dependency on the XML file. 
            Rather than making a cache insert method call for each dependency, 
            you can create an instance of the AggregateCacheDependency class with each 
            dependency added to it. You can then use a single Insert call to make the page 
            dependent on the AggregateCacheDependency instance.
            </para>
            </remarks>
            <requirements>
            <constraint>This member is not available in SessionState edition.</constraint> 
            </requirements>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.AggregateCacheDependency.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.AggregateCacheDependency"/> class that wraps multiple
            <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> objects.
            </summary>
            <remarks>
            This is the default constructor for the AggregateCacheDependency class.
            </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.AggregateCacheDependency.Add(Alachisoft.NCache.Runtime.Dependencies.CacheDependency[])">
            <summary>
            Adds an array of <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> objects to the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.AggregateCacheDependency"/> object. 
            </summary>
            <param name="dependencies">The array of CacheDependency objects to add.</param>	
            <example>
            The following example aggregates File Dependency and Key Dependency.
            <code>
            AggregateCacheDependency aggregateDependency = new AggregateCacheDependency();
            aggregateDependency.Add(new FileDependency(filepath), new KeyDependency(key));
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.BulkExtensibleDependency">
            <summary>
            BulkExtensibleDependency is an abstract class extended when Custom Dependency is required and needs to be evaluated in Bulk.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.BulkExtensibleDependency.EvaluateBulk(System.Collections.Generic.IEnumerable{Alachisoft.NCache.Runtime.Dependencies.BulkExtensibleDependency})">
            <summary>
             EvaluateBulk method evaluates the dependency and invokes Expire() if change has occurred.
            </summary>
             /// <param name="dependencies">An abstract class extended when Custom dependency is required and needs to be evaluated in Bulk.</param>
            <code>
                public override void HasChangedBulk(IEnumerable &lt;BulkExtensibleDependency&gt; dependencies)
                {
                    var enumerator = dependencies.GetEnumerator();
                    while (enumerator.MoveNext())
                    {
                     if (enumerator.Current != null)
                     {
                        if (GetAvailableUnits(_productID) == 100)
                        {
                               enumerator.Current.Expire();
                        }
                    }
                   }
                }
            </code>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.BulkExtensibleDependency.HasChanged">
              In EvaluateBulk if the dependency has triggered and want to expire item invoke the Expire() for the dependency.
             <summary>
            This method is used to expire items in the cache.
             </summary>
             <returns>Boolean value, true or false.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.BulkExtensibleDependency.Expire">
            <summary>
             Invoke this method for Bulk Dependency in EvaluateBulk(IEnumerable &lt;BulkExtensibleDependency&gt;)
             to trigger dependency change. 
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType">
            <summary>
            Specifies the type of command parameters.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType.AnsiString">
            <summary>
            An extension of the ASCII character set in that it includes all the ASCII characters with an additional 
            128 character codes
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType.Binary">
            <summary>
            System.Array of type System.Byte. A fixed-length stream of binary data ranging
            between 1 and 8,000 bytes.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType.Byte">
            <summary>
            Allows whole numbers from 0 to 255
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType.Boolean">
            <summary>
            2 logical values, true and false
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType.Currency">
            <summary>
            Use for currency. Holds up to 15 digits of whole dollars, plus 4 decimal places. 
            Tip: You can choose which country's currency to use
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType.Date">
            <summary>
            Date data ranging in value from January 1,1 AD through December 31, 9999 AD.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType.DateTime">
            <summary>
            System.DateTime. Date and time data ranging in value from January 1, 1753
            to December 31, 9999 to an accuracy of 3.33 milliseconds.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType.Decimal">
            <summary>
            System.Decimal. A fixed precision and scale numeric value between -10 to
            -1 and 10 to -1.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType.Double">
            <summary>
            Double precision floating-point. Will handle most decimals.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType.Guid">
            <summary>
            Stores a globally unique identifier.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType.Int16">
            <summary>
            A 16-bit signed integer.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType.Int32">
            <summary>
            A 32-bit signed integer.
            Allows whole numbers from -2,147,483,648 to 2,147,483,647
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType.Int64">
            <summary>
            A 64-bit signed integer.
            Allows whole numbers from -2,147,483,648 to 2,147,483,647
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType.Object">
            <summary>
            Can store pictures, audio, video, or other BLOBs (Binary Large OBjects)
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType.SByte">
            <summary>
            Signed integer
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType.Single">
            <summary>
            Single precision floating-point. Will handle most decimals
            Allows whole numbers from -128 to 127
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType.String">
            <summary>
            Used for string datatypes
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType.Time">
            <summary>
            Time data based on a 24-hour clock. Time value range is 00:00:00 through
            23:59:59.9999999 with an accuracy of 100 nanoseconds.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType.UInt16">
            <summary>
            A 32-bit un-signed integer.
            Allows whole numbers from 0 to 65535
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType.UInt32">
            <summary>
            A 32-bit un-signed integer.
            Allows whole numbers from 0 to 4294967295
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType.UInt64">
            <summary>
            A 64-bit un-signed integer.
            Allows whole numbers from 0 to 18446744073709551615
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType.VarNumeric">
            <summary>
            A variable-length numeric value.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType.AnsiStringFixedLength">
            <summary>
             fixed-length stream of non-Unicode characters.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType.StringFixedLength">
            <summary>
            A fixed-length string of Unicode characters.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType.Xml">
            <summary>
            A SQL Server 2005 user-defined type (UDT).
            Stores XML formatted data. Maximum 2GB
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType.DateTime2">
            <summary>
            From January 1, 0001 to December 31, 9999 with an accuracy of 100 nanoseconds
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsDbType.DateTimeOffset">
            <summary>
            Date and time data with time zone awareness. Date value range is from January
            1,1 AD through December 31, 9999 AD. Time value range is 00:00:00 through
            23:59:59.9999999 with an accuracy of 100 nanoseconds. Time zone value range
            is -14:00 through +14:00.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType">
            <summary>
            Describes the type of parameters passed to the command.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.BigInt">
            <summary>
             System.Int64. A 64-bit signed integer.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.Binary">
            <summary>
            System.Array of type System.Byte. A fixed-length stream of binary data ranging
            between 1 and 8,000 bytes.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.Bit">
            <summary>
            System.Boolean. An unsigned numeric value that can be 0, 1, or null.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.Char">
            <summary>
            System.String. A fixed-length stream of non-Unicode characters ranging between
            1 and 8,000 characters.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.DateTime">
            <summary>
            System.DateTime. Date and time data ranging in value from January 1, 1753
            to December 31, 9999 to an accuracy of 3.33 milliseconds.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.Decimal">
            <summary>
            System.Decimal. A fixed precision and scale numeric value between -10 38
            -1 and 10 38 -1.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.Float">
            <summary>
            System.Double. A floating point number within the range of -1.79E +308 through
            1.79E +308.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.Int">
            <summary>
            System.Int32. A 32-bit signed integer.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.Money">
            <summary>
            System.Decimal. A currency value ranging from -2 63 (or -9,223,372,036,854,775,808)
            to 2 63 -1 (or +9,223,372,036,854,775,807) with an accuracy to a ten-thousandth
            of a currency unit.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.NChar">
            <summary>
            System.String. A fixed-length stream of Unicode characters ranging between
            1 and 4,000 characters.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.NVarChar">
            <summary>
            System.String. A variable-length stream of Unicode characters ranging between
            1 and 4,000 characters. Implicit conversion fails if the string is greater
            than 4,000 characters. Explicitly set the object when working with strings
            longer than 4,000 characters.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.Real">
            <summary>
            System.Single. A floating point number within the range of -3.40E +38 through
            3.40E +38.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.UniqueIdentifier">
            <summary>
            System.Guid. A globally unique identifier (or GUID).
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.SmallDateTime">
            <summary>
            System.DateTime. Date and time data ranging in value from January 1, 1900
            to June 6, 2079 to an accuracy of one minute.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.SmallInt">
            <summary>
            System.Int16. A 16-bit signed integer.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.SmallMoney">
            <summary>
            System.Decimal. A currency value ranging from -214,748.3648 to +214,748.3647
            with an accuracy to a ten-thousandth of a currency unit.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.Timestamp">
            <summary>
            System.Array of type System.Byte. Automatically generated binary numbers,
            which are guaranteed to be unique within a database. Timestamp is used typically
            as a mechanism for version-stamping table rows. The storage size is 8 bytes.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.TinyInt">
            <summary>
            System.Byte. An 8-bit unsigned integer.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.VarBinary">
            <summary>
            System.Array of type System.Byte. A variable-length stream of binary data
            ranging between 1 and 8,000 bytes. Implicit conversion fails if the byte
            array is greater than 8,000 bytes. Explicitly set the object when working
            with byte arrays larger than 8,000 bytes.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.VarChar">
            <summary>
            System.String. A variable-length stream of non-Unicode characters ranging
            between 1 and 8,000 characters.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.Variant">
            <summary>
            System.Object. A special data type that can contain numeric, string, binary,
            or date data as well as the SQL Server values Empty and Null, which is assumed
            if no other type is declared.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.Xml">
            <summary>
            An XML value. Obtain the XML as a string using the System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)
            method or System.Data.SqlTypes.SqlXml.Value property, or as an System.Xml.XmlReader
            by calling the System.Data.SqlTypes.SqlXml.CreateReader() method.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.Udt">
            <summary>
            A SQL Server 2005 user-defined type (UDT).
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.Structured">
            <summary>
            A special data type for specifying structured data contained in table-valued parameters.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.Date">
            <summary>
            Date data ranging in value from January 1,1 AD through December 31, 9999 AD.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.Time">
            <summary>
            Time data based on a 24-hour clock. Time value range is 00:00:00 through
            23:59:59.9999999 with an accuracy of 100 nanoseconds.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.DateTime2">
            <summary>
            Date and time data. Date value range is from January 1,1 AD through December
            31, 9999 AD. Time value range is 00:00:00 through 23:59:59.9999999 with an
            accuracy of 100 nanoseconds.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.CmdParamsType.DateTimeOffset">
            <summary>
            Date and time data with time zone awareness. Date value range is from January
            1,1 AD through December 31, 9999 AD. Time value range is 00:00:00 through
            23:59:59.9999999 with an accuracy of 100 nanoseconds. Time zone value range
            is -14:00 through +14:00.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.CustomDependency">
            <summary>
            CustomDependency represents the information to be passed to IExtensibleDependencyProvider<see cref="!:ICustomDependencyProvider"/>
            to create the instance of the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.ExtensibleDependency"/>.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.CustomDependency.ProviderName">
            <summary>
            Gets the name of the Extensible Dependency Provider.
            </summary>
            <returns>Dictionary of parameters passed to create dependency along with provider name.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.CustomDependency.Parameters">
            <summary>
            Gets the parameter dictionary to be passed to Extensible Dependency Provider. 
            </summary>
            <returns>Parameters dictionary passed to create dependency along with provider name.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.CustomDependency.#ctor(System.String)">
            <summary>
            Creates an instance of CustomDependency.
            </summary>
            <param name="providerName">Name of the the Extensible Dependency Provider.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.CustomDependency.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Constructor overload of CustomDependency class that takes provider name and dictionary of key/value pairs to create an instance of the CustomDependency.
            </summary>
            <param name="providerName">Name of the Extensible Dependency Provider.</param>
            <param name="parameters">Collection of parameters in key/value pair to be passed to Extensible Dependency Provider.</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.DBDependencyFactory">
            <summary>
            Returns an instance of the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.DBCacheDependency"/> class. This is a static class.
            </summary>
            <requirements>
            <constraint>This member is not available in SessionState edition.</constraint> 
            </requirements>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.DBDependencyFactory.CreateSqlCacheDependency(System.String,System.String)">
             <summary>
            Creates a new instance of Sql7CacheDependency class,
             using the supplied parameters.
             </summary>
             <remarks>
             This static method is used to create Sql7CacheDependency 
             objects for SQL Server 7 and SQL Server 2000 products.
             <para>
             You need to enable notification for both the table and the database containing the 
             table before you can use this <see cref="T:Alachisoft.NCache.Runtime.Dependencies.DBCacheDependency"/> in your application.
             </para>
             </remarks>
             <param name="connectionString">The connection string for establishing a connection with
             the database server where the database containing above mentioned table exists.</param>
             <param name="dbCacheKey">The primary key of the record. Many dependency objects 
             can be created based on the same primary key. When the record with this primary key 
             is modified in the database, the associated item(s) in the cache expire(s).</param>
             <returns>A SqlCacheDependency object based on the supplied parameters.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.DBDependencyFactory.CreateOleDbCacheDependency(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="!:OleDbCacheDependency"/> class,
            using the supplied parameters.
            </summary>
            <remarks>
            <para>
            You need to enable notification for both the table and the database containing the 
            table before you can use this <see cref="T:Alachisoft.NCache.Runtime.Dependencies.DBCacheDependency"/> in your application.
            </para>
            </remarks>
            <param name="connectionString">The connection string for establishing a connection with
            the database server where the database containing above mentioned table exists.</param>
            <param name="dbCacheKey">The primary key of the record. Many dependency objects can be created based on the same primary key. When the record with this primary key is modified in the database, the associated item(s) in the cache expire(s). </param>
            <returns>A SqlCacheDependency object based on the supplied parameters.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.DBDependencyType">
            <summary>
            This enum represents the type of DBdependency. 
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.DBDependencyType.SqlCacheDependency">
            <summary>
            DB-cache Dependency for SQL.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.DBDependencyType.OleDbCacheDependency">
            <summary>
            DB-cache Dependency for OleDb.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.IDependencyListener">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.KeyDependencyType">
            <summary>
            An enumeration that defines the operation upon which 
            the Key Dependency is to be triggered.
            </summary>
            <returns>Operation upon which the Key Dependency is to be triggered.</returns>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.KeyDependencyType.UpdateOrRemove">
            <summary>
            Triggers Key Dependency when an update or remove 
            operation takes place on the cache item. This is 
            the default value.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.KeyDependencyType.RemoveOnly">
            <summary>
            Triggers Key Dependency when a remove operation 
            takes place on the cache item.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.NosDBDependency">
             <summary>
             Establishes a relationship between an item stored in an application's cache object or a specific database item. This class cannot be inherited.
             </summary>
             <remarks>
            
             You can add items with dependencies to your application's cache with the specific overloads of Add and Insert methods.
             <para>When you add an item object with <see cref="T:Alachisoft.NCache.Runtime.Dependencies.NosDBDependency"/> to cache, it monitors a specific database. 
             Any changes in the database will remove items associated with it from the cache. 
             This helps you avoid losing changes made to the object between the time it is created and the 
             time it is inserted into the cache. 
             </para>
             </remarks>
             <requirements>
             <constraint>This member is not available in SessionState edition.</constraint> 
             </requirements>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.NosDBDependency.#ctor(System.String,System.String)">
            <summary>
            Constructor of NosDBDependency class. 
            </summary>
            <param name="commandText"></param>
            <param name="connectionString"></param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.NosDBDependency.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32)">
            <summary>
            Constructor for NosDBDependency class. It takes connection string of the database, commandText, parameters and timeout as arguments.
            </summary>
            <param name="connectionString"></param>
            <param name="commandText"></param>
            <param name="parameters"></param>
            <param name="timeout"></param>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.NosDBDependency.ConnectionString">
            <summary>
             String required to the cache in order to connect with database.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.NosDBDependency.CommandText">
            <summary>
            CommandText to be used by dependency.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.NosDBDependency.Parameters">
            <summary>
            Parameters to be used by dependency.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.NosDBDependency.Timeout">
            <summary>
            Time after which the timeout exception will be thrown.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.NotifyExtensibleDependency">
            <summary>
            NotifyExtensibleDependency is for notification based dependencies in NCache.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.NotifyExtensibleDependency.DependencyChanged">
            <summary>
             This is used to register the event of dependency change, and will remove dependent items from cache.
            </summary>
            <returns>This delegate invokes when a dependency changes. It calls the code of Custom Dependency to notify the cache that the dependency has triggered.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.NotifyExtensibleDependency.DependencyChangedHandler">
            <summary>
            This delegate invokes when dependency changes. It calls the code of Custom Dependency to notify the cache that dependency has triggered.
            </summary>
            <param name="sender">Object of the class DependencyChangedHandler. </param>
            <returns>This delegate invokes when a dependency changes. It calls the code of custom dependency to notify the cache that the dependency has triggered.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.NotifyExtensibleDependency.HasChanged">
            <summary>
             This property is used to determine whether dependency has been triggered or not by checking the data. 
            </summary>
            <returns>The flag to show if the dependency has been triggered or not.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParams">
            <summary>
            Holds the type and value of the parameters passed to the command instance.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParams.Direction">
            <summary>
            The direction of the passed parameters (in/out).
            </summary>
            <returns>Direction of parameters.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParams.Type">
            <summary>
            The type of the Oracle command parameters.
            </summary>
             /// <returns>Type of Oracle command parameters.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParams.Value">
            <summary>
            The value of the command parameter.
            </summary>
            <returns>Value of command parameter.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParamsType">
            <summary>
            Describes the type of the parameters passed to the Oracle command.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParamsType.BFile">
            <summary>
            The BFILE datatype stores unstructured binary data in operating system files outside the database. 
            A BFILE column or attribute stores a file locator that points to an external file containing the data. 
            The amount of BFILE data that can be stored is limited by the operating system.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParamsType.Blob">
            <summary>
            The BLOB datatype stores unstructured binary data in the database. 
            BLOBs can store up to 128 terabytes of binary data.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParamsType.Byte">
            <summary>
            Allows whole numbers from 0 to 255.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParamsType.Char">
            <summary>
            The Char datatype stores fixed-length character strings. 
            String length (in bytes or characters) is between 1 and 2000 bytes.
            The default is 1 byte.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParamsType.Clob">
            <summary>
            The CLOB datatypes store up to 128 terabytes of character data in the database. 
            CLOBs store database character set data.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParamsType.Date">
            <summary>
            The Date datatype stores point-in-time values (dates and times) in a table. 
            The Date datatype stores the year (including the century),
            the month, the day, the hours, the minutes, and the seconds (after midnight).
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParamsType.Decimal">
            <summary>
            Decimal number datatype.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParamsType.Double">
            <summary>
            A 64-bit, double-precision floating-point number datatype.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParamsType.Int16">
            <summary>
            A 16-bit signed integer.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParamsType.Int32">
            <summary>
            A 32-bit signed integer.
            Allows whole numbers from -2,147,483,648 to 2,147,483,647.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParamsType.Int64">
            <summary>
            A 64-bit signed integer.
            Allows whole numbers from -2,147,483,648 to 2,147,483,647.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParamsType.IntervalDS">
            <summary>
            Interval Day to Second literal.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParamsType.IntervalYM">
            <summary>
            Interval Year to Month literal.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParamsType.Long">
            <summary>
            Long can store variable-length character data containing up to 2 gigabytes of information. 
            Long data is text data that is to be appropriately converted when moving among different systems.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParamsType.LongRaw">
            <summary>
            The LongRaw datatypes is used for data that is not to be interpreted (not converted when moving data between different systems) by Oracle Database. 
            These datatypes are intended for binary data or byte strings.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParamsType.NChar">
            <summary>
            The maximum length of an NChar column is 2000 bytes. 
            It can hold up to 2000 characters. 
            The actual data is subject to the maximum byte limit of 2000. 
            The two size constraints must be satisfied simultaneously at run time.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParamsType.NClob">
            <summary>
            The NClob datatypes store up to 128 terabytes of character data in the database. 
            NClob stores Unicode national character set data.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParamsType.NVarchar2">
            <summary>
            The maximum length of an NVarchar2 column is 4000 bytes.
            It can hold up to 4000 characters. 
            The actual data is subject to the maximum byte limit of 4000. 
            The two size constraints must be satisfied simultaneously at run time.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParamsType.Raw">
            <summary>
            The Raw datatype is used for data that is not to be interpreted (not converted when moving data between different systems) by Oracle database. 
            These datatypes are intended for binary data or byte strings.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParamsType.RefCursor">
            <summary>
            A RefCursor is a PL/SQL data type whose value is the memory address of a query work area on the database.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParamsType.Single">
            <summary>
            Single byte character sets.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParamsType.TimeStamp">
            <summary>
            Gets the system date and time returned in a TimeStamp datatype.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParamsType.TimeStampLTZ">
            <summary>
            TimeStamp with Local Time Zone is stored in the database time zone.
            When a user selects the data, the value is adjusted to the user's session time zone.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParamsType.TimeStampTZ">
            <summary>
            Gets the system date and time according to the timezone returned in a TimeStamp datatype.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParamsType.Varchar2">
            <summary>
            The Varchar2 datatype stores variable-length character strings. 
            Maximum string length (in bytes or characters) is between 1 and 4000 bytes for the Varchar2 column.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCmdParamsType.XmlType">
            <summary>
            XmlType can be used like any other user-defined type.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.OracleCommandType">
            <summary>
            Describes the type of the Oracle command passed to the OracleDependency.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCommandType.Text">
            <summary>
            Text SQL statement to execute against the database.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleCommandType.StoredProcedure">
            <summary>
            When the CommandType property is set to StoredProcedure, 
            the CommandText property should be set to the name of the stored procedure. 
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.OracleParameterDirection">
            <summary>
            Describes whether the passed parameters are out parameters or not.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleParameterDirection.Input">
            <summary>
            In parameters.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.OracleParameterDirection.Output">
            <summary>
            Out parameters.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.SqlCmdParams">
            <summary>
            Holds the information about the type and value of the parameters passed to the command.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.SqlCmdParams.Type">
            <summary>
            Sets the SqlDbType of the passed parameter.
            </summary>
            <returns>The type of parameters passed to the command.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.SqlCmdParams.Direction">
            <summary>
            Sets a value that indicates whether the parameter is input-only, output-only, bidirectional, or a stored procedure with return value parameter.
            </summary>
            <returns>Direction of parameter.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.SqlCmdParams.SourceVersion">
            <summary>
            Sets the DataRowVersion to use when you load value.
            </summary>
            <returns> The DataRowVersion to use when you load value.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.SqlCmdParams.CompareInfo">
            <summary>
            Sets the CompareInfo object that defines how string comparisons should be performed for this parameter.
            </summary>
            <returns>CompareInfo object of class SqlCmpOptions.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.SqlCmdParams.Value">
            <summary>
            This property gets and sets the value of the passed parameter.
            </summary>
            <returns>The value of parameter.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.SqlCmdParams.Size">
            <summary>
            Sets the maximum size, in bytes, of the data within the column.
            </summary>
            <returns>Size of data within the column.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.SqlCmdParams.IsNullable">
            <summary>
            Sets a value that indicates whether the parameter accepts null values.
            </summary>
            <returns>Boolean value, either true or false.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.SqlCmdParams.LocaleID">
            <summary>
            Sets the locale identifier that determines conventions and language for a particular region.
            </summary>
            <returns>Locale identifier that determines conventions and language for a particular region.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.SqlCmdParams.Offset">
            <summary>
            Sets the Offset to the Value property.
            </summary>
            <returns>Offset to the Value property.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.SqlCmdParams.Precision">
            <summary>
            Sets the maximum number of digits used to represent the Value property.
            </summary>
            <returns>Number of digits.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.SqlCmdParams.Scale">
            <summary>
            Sets the number of decimal places to which a value is resolved.
            </summary>
            <returns>Number of decimal places.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.SqlCmdParams.SourceColumn">
            <summary>
            Sets the name of the source column mapped to the dataset and used for loading or returning the value.
            </summary>
            <returns>Name of source column.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.SqlCmdParams.SourceColumnNullMapping">
            <summary>
            Sets a value which indicates whether the source column is nullable. This allows SqlCommandBuilder to correctly generate and update statements for nullable columns.
            </summary>
            <returns>Boolean value, either true or false.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.SqlCmdParams.SqlValue">
            <summary>
            Sets the value of the parameter as an SQL type.
            </summary>
            <returns>SQL type value of parameter.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.SqlCmdParams.TypeName">
            <summary>
            Sets the TypeName for a table-valued parameter.
            </summary>
            <returns>Name for a table-valued parameter.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.SqlCmdParams.UdtTypeName">
            <summary>
            Sets a string that represents a user-defined type as a parameter.
            </summary>
            <returns>String that represents a user-defined type as a parameter.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.SqlCmdParams.SqlParamType">
            <summary>
            Specifies the parameter type.
            </summary>
            <returns>Type of parameter.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.SqlCmdParams.SqlParamDir">
            <summary>
            Specifies the parameters direction.
            </summary>
            <returns>Direction of the parameters.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.SqlCmdParams.SqlCmpInfo">
            <summary>
            Specifies the SQL compare options.
            </summary>
            <returns>SQL compare options.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.SqlCmdParams.SrcVersion">
            <summary>
            Returns the version of a System.Data.DataRow.
            </summary>
            <returns>Version of a System.Data.DataRow.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.SqlCmpOptions">
            <summary>
            Specifies the SQL compare options.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.SqlCmpOptions.None">
            <summary>
            Specifies the default option settings for System.Data.SqlTypes.SqlString comparisons.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.SqlCmpOptions.IgnoreCase">
            <summary>
            Specifies that System.Data.SqlTypes.SqlString comparisons must ignore case.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.SqlCmpOptions.IgnoreNonSpace">
            <summary>
            Specifies that System.Data.SqlTypes.SqlString comparisons must ignore nonspace
            combining characters, such as diacritics. The Unicode Standard defines combining
            characters as characters that are combined with base characters to produce
            a new character. Non-space combining characters do not use character space
            by themselves when rendered. For more information about non-space combining
            characters, see the Unicode Standard at http://www.unicode.org. 
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.SqlCmpOptions.IgnoreKanaType">
            <summary>
            Specifies that System.Data.SqlTypes.SqlString comparisons must ignore the
            Kana type. Kana type refers to Japanese hiragana and katakana characters
            that represent phonetic sounds in the Japanese language. Hiragana is used
            for native Japanese expressions and words, while katakana is used for words
            borrowed from other languages, such as "computer" or "Internet". A phonetic
            sound can be expressed in both hiragana and katakana. If this value is selected,
            the hiragana character for one sound is considered equal to the katakana
            character for the same sound.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.SqlCmpOptions.IgnoreWidth">
            <summary>
            Specifies that System.Data.SqlTypes.SqlString comparisons must ignore the
            character width. For example, Japanese katakana characters can be written
            as full-width or half-width and, if this value is selected, the katakana
            characters written as full-width are considered equal to the same characters
            written in half-width.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.SqlCmpOptions.BinarySort2">
            <summary>
            Performs a binary sort. 
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.SqlCmpOptions.BinarySort">
            <summary>
            Specifies that sorts should be based on a characters numeric value instead
            of its alphabetical value.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.SqlCommandType">
            <summary>
            Describes the type of the command passed to the SqlDependency.
            </summary>
            <remark>
            </remark>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.SqlCommandType.Text">
            <summary>
            An SQL text command.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.SqlCommandType.StoredProcedure">
            <summary>
            The name of a stored procedure.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.SqlCommandType.TableDirect">
            <summary>
            The name of a table.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.SqlDataRowVersion">
            <summary>
             Sets the DataRowVersion to use when you load value.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.SqlDataRowVersion.Original">
            <summary> 
            The row contains its original values. 
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.SqlDataRowVersion.Current">
            <summary> 
            The row contains current values. 
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.SqlDataRowVersion.Proposed">
            <summary> 
            The row contains a proposed value. 
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.SqlDataRowVersion.Default">
            <summary>
            The default version of System.Data.DataRowState. For a DataRowState value
            of Added, Modified or Deleted, the default version is Current. For a System.Data.DataRowState
            value of Detached, the version is Proposed.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.SqlParamDirection">
            <summary>
            Sets the direction of SQL parameters.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.SqlParamDirection.Input">
            <summary>
            Used for Input variables. The value will be passed from the calling environment.
            This is the default value.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.SqlParamDirection.Output">
            <summary>
            Used for Output variable and value will be returned to the calling environment.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.SqlParamDirection.InputOutput">
            <summary>
            The parameter can be used for both input and output variables.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.SqlParamDirection.ReturnValue">
            <summary>
            The parameter represents a return value from an operation such as a stored procedure, built-in function, or user-defined function.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency">
            <summary>
            Tracks cache dependencies, which can be files, directories, or keys to other objects in 
            application's cache. This class cannot be inherited.
            </summary>
            <remarks>
            You can add items with dependencies to your application's cache with the 
            Add and Insert methods.
            <para>When you add an item to an application's cache object and, in doing so, 
            define a cache dependency for that item, an instance of the 
            CacheDependency class is created automatically to track changes to the files, 
            keys, or directories you have specified. This helps you avoid 
            losing changes made to the object between the time it is created and the 
            time it is inserted into the cache. The CacheDependency instance can 
            represent a single file or directory, an array of files or 
            directories, or an array of files or directories along with an array of 
            cache keys (these represent other items stored in the cache object).
            </para>
            </remarks>
            <requirements>
            <constraint>This member is not available in SessionState edition.</constraint> 
            </requirements>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.CacheDependency.#ctor">
            <summary>
            Default constructor for <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> class.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.CacheDependency.#ctor(Alachisoft.NCache.Runtime.Dependencies.CustomDependency)">
            <summary>
            Creates a <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> instance from Custom Dependency.
            </summary>
            <param name="customDependency">CustomDependency instance.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.CacheDependency.#ctor(Alachisoft.NCache.Runtime.Dependencies.ExtensibleDependency)">
            <summary>
            Creates a <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> instance from Extensible Dependency.
            </summary>
            <param name="extensibleDependency">ExtensibleDependency instance.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.CacheDependency.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> class that monitors a file 
             or directory for changes.
             </summary>
             <param name="fileName">The path to a file or directory that the cached object is dependent 
             upon. When this resource changes, the cached object becomes obsolete and is removed from the 
             cache.</param>
             <remarks>
             If the directory or file specified in the fileNames parameter is not found in 
             the file system, it will be treated as a missing file. If the file is created after the object 
             with the dependency is added to the cache, the cached object will be removed from the 
             cache.
             <para>
             Let's assume that you add an object to the cache with a dependency on the following 
             file path: c:\stocks\xyz.dat. If that file is not found when the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> object is 
             created, but is created later, the cached object is removed upon the creation of the xyz.dat file.</para>
             </remarks>
             <example>The following example demonstrates how to create an instance of the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> class 
             when an item is inserted in the cache with a dependency on an XML file.
             <code>
             
            	// Make key1 dependent on a file.
             CacheDependency dependency = new CacheDependency(Server.MapPath("isbn.xml"));
             Cache cache = NCache.InitializeCache("demoClusteredCache");
            	cache.Insert("key1", "Value 1", dependency);
            
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.CacheDependency.#ctor(System.String,System.DateTime)">
             <summary>
             Initializes a new instance of the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> class that monitors a 
             file or directory for changes and indicates when change tracking is to begin.
             </summary>
             <param name="fileName">The path to a file or directory that the cached object is dependent 
             upon. When this resource changes, the cached object becomes obsolete and is removed from the 
             cache.</param>
             <param name="start">The time against which to check the last modified date of the directory or file.</param>
             <remarks>
             If the directory or file specified in the fileNames parameter is not found in 
             the file system, it will be treated as a missing file. If the file is created after the object 
             with the dependency is added to the cache, the cached object will be removed from the 
             cache.
             <para>
             Let's assume that you add an object to the cache with a dependency on the following 
             file path: c:\stocks\xyz.dat. If that file is not found when the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> object is 
             created, but is created later, the cached object is removed upon the creation of the xyz.dat file.</para>
             </remarks>
             <example>The following example demonstrates how to create an instance of the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> class 
             when an item is inserted in the cache with a dependency on an XML file. The tracking start time 
             is set to 10 minutes in the future.
             <code>
             
            	// Make key1 dependent on a file.
             CacheDependency dependency = new CacheDependency(Server.MapPath("isbn.xml"), DateTime.Now.AddMinutes(10));
             Cache cache = NCache.InitializeCache("demoClusteredCache");
            	cache.Insert("key1", "Value 1", dependency);
            
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.CacheDependency.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the CacheDependency class that monitors an 
            array of file paths (to files or directories) for changes.
            </summary>
            <param name="fileNames">An array of file paths (to files or directories) that the cached object 
            is dependent upon. When any of these resources change, the cached object becomes obsolete and 
            is removed from the cache.</param>
            <exception cref="T:System.ArgumentNullException"> fileNames contains a null reference.</exception>
            <remarks>
            If any of the files or directories in the array were to change or be removed from the array, 
            the cached item becomes obsolete and is removed from the application's cache object.
            <para>
            Also, if any of the directories or files specified in the fileNames parameter is not found in the
            file system, they are treated as missing files. If any of them are created after the object with the 
            dependency is added to the cache, the cached object will be removed from the cache. Let's
            assume that you add an object to the cache with a dependency on the following file path: 
            c:\stocks\xyz.dat. If that file is not found when the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> object is created, but is 
            created later, the cached object is removed upon the creation of the xyz.dat file.</para>
            </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.CacheDependency.#ctor(System.String[],System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> class that monitors an array of 
            file paths (to files or directories) for changes and specifies a time when change 
            monitoring begins.
            </summary>
            <param name="fileNames">An array of file paths (to files or directories) that the cached object 
            is dependent upon. When any of these resources change, the cached object becomes obsolete and 
            is removed from the cache.</param>
            <param name="start">The time against which to check the last modified date of the directory or file.</param>
            <exception cref="T:System.ArgumentNullException"> fileNames contains a 
            null reference.</exception>
            <remarks>
            If any of the files or directories in the array were to change or be removed from the array, 
            the cached item becomes obsolete and is removed from the application's cache object.
            <para>
            Also, if any of the directories or files specified in the fileNames parameter is not found in the
            file system, they are treated as missing files. If any of them are created after the object with the 
            dependency is added to the cache, the cached object will be removed from the cache. Let's
            assume that you add an object to the cache with a dependency on the following file path: 
            c:\stocks\xyz.dat. If that file is not found when the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> object is created, but is 
            created later, the cached object is removed upon the creation of the xyz.dat file.</para>
            </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.CacheDependency.#ctor(System.String[],System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> class that monitors an array of 
            file paths (to files or directories), an array of cache keys, or both for changes.
            </summary>
            <param name="fileNames">An array of file paths (to files or directories) that the cached object 
            is dependent upon. When any of these resources change, the cached object becomes obsolete and 
            is removed from the cache.</param>
            <param name="cacheKeys">An array of cache keys that the new object monitors for changes. When 
            any of these cache keys change, the cached object associated with this dependency object 
            becomes obsolete and is removed from the cache.</param>
            <remarks>
            If any of the files or directories in the array were to change or be removed from the array, 
            the cached item becomes obsolete and is removed from the application's cache object.
            <para>
            Also, if any of the directories or files specified in the fileNames parameter is not found in the
            file system, they are treated as missing files. If any of them are created after the object with the 
            dependency is added to the cache, the cached object will be removed from the cache. Let's 
            assume that you add an object to the cache with a dependency on the following file path: 
            c:\stocks\xyz.dat. If that file is not found when the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> object is created, but is 
            created later, the cached object is removed upon the creation of the xyz.dat file.
            </para>
            </remarks>
            <example>The following code fragment demonstrates how to insert an item into your application's 
            cache with a dependency on a key to another item placed in the cache. Since this method uses 
            array syntax, you must define the number of keys the item you are adding to the cache is 
            dependent on.</example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> class that monitors an array of 
            file paths (to files or directories), an array of cache keys, or both for changes.
            </summary>
            <param name="fileNames">An array of file paths (to files or directories) that the cached object 
            is dependent upon. When any of these resources change, the cached object becomes obsolete and 
            is removed from the cache.</param>
            <param name="cacheKeys">An array of cache keys that the new object monitors for changes. When 
            any of these cache keys change, the cached object associated with this dependency object 
            becomes obsolete and is removed from the cache.</param>
            <param name="start">The time against which to check the last modified date of the directory or file.</param>
            <exception cref="T:System.ArgumentNullException"> fileNames or cacheKeys contains a 
            null reference.</exception>
            <remarks>
            If any of the files or directories in the array were to change or be removed from the array, 
            the cached item becomes obsolete and is removed from the application's cache object.
            <para>
            Also, if any of the directories or files specified in the fileNames parameter is not found in the
            file system, they are treated as missing files. If any of them are created after the object with the 
            dependency is added to the cache, the cached object will be removed from the cache. Let's, 
            assume that you add an object to the cache with a dependency on the following file path: 
            c:\stocks\xyz.dat. If that file is not found when the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> object is created, but is 
            created later, the cached object is removed upon the creation of the xyz.dat file.
            </para>
            </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.CacheDependency.#ctor(System.String[],System.String[],Alachisoft.NCache.Runtime.Dependencies.CacheDependency)">
            <summary>
            Initializes a new instance of the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> class that monitors an array of 
            file paths (to files or directories), an array of cache keys, or both for changes. 
            It also makes itself dependent upon a separate instance of the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> class.
            </summary>
            <param name="fileNames">An array of file paths (to files or directories) that the cached object 
            is dependent upon. When any of these resources change, the cached object becomes obsolete and 
            is removed from the cache.</param>
            <param name="cacheKeys">An array of cache keys that the new object monitors for changes. When 
            any of these cache keys change, the cached object associated with this dependency object 
            becomes obsolete and is removed from the cache.</param>
            <param name="dependency">Another instance of the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> class that this 
            instance is dependent upon.</param>
            <exception cref="T:System.ArgumentNullException"> fileNames or cacheKeys contains a 
            null reference.</exception>
            <remarks>
            If any of the files or directories in the array were to change or be removed from the array, 
            the cached item becomes obsolete and is removed from the application's cache object.
            <para>
            Also, if any of the directories or files specified in the fileNames parameter is not found in the
            file system, they are treated as missing files. If any of them are created after the object with the 
            dependency is added to the cache, the cached object will be removed from the cache. Let's, assume that you add an object to the cache with a dependency on the following file path: 
            c:\stocks\xyz.dat. If that file is not found when the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> object is created, but is 
            created later, the cached object is removed upon the creation of the xyz.dat file.
            </para>
            </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.CacheDependency.#ctor(System.String[],System.String[],Alachisoft.NCache.Runtime.Dependencies.CacheDependency,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> class that monitors an array of file paths (to files or 
            directories), an array of cache keys, or both for changes. It also 
            makes itself dependent upon another instance of the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> 
            class and a time when the change monitoring begins.
            </summary>
            <param name="fileNames">An array of file paths (to files or directories) that the cached object 
            is dependent upon. When any of these resources change, the cached object becomes obsolete and 
            is removed from the cache.</param>
            <param name="cacheKeys">An array of cache keys that the new object monitors for changes. When 
            any of these cache keys change, the cached object associated with this dependency object 
            becomes obsolete and is removed from the cache.</param>
            <param name="dependency">Another instance of the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> class that this 
            instance is dependent upon.</param>
            <param name="start">The time against which to check the last modified date of the directory or file.</param>
            <exception cref="T:System.ArgumentNullException"> fileNames or cacheKeys contains a 
            null reference.</exception>
            <remarks>
            If any of the files or directories in the array were to change or be removed from the array, 
            the cached item becomes obsolete and is removed from the application's cache object.
            <para>
            Also, if any of the directories or files specified in the fileNames parameter is not found in the
            file system, they are treated as missing files. If any of them are created after the object with the 
            dependency is added to the cache, the cached object will be removed from the cache. Let's, 
            assume that you add an object to the cache with a dependency on the following file path: 
            c:\stocks\xyz.dat. If that file is not found when the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> object is created, but is 
            created later, the cached object is removed upon the creation of the xyz.dat file.
            </para>
            </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.CacheDependency.AddDependencies(Alachisoft.NCache.Runtime.Dependencies.CacheDependency[])">
            <summary>
            This method is used to add dependencies for the cache item.
            </summary>
            <param name="dependencies">Array of cache dependencies.</param>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.CacheDependency.Dependencies">
            <summary>
            Contains the list of dependencies for the cache item.
            </summary>
            <returns>List of dependencies for the cache item.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.CacheDependency.Dispose">
            <summary>
            Releases the resources used by the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> object.
            </summary>
            <remarks>Releases the resources used by the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> object. 
            </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.CacheDependency.DependencyDispose">
            <summary>
            Releases custom resources used by the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> object. 
            </summary>
            <remarks>Releases the resources used by the <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> object. Must be 
            overriden by custom <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/> objects.
            </remarks>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.DBCacheDependency">
             <summary>
             Establishes a relationship between an item stored in an application's cache object 
             or a specific database table. This class cannot be inherited. 
             </summary>
             <remarks>
            
             You can add items with dependencies to your application's cache with the 
             specific overloads of Add and Insert methods.
             <para>When you add an item to an application's cache object with 
             DBCacheDependency, it monitors a specific database table so that 
             when the table changes, items associated with 
             the table will be automatically removed from the cache.  
             This helps you avoid losing changes made to the object between the time it is created and the 
             time it is inserted into the cache. 
             </para>
             </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.DBCacheDependency.#ctor">
            <summary>
            Initializes a new instance of the OleDbCacheDependency class, 
            using the supplied parameters to create a cache-key dependency. 
            </summary>
            <remarks>
            This constructor is used to create OleDbCacheDependency 
            objects for SQL Server 7 and SQL Server 2000 products.
            <para>
            You need to enable notification for both the table and the database containing the 
            table before you can use this <see cref="T:Alachisoft.NCache.Runtime.Dependencies.DBCacheDependency"/> in your application.
            </para>
            </remarks>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.DBCacheDependency.ConnectionString">
            <summary>
            A connection string that is required by the cache in order to connect with database.
            </summary>
            <returns>Connection String.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.DBCacheDependency.PrimaryKey">
            <summary>
            Primary key of the item in database.
            </summary>
            <returns>Primary key.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.DBCacheDependency.Type">
            <summary>
            It represents the type of DB dependency.
            </summary>
            <returns>Type of DB dependency.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.DBCacheDependency.CreateSqlCacheDependency(System.String,System.String)">
            <summary>
            CreateSqlCacheDependency make dependency of CacheItem with the item contains at database with primary key.
            </summary>
            <param name="connectionString">ConnectionString to the database for which dependency is need to be apply.</param>
            <param name="primaryKey">PrimaryKey of the database table on which dependency is to be added.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.DBCacheDependency.CreateOleDbCacheDependency(System.String,System.String)">
            <summary>
            CreateOleDbCacheDependency with a connection string and primary key.
            </summary>
            <param name="connectionString">Connection string to the database on which database the dependency is to be applied.</param>
            <param name="primaryKey">Primary key of the table on which dependency is to be applied.</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.ExtensibleDependency">
            <summary>
            ExtensibleDependency is an abstract class extended when Custom Dependency is required.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.ExtensibleDependency.Initialize">
             <summary>
             This  method initializes the ExtensibleDependency.
             </summary>
             <returns>True/False for successful/unsuccessful initialization.</returns>
             <example>
             <code>
             public override bool Initialize() 
             {
                _connection = new OleDbConnection(_connString);
                _connection.Open();
            
                return true; 
             }
             </code>
             </example>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.ExtensibleDependency.HasChanged">
            <summary>
            HasChanged bool flag is set true if an item is updated and it also needs to be updated in the cache.
            </summary>
            <returns>Specifies a boolean value either true, or false.</returns>
            <example>
            
            <code>
            public override bool HasChanged
            {
                get
                {
                   if (GetAvailableUnits(_productID) == 100)
                   return true;
                   return false;
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.FileDependency">
            <summary>
            FileDependency class is used to provide file based dependency to the user. 
            If items are dependent on that file, the items will be removed on the file update.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.FileDependency.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FileDependency class that monitors a file or directory for changes.
            </summary>
            <param name="fileName">The path to a file or directory that the cached object is dependent upon. When this resource changes, the cached object becomes obsolete and is removed from the cache.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.FileDependency.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the FileDependency class that monitors an array of file paths (to files or directories) for changes.
            </summary>
            <param name="fileNames">The paths to files or directories on which the cached object is dependent upon. When these resources change, the cached object becomes obsolete and is removed from the cache.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.FileDependency.#ctor(System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the FileDependency class that monitors path (to files or directories) for changes and specifies a time when change monitoring begins.
            </summary>
            <param name="fileName">The path to a file or directory that the cached object is dependent upon. When this resource changes, the cached object becomes obsolete and is removed from the cache.</param>
            <param name="startAfter">The time against which to check the last modified date of the directory or file.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.FileDependency.#ctor(System.String[],System.DateTime)">
            <summary>
            Initializes a new instance of the FileDependency class that monitors an array of file
            paths (to files or directories) for changes and specifies a time when 
            change monitoring begins.
            </summary>
            <param name="fileNames">The paths to files or directories on which the cached object is dependent upon. When these resources change, the cached object becomes obsolete and is removed from the cache.</param>
            <param name="startAfter">The time against which to check the last modified date of the directory or file.</param>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.FileDependency.FileNames">
            <summary>
            Gets the file names.
            </summary>
            <returns>File or folder names against which the dependency has been monitored.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.FileDependency.StartAfterTicks">
            <summary>
            StartAfterTicks shows the time after which dependency is to be started. 
            </summary>
            <returns>Number of ticks after which dependency is to be started.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.KeyDependency">
            <summary>
            KeyDependency class is used for providing key based dependency in the cache.
            </summary>
            <remarks>
            Whenever an item is added in cache with Key Dependency, then any changes in the 
            other item results in removal of the dependent item. The key should already exist 
            in cache on which an item depends on. An item can depend on multiple keys. Cyclic 
            dependency is however not supported.
            </remarks>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.KeyDependency._cacheKeys">
            <summary> Keys against which the dependency is created. </summary>
            <returns>Array of cache keys.</returns>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.KeyDependency._startAfterTicks">
            <summary> StartAfterTicks shows the time after which the dependency is to be started.</summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Dependencies.KeyDependency._keyDependencyType">
            <summary> Enumeration specifying operation upon which Key Dependency is to be triggered. </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.KeyDependency.CacheKeys">
            <summary>
            Returns array of cache keys.
            </summary>
            <returns>Array of cache keys.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.KeyDependency.StartAfterTicks">
            <summary>
             StartAfterTicks shows the time after which dependency is to be started.
            </summary>
            <returns>Number of seconds after which dependency is to be started.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.KeyDependency.KeyDependencyType">
            <summary>
            Enumeration, specifying operation upon which the Key Dependency is to be triggered.
            </summary>
            <returns>Specifies the operation upon which Key Dependency is to be triggered.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.KeyDependency.#ctor(System.String)">
            <summary>
            Initializes a new instance of the KeyDependency class that monitors a cache key for
            changes based on the update or remove operation performed and taking effect instantly.
            </summary>
            <param name="key">Key against which the dependency has been created.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.KeyDependency.#ctor(System.String,System.DateTime)">
             <summary>
             Initializes a new instance of the KeyDependency class that monitors a cache key for
             changes based on the update or remove operation performed and taking effect instantly 
             corresponding to the DateTime specified.
             </summary>
            <param name="key">Key against which the dependency has been created.</param>
            <param name="startAfter">Time after which the dependency should be triggered.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.KeyDependency.#ctor(System.String,Alachisoft.NCache.Runtime.Dependencies.KeyDependencyType)">
            <summary>
            Initializes a new instance of the KeyDependency class that monitors a cache key for
            changes based on the operation performed (that is specified by KeyDependencyType argument) 
            and taking effect instantly.
            </summary>
            <param name="key">Key against which the dependency has been created.</param>
            <param name="keyDependencyType">An enumeration that defines the operation upon which Key Dependency is to be triggered.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.KeyDependency.#ctor(System.String,System.DateTime,Alachisoft.NCache.Runtime.Dependencies.KeyDependencyType)">
            <summary>
            Initializes a new instance of the KeyDependency class that monitors a cache key for 
            changes based on the operation performed (that is specified by KeyDependencyType argument) 
            and taking effect instantly corresponding to the DateTime specified.
            </summary>
            <param name="keyDependencyType">An enumeration that defines the operation upon which Key Dependency is to be triggered.</param>
            <param name="startAfter">Time after which the dependency should be triggered.</param>
            <param name="key">Key against which the dependency has been created.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.KeyDependency.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the KeyDependency class that monitors an array of 
            cache keys for changes based on the update or remove operation performed 
            and taking effect instantly.
            </summary>
            <param name="keys">Keys against which the dependency has been created.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.KeyDependency.#ctor(System.String[],System.DateTime)">
            <summary>
            Initializes a new instance of the KeyDependency class that monitors an array of 
            cache keys for changes based on the update or remove operation performed 
            and taking effect instantly corresponding to the DateTime specified.
            </summary>
            <param name="keys">Keys against which the dependency has been created.</param>
            <param name="startAfter">Time after which the dependency should be triggered.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.KeyDependency.#ctor(System.String[],Alachisoft.NCache.Runtime.Dependencies.KeyDependencyType)">
            <summary>
            Initializes a new instance of the KeyDependency class that monitors an array of  cache keys
            for changes based on the operation performed (that is specified by KeyDependencyType argument)
            and taking effect instantly.
            </summary>
            <param name="keys">Keys against which the dependency has been created.</param>
            <param name="keyDependencyType">An enumeration that defines the operation upon which Key Dependency is to be triggered.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.KeyDependency.#ctor(System.String[],System.DateTime,Alachisoft.NCache.Runtime.Dependencies.KeyDependencyType)">
            <summary>
            Initializes a new instance of the KeyDependency class that monitors an array of cache keys
            for changes based on the operation performed (that is specified by KeyDependencyType argument) 
            and taking effect instantly corresponding to the DateTime specified.
            </summary>
            <param name="keyDependencyType">An enumeration that defines the operation upon which Key Dependency is to be triggered.</param>
            <param name="startAfter">The time against which to check the last modified date of the directory or file.</param>
            <param name="keys">Keys against which the dependency has been created.</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.OracleCacheDependency">
            <summary>
            Establishes a relationship between an item stored in an application's cache object 
            and either a row in a specific Oracle database table or 
            the results of an Oracle query.
            This class cannot be inherited.
            </summary>
            <remarks>
            You can add items with dependencies to your application's cache with the 
            Add, Insert or AddDependency methods.
            <para>When you add an item to an application's cache object with 
            <see cref="T:Alachisoft.NCache.Runtime.Dependencies.OracleCacheDependency"/>, on all ODP.NET supported versions of Oracle database, it monitors a 
            row in a specific Oracle database table so that when that row changes, items associated with 
            the row will be automatically removed from the cache.  
            This helps you to avoid losing changes made to the object between the time it is created and the 
            time it is inserted into the cache. 
            <see cref="T:Alachisoft.NCache.Runtime.Dependencies.OracleCacheDependency"/> class supports the association of cached items with an 
            Oracle query. 
            </para>
            </remarks>
            <requirements>
            <constraint>This member is not available in SessionState edition.</constraint> 
            </requirements>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.OracleCacheDependency.ConnectionString">
            <summary>
            Connection String that is required by the cache in order to connect with database.
            </summary>
            <returns>Connection String that is required by the cache in order to connect with database </returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.OracleCacheDependency.CommandText">
            <summary>
            CommandText to be used by the dependency.
            </summary>
            <returns>CommandText to be used by the dependency.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.OracleCacheDependency.CommandType">
            <summary>
            Describes the type of the Oracle command passed to the OracleDependency.
            </summary>
            <returns> The type and value of the parameters passed to the command instance.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.OracleCacheDependency.CommandParams">
            <summary>
            Describes the type of the parameters passed to the Oracle command.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.OracleCacheDependency.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the OracleCacheDependency class, 
            using the supplied connection string and query string.
            </summary>
            <remarks>
            This constructor is used to create OracleCacheDependency objects which use the 
            query-notification feature of Oracle products. 
            <para>
            Query must include the following:
            Fully qualified table names, including the name of the table owner. 
            For example, to refer to a table called "customers" that is owned by the database owner, 
            the statement must refer to "dbo.customers".
            </para>
            </remarks>
            <param name="connectionString">Connection string to be used by the dependency.</param>
            <param name="cmdText">SQL statement, table name or stored procedure to execute on the data source.</param>
            <returns>An OracleCacheDependency object based on the supplied parameters.</returns>
            <requirements>        
            </requirements>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.OracleCacheDependency.#ctor(System.String,System.String,Alachisoft.NCache.Runtime.Dependencies.OracleCommandType,System.Collections.Generic.Dictionary{System.String,Alachisoft.NCache.Runtime.Dependencies.OracleCmdParams})">
            <summary>
            Initializes a new instance of the OracleCacheDependency class. 
            It supports the use of stored procedures.
            </summary>
            <remarks>
            This constructor is used to create OracleCacheDependency objects that use the 
            query-notification feature of Oracle products. 
            <para>
            Query must include the
            fully qualified table names, including the name of the table owner. 
            For example, to refer to a table called "customers" that is owned by the database owner, 
            the statement must refer to "dbo.customers".
            </para>
            </remarks>
            <param name="connectionString">Connection string to be used by dependency.</param>
            <param name="cmdText">SQL statement, table name or stored procedure to execute on the data source.</param>
            <param name="cmdType">The type of the command (text/stored procedures).</param>
            <param name="cmdParams">Parameters to be passed to the command.</param>
            <returns>A OracleCacheDependency object based on the supplied parameters.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Dependencies.SqlCacheDependency">
            <summary>
            Establishes a relationship between an item stored in an application's cache object 
            and either a row in a specific SQL Server database table or 
            the results of a SQL Server 2005 query.
            </summary>
            <remarks>
            You can add items with dependencies to your application's cache with the specific overloads of
            Add and Insert methods.
            <para>When you add an item to an application's cache object with 
            <see cref="T:Alachisoft.NCache.Runtime.Dependencies.SqlCacheDependency"/>, on all supported versions of SQL Server (7.0, 2000, 2005), it monitors a 
            row in a specific SQL Server database table so that when that row changes, items associated with 
            the row will be automatically removed from the cache.  
            This helps you to avoid losing changes made to the object between the time it is created and the 
            time it is inserted into the cache. 
            <see cref="T:Alachisoft.NCache.Runtime.Dependencies.SqlCacheDependency"/> class supports the association of cached items with an 
            SQL Server query when SQL Server 2005 is used. 
            </para>
            </remarks>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.SqlCacheDependency.ConnectionString">
            <summary>
            The connection string that is required to the cache in order to connect with database.
            </summary>
            <returns>Connection String.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.SqlCacheDependency.CommandText">
            <summary>
            SQL statement, table name or stored procedure to be executed on the data source.
            </summary>
            <returns>Command Text.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.SqlCacheDependency.CommandType">
            <summary>
            Describes the type of the SQL command passed to the SQLDependency.
            </summary>
            <returns>Type of SQL command.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Dependencies.SqlCacheDependency.CommandParams">
            <summary>
            Parameters to be used by the dependency.
            </summary>
            <returns>Dictionary with string type of keys and SqlCommand type values holding the information about the type and value of the parameters passed to the command.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.SqlCacheDependency.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the SqlCacheDependency class, 
            using the supplied connection string and query string.
            </summary>
            <remarks>
            This constructor is used to create SqlCacheDependency objects that use the 
            query-notification feature of SQL Server 2005 products. 
            <para>
            SQL query must include the following:
            <list type="ul">
            <item>
            Fully qualified table names, including the name of the table owner. 
            For example, to refer to a table called "customers" that is owned by the database owner, 
            the SQL statement must refer to "dbo.customers".
            </item>
            <item>
            Explicit column names in the Select statement. 
            You cannot use the asterisk (*) wildcard character to select all columns from a table. 
            For example, instead of "select * from customers", you must use 
            "select name, address, city, state from dbo.customers".
            </item>
            </list>
            </para>
            </remarks>
            <param name="connectionString">Connection string to be used by the dependency.</param>
            <param name="cmdText">SQL statement, table name or stored procedure to execute at the data source.</param>
            <returns>A SqlCacheDependency object based on the supplied parameters.</returns>
            <requirements>
            <constraint>This member is only available with .NET 2.0 framework.</constraint> 
            </requirements>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Dependencies.SqlCacheDependency.#ctor(System.String,System.String,Alachisoft.NCache.Runtime.Dependencies.SqlCommandType,System.Collections.Generic.Dictionary{System.String,Alachisoft.NCache.Runtime.Dependencies.SqlCmdParams})">
            <summary>
            Initializes a new instance of the SqlCacheDependency class. 
            It supports the use of 'Stored Procedures'.
            </summary>
            <remarks>
            This constructor is used to create SqlCacheDependency objects that use the 
            query-notification feature of SQL Server 2005 products. 
            <para>
            SQL query must include the following:
            1. Fully qualified table names, including the name of the table owner. 
            For example, to refer to a table called "customers" that is owned by the database owner, 
            the SQL statement must refer to "dbo.customers".
            2. Explicit column names in the Select statement. 
            You cannot use the asterisk (*) wildcard character to select all columns from a table. 
            For example, instead of "select * from customers", you must use 
            "select name, address, city, state from dbo.customers".
            </para>
            </remarks>
            <param name="connectionString">Connection string to be used by the dependency.</param>
            <param name="cmdText">SQL statement, table name or stored procedure to execute on the data source.</param>
            <param name="cmdType">The type of the command (text/stored procedure).</param>
            <param name="cmdParams">Parameters to be passed to the command.</param>
            <returns>A SqlCacheDependency object based on the supplied parameters.</returns>
            <requirements>
            <constraint>This member is only available with .NET 2.0 framework.</constraint> 
            </requirements>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Encryption.IEncryption">
            <summary>
            Interface for implementing encryption.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Encryption.IEncryption.Intialize(System.Collections.IDictionary)">
            <summary>
            Perform tasks like allocating resources or acquiring connections etc.
            </summary>
            <param name="parameters">Startup parameters defined in the configuration</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Encryption.IEncryption.Encrypt(System.Byte[],System.String)">
            <summary>
            Responsible for encrypting serialized data
            </summary>
            <param name="data">Bytes to be encrypted</param>
            <returns>encrypted Bytes to be stored in cache</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Encryption.IEncryption.Decrypt(System.Byte[],System.String)">
            <summary>
            Responsible for decrypting data stored in cache Server
            </summary>
            <param name="data">decrypted data to be in deserialized form</param>
            <returns>bytes to be deserialized</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Events.CallbackType">
            <summary>
            Type of Notification that can be either PushBased or PullBased
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Events.CallbackType.PushBasedNotification">
            <summary>
            When server pushes notification as soon as item is changed
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Events.CallbackType.PullBasedCallback">
            <summary>
            When Client polls after specified interval for item change
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Events.DataTypeDataNotificationCallback">
             <summary>
             Defines a callback method for notifying applications when a distributed 
             collection is updated in the cache.
             </summary>
             <param name="collectionName">The name of collection used to reference it.</param>
             <param name="collectionEventArgs">The collection event arguments.</param>
             <remarks>Since this handler is invoked every time a distributed collection is updated in the cache, doing a lot
             of processing inside the handler might have an impact on the performance of the cache and cluster. It is therefore, 
             advisable to do minimal processing inside the handler.
             </remarks>
             <example>The following example demonstrates how to use the <see cref="T:Alachisoft.NCache.Runtime.Events.DataTypeDataNotificationCallback"/> class to 
             notify an application when a collection is updated to the application's cache object. You can include this code in 
             a code declaration block in the Web Forms page, or in a page code-behind file.
             <code>
             
            	public static void OnCollectionDataModification(string collectionName, CollectionEventArg collectionEventArgs)
             {
                  //
             }
            
            	protected void Application_Start(object sender, EventArgs e)
            	{
            		try
            		{
            			NCache.InitializeCache("demoClusteredCache");
            			CollectionDataNotificationCallback callback = new CollectionDataNotificationCallback(OnCacheDataModification);
            		}
            		catch(Exception e)
            		{
            		}
            	}
            	
             </code>
             </example>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Events.DataTypeEventArg">
            <summary>
            This object is received when a collection event is raised and a delegate 
            <see cref="T:Alachisoft.NCache.Runtime.Events.DataTypeDataNotificationCallback"/> is executed. This class 
            contains necessary information to identify the event and perform necessary 
            actions accordingly.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Events.DataTypeEventArg.CacheName">
            <summary>
            Name of the cache the collection event is registered against.
            </summary>
            <returns>Name of the cache.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Events.DataTypeEventArg.CollectionItem">
            <summary>
            Contains the current value if collection event was registered against 
            <see cref="F:Alachisoft.NCache.Runtime.Events.DataTypeEventDataFilter.Data"/>.
            </summary>
            <returns>Actually affected item.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Events.DataTypeEventArg.OldCollectionItem">
            <summary>
            Contains the previous value if the collection event was registered against 
            <see cref="F:Alachisoft.NCache.Runtime.Events.DataTypeEventDataFilter.Data"/>.
            </summary>
            <returns> Old object on which the event has occurred.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Events.DataTypeEventArg.EventType">
            <summary>
            This property specifies the type of event to be registered by the user. Event types are specified at the time of notification registration.
            </summary> 
            <returns>
            Returns an EventType enum which specifies the type of event to be registered by the user. Event types are specified at the time of notification registration.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Events.DataTypeEventArg.CollectionType">
            <summary>
            The type of collection, pertaining to <see cref="T:Alachisoft.NCache.Runtime.Caching.DistributedDataType"/>, 
            returned on the fire of a collection event.
            </summary>
            <returns>Enum that defines the data type.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Events.DataTypeEventArg.#ctor(System.String,Alachisoft.NCache.Runtime.Events.EventType,Alachisoft.NCache.Runtime.Caching.DistributedDataType,System.Object,System.Object)">
            <summary>
            Constructor that initializes all the properties of the class DataTypeEventArg.
            </summary>
            <param name="cacheName">Name of cache, the collection event is to be registered against.</param>
            <param name="eventType"> Unique, user specified key attribute for the item added to NCache on client registration. Event key is specific to the application. Each client of the application will use the same event key while calling NCache's extension method.</param>
            <param name="dataType">The type of collection, pertaining to <see cref="T:Alachisoft.NCache.Runtime.Caching.DistributedDataType"/>, 
            to be returned on the fire of a collection event.</param>
            <param name="dataTypeItem">Value of collection item if the respective filter is set.</param>
            <param name="oldDataTypeItem">Old value of collection item if the respective filter is set.</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Events.DataTypeEventDataFilter">
            <summary>
            The DataTypeEventDataFilter enum in NCache is used to specify the type of events that the user wants to receive from the cache. 
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Events.DataTypeEventDataFilter.None">
            <summary>
            Specifies that no events of any data type should be filtered.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Events.DataTypeEventDataFilter.Data">
            <summary>
            Specifies that events related to data operations (such as Add, Insert, Update, and Remove) should be filtered.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Events.EventDataFilter">
            <summary>
            NCache provides an enum EventDataFilter to specify how much data should be retrieved from the cache, and when a notification is raised. This is specified when a user registers a notification.
            </summary>
            <remarks>
            Only one type of data filter can be specified at the time of registration. 
            </remarks>
            <example>
            To get the complete data with the meta data whenever a notification is raised, you can use the following code:
            <code>
            cache.MessagingService.RegisterCacheNotification(key, onCacheDataModifiedCallback, EventType.ItemAdded | EventType.ItemRemoved, EventDataFilter.DataWithMetadata);
            </code>
            </example>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Events.EventDataFilter.None">
            <summary>
            This specifies that no data or meta data is required when an event notification is raised.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Events.EventDataFilter.Metadata">
            <summary>
            This specifies that only meta data of the cache item is required when an event notification is raised.
            The meta data includes information like groups, subgroups, cacheItemPriority, item version, etc.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Events.EventDataFilter.DataWithMetadata">
            <summary>
            This specifies that the value of the cache item is required along with all the meta data when an event notification is raised. 
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Events.EventType">
            <summary>
            Returns an EventType enum which specifies the type of event to be registered by the user. Event types are specified at the time of notification registration.
            </summary>
            <remarks>
            One or more event types can be specified. 
            </remarks>
            <example>
            To specify multiple events at the time of event registration, you can use the following code:
            <code>
            cache.MessagingService.RegisterCacheNotification(key, onCacheDataModifiedCallback, EventType.ItemAdded | EventType.ItemRemoved, EventDataFilter.DataWithMetadata);
            </code>
            </example>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Events.EventType.ItemAdded">
            <summary>
            User receives a notification when an item is added in the cache.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Events.EventType.ItemUpdated">
            <summary>
             User receives a notification when an item is updated in the cache.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.Events.EventType.ItemRemoved">
            <summary>
            User receives a notification when an item is removed from the cache
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.GenericTypesProvider.IGenericTypeProvider">
            <summary>
            This interface must be implemented by the component that wants to provide 
            generic types for multiple parameters.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.GenericTypesProvider.IGenericTypeProvider.GetGenericTypes">
            <summary>
            Client has to provide the implementation of this method, and has to fill the array with the desired generic types and return it back.
            </summary>
            <returns>Represents type declarations.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.GenericTypesProvider.IGenericTypeProvider.CheckIfSerializable(System.Type,System.Reflection.FieldInfo)">
            <summary>
            Provide custom implementation of this method to return true or false on the basis of whether you want to serialize the specific FieldInfo of specific type.
            </summary>
            <param name="fieldInfo">Describes the attributes of a field and provides access to field metadata.</param>
            <param name="type">Represents type declarations.</param>
            <returns>Boolean value, true or false.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.JSON.IJsonArray">
            <summary>
            Interface that is used for the custom implementation of JSON Array type to be used in NCache.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.JSON.IJsonArray.Item(System.Int32)">
            <summary>
            Indexer for the JSON array.
            </summary>
            <param name="index">Index of the JSON value.</param>
            <returns>JSON value on that index.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.IJsonArray.Add(Alachisoft.NCache.Runtime.JSON.JsonValue)">
            <summary>
            Adds item to the JSON Array.
            </summary>
            <param name="item">Item to be added.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.IJsonArray.Remove(Alachisoft.NCache.Runtime.JSON.JsonValue)">
            <summary>
            Removes item from the JSON Array.
            </summary>
            <param name="item">Item to be removed.</param>
            <returns>True, if removed successfully.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.IJsonArray.Contains(Alachisoft.NCache.Runtime.JSON.JsonValue)">
            <summary>
            Checks if the item exists in the JSON array.
            </summary>
            <param name="item">Value to check.</param>
            <returns>True, in case array contains the item.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.JSON.IJsonObject">
            <summary>
            Interface that is used for the custom implementation of the JSON Object type to be used in NCache.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.JSON.IJsonObject.Item(System.String)">
            <summary>
            Key based indexer for JSON Object. 
            </summary>
            <param name="attributeName">Key for indexing.</param>
            <returns>Value associated with the attribute name.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.JSON.IJsonObject.Count">
            <summary>
            Number of items in the collection.
            </summary>
            <returns>Number of items.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.IJsonObject.Clear">
            <summary>
            Clears all the items in the JSONObject and brings the count of attributes to 0.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.IJsonObject.AddAttribute(System.String,Alachisoft.NCache.Runtime.JSON.JsonValue)">
            <summary>
            Adds JSONValue object with the unique attribute name.
            </summary>
            <param name="attributeName">Key against which JSONValue is identified.</param>
            <param name="attributeValue">JSONValue to be added.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.IJsonObject.AddAttribute(System.String,Alachisoft.NCache.Runtime.JSON.JsonValueBase)">
            <summary>
            Adds JSONValueBase object with the unique attribute name.
            </summary>
            <param name="attributeName">Key against which JSONValueBase is identified.</param>
            <param name="attributeValue">JSONValueBase to be added.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.IJsonObject.GetAttributeNames">
            <summary>
            Gets all the attribute names.
            </summary>
            <returns>System.Collections.Generic.ICollection<string> which contains all the keys.</string></returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.IJsonObject.RemoveAttribute(System.String)">
            <summary>
            Removes the attribute entry identified by the attribute name.
            </summary>
            <param name="attributeName">Unique key that identifies the attribute.</param>
            <returns>True, if attribute removed successfully.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.IJsonObject.ContainsAttribute(System.String)">
            <summary>
            Checks if any entry exits against attribute name.
            </summary>
            <param name="attributeName">Key to search in the JSONObject.</param>
            <returns>True, if the key exists.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.IJsonObject.GetAttributeValue(System.String)">
            <summary>
            Gets attribute against the specified attribute name.
            </summary>
            <param name="attributeName">Key that identifies the JSONObject.</param>
            <returns>JSONObject against the key specified if exits.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.JSON.JsonArray">
            <summary>
            This class represents JArray in JSON standards.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.JSON.JsonArray.Item(System.Int32)">
            <summary>
            Indexer for the JSON Arary.
            </summary>
            <param name="index">Index of the item.</param>
            <returns>JSON value on that index.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.JSON.JsonArray.Count">
            <summary>
            This property gets total items in array.
            </summary>
            <returns>Number of items in array.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.JSON.JsonArray.Value">
            <summary>
            This property initializes JSONArray instance.
            </summary>
            <returns>Value of JSONArray instance.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.JSON.JsonArray.Size">
            <summary>
            This property gets the size of the JSONArray.
            </summary>
            <returns>Size of the JSONArray.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.JSON.JsonArray.InMemorySize">
            <summary>
            This property gets memory size of the JSONArray.
            </summary>
            <returns>Size of the memory.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonArray.#ctor">
            <summary>
            The default constructor of class JsonArray.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonArray.#ctor(System.String)">
            <summary>
            An overloaded constructor that takes JsonArray object in string format. 
            </summary>
            <param name="json">JSONArray object in string format.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonArray.Add(Alachisoft.NCache.Runtime.JSON.JsonValue)">
            <summary>
            Adds JSONValue item to array.
            </summary>
            <param name="item">JSONValue to be added.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonArray.Add(Alachisoft.NCache.Runtime.JSON.JsonValueBase)">
            <summary>
            Adds JSONValueBase item to array.
            </summary>
            <param name="item">JSONValueBase to be added.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonArray.CopyTo(Alachisoft.NCache.Runtime.JSON.JsonValueBase[],System.Int32)">
            <summary>
            Copies items from provided array starting from a particular array index.
            </summary>
            <param name="array">Array from which the items have to be copied.</param>
            <param name="arrayIndex">Starting index of the array from which to start copying.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonArray.Remove(Alachisoft.NCache.Runtime.JSON.JsonValue)">
            <summary>
            Removes JSONValue item from array.
            </summary>
            <param name="item">Item to be removed.</param>
            <returns>True, if item exists and is removed successfully.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonArray.Remove(Alachisoft.NCache.Runtime.JSON.JsonValueBase)">
            <summary>
            Removes JsonValueBase item from array.
            </summary>
            <param name="item">Item to be removed.</param>
            <returns>True, if item exists and is removed successfully.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonArray.Contains(Alachisoft.NCache.Runtime.JSON.JsonValue)">
            <summary>
            Checks if a JSONValue item exits in array.
            </summary>
            <param name="item">Item to be found.</param>
            <returns>True, if exits.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonArray.Contains(Alachisoft.NCache.Runtime.JSON.JsonValueBase)">
            <summary>
            Checks if a JsonValueBase item exits in array.
            </summary>
            <param name="item">Item to be found.</param>
            <returns>True, if exits.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonArray.Clear">
            <summary>
            Clears all array items and brings count to 0.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonArray.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through JSONArray items.
            </summary>
            <returns>Enumerator that iterates through JSONArray items. </returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonArray.Equals(System.Object)">
            <summary>
            Checks if an object is equal to this instance of JSONArray.
            </summary>
            <param name="obj">An object of the ultimate base class of all classes in the .NET Framework; it is the root of the type hierarchy.</param>
            <returns>An object of the ultimate base class of all classes in the .NET Framework.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonArray.ToString">
            <summary>
            Returns JSONArray in string representation.
            </summary>
            <returns>JSONArray in string representation.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.JSON.JsonConstants">
            <summary>
            Utility class for JSON.  
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.JSON.JsonConstants.SerializedDateTimeFormat">
            <summary>
            Standard DateTime format to be used for all JSON based implementations used for serializing and deserializing DateTime.
            </summary>
            <returns>Provides information about a specific culture including names for the culture, the writing system, the calendar used, the sort order of strings, and formatting for dates and numbers. </returns>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.JSON.JsonConstants.SerializedDateTimeCulture">
            <summary>
            Standard DateTimeCulture format to be used for all JSON based implementations used for serializing and deserializing DateTimeCulture.
            </summary>
            <returns>DateTimeFormat.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.JSON.JsonNull">
            <summary>
            Represents Null value in JSON standards.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonNull.#ctor">
            <summary>
            The default constructor of class JsonNull.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonNull.ToString">
            <summary>
            String representation of JsonNull object.
            </summary>
            <returns>String representation of JsonNull object.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonNull.Equals(System.Object)">
            <summary>
            Checks if the obj is equal to JsonNull object.
            </summary>
            <param name="obj">Object to be compared.</param>
            <returns>True, if object is JsonNull.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.JSON.JsonObject">
            <summary>
            Class represents JObject in JSON standards.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.JSON.JsonObject.Type">
            <summary>
            Type of the Json object.
            </summary>
            <returns>Type of the Json object.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.JSON.JsonObject.Item(System.String)">
            <summary>
            Iterates over attributes in JSONObject.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <returns>An abstract class which acts as the base class for all JSON based types in NCache.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.JSON.JsonObject.Count">
            <summary>
            Number of attributes in object.
            </summary>
            <returns> Number of attributes.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.JSON.JsonObject.Value">
            <summary>
            Returns instance of this object.
            </summary>
            <returns>An instance of this object.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.JSON.JsonObject.Size">
            <summary>
            Size of the JSONObject.
            </summary>
            <returns>Size of the JSONObject.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.JSON.JsonObject.InMemorySize">
            <summary>
            In memory size of the JSONObject.
            </summary>
            <returns>In memory size of the JSONObject.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonObject.#ctor">
            <summary>
            The default constructor of class JsonObject.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonObject.#ctor(System.String)">
            <summary>
            An Overloaded constructor that populates attributes by parsing given JSONObject string.
            </summary>
            <param name="json">String representation of JSONObject.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonObject.#ctor(System.String,System.String)">
            <summary>
            Overloaded constructor which populates attributes by parsing given JSONObject string and Type. 
            </summary>
            <param name="json">String representation of JSONObject.</param>
            <param name="type">Type of the JSONObject.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonObject.GetAttributeNames">
            <summary>
            Retruns collection of all the attribute names.
            </summary>
            <returns>Collection of all the attribute names.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonObject.AddAttribute(System.String,Alachisoft.NCache.Runtime.JSON.JsonValue)">
            <summary>
            Adds an attribute in the object.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="attributeValue">JSONValue as the attribute value.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonObject.AddAttribute(System.String,Alachisoft.NCache.Runtime.JSON.JsonValueBase)">
            <summary>
            Adds an attribute in the object.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="attributeValue">JsonValueBase as the attribute value.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonObject.RemoveAttribute(System.String)">
            <summary>
            Removes attribute from object on the basis of attribute name provided.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <returns>True, if exists and removed succcessfully.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonObject.GetAttributeValue(System.String)">
            <summary>
            Gets attribute value identified by the attribute name.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <returns>Null, if doesn't exist.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonObject.ContainsAttribute(System.String)">
            <summary>
            Checks if the attribute exits. 
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <returns>True, if attribute exists.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonObject.Clear">
            <summary>
            Removes all attributes from JSONObject.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonObject.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through JSONObject attributes.
            </summary>
            <returns>An enumerator that iterates through JSONObject attributes.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonObject.Equals(System.Object)">
            <summary>
            Checks if an object is equal to the existing instance of JSONObject.
            </summary>
            <param name="obj">An object to be compared.</param>
            <returns>Boolean value true or false.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonObject.ToString">
            <summary>
            Returns JSONObject in string representation.
            </summary>
            <returns>JSONObject in string representation.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.JSON.JsonValue">
            <summary>
            Maps values other than the JObject and JArray in JSON standards to primitive value types.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.ToBoolean">
            <summary>
            Attempts to convert JSON value to boolean.
            </summary>
            <returns>Converted boolean value.</returns>
            <exception cref="T:System.FormatException"> The exception that is thrown when the format of an argument is invalid, or when a composite format string is not well formed.</exception> 
            <exception cref="T:System.InvalidCastException"> The exception that is thrown for invalid casting or explicit conversion.</exception>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.ToByte">
            <summary>
            Attempts to convert JSON value to byte.
            </summary>
            <returns>Converted byte value.</returns>
            <exception cref="T:System.FormatException">The exception that is thrown when the format of an argument is invalid, or when a composite format string is not well formed.</exception>
            <exception cref="T:System.InvalidCastException">The exception that is thrown for invalid casting or explicit conversion.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.ToSByte">
            <summary>
            Attempts to convert JSON value to sbyte.
            </summary>
            <returns>Converted sbyte value.</returns>
            <exception cref="T:System.FormatException">The exception that is thrown when the format of an argument is invalid, or when a composite format string is not well formed.</exception>
            <exception cref="T:System.InvalidCastException"> The exception that is thrown for invalid casting or explicit conversion.</exception>
            <exception cref="T:System.OverflowException"> The exception that is thrown when an arithmetic, casting, or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.ToInt16">
            <summary>
            Attempts to convert JSON value to short.
            </summary>
            <returns>Converted short value.</returns>
            <exception cref="T:System.FormatException">The exception that is thrown when the format of an argument is invalid, or when a composite format string is not well formed.</exception>
            <exception cref="T:System.InvalidCastException">The exception that is thrown for invalid casting or explicit conversion.</exception>
            <exception cref="T:System.OverflowException"> The exception that is thrown when an arithmetic, casting, or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.ToUInt16">
            <summary>
            Attempts to convert JSON value to unsigned int 16.
            </summary>
            <exception cref="T:System.FormatException">The exception that is thrown when the format of an argument is invalid, or when a composite format string is not well formed.</exception>
            <exception cref="T:System.InvalidCastException">The exception that is thrown for invalid casting or explicit conversion.</exception>
            <exception cref="T:System.OverflowException"> The exception that is thrown when an arithmetic, casting, or conversion operation in a checked context results in an overflow.</exception>
            <returns>Converted ushort value.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.ToInt32">
            <summary>
            Attempts to convert JSON value to int 32.
            </summary>
            <returns>Converted int value.</returns>
            <exception cref="T:System.FormatException">The exception that is thrown when the format of an argument is invalid, or when a composite format string is not well formed.</exception>
            <exception cref="T:System.InvalidCastException">The exception that is thrown for invalid casting or explicit conversion.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.ToUInt32">
            <summary>
            Attempts to convert JSON value to unsigned int 32.
            </summary>
            <returns>Converted ushort value.</returns>
            <exception cref="T:System.FormatException">The exception that is thrown when the format of an argument is invalid, or when a composite format string is not well formed.</exception>
            <exception cref="T:System.InvalidCastException">The exception that is thrown for invalid casting or explicit conversion.</exception>
            <exception cref="T:System.OverflowException"> The exception that is thrown when an arithmetic, casting, or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.ToInt64">
            <summary>
            Attempts to convert JSON value to int 64.
            </summary>
            <returns>Converted long value.</returns>
            <exception cref="T:System.FormatException">The exception that is thrown when the format of an argument is invalid, or when a composite format string is not well formed.</exception>
            <exception cref="T:System.InvalidCastException">The exception that is thrown for invalid casting or explicit conversion.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.ToUInt64">
            <summary>
            Attempts to convert JSON value to unsigned int 64.
            </summary>
            <returns>Converted ulong value.</returns>
            <exception cref="T:System.FormatException"> The exception that is thrown when the format of an argument is invalid, or when a composite format string is not well formed.</exception>
            <exception cref="T:System.InvalidCastException">The exception that is thrown for invalid casting or explicit conversion.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.ToFloat">
            <summary>
            Attempts to convert JSON value to float.
            </summary>
            <returns>Converted float value.</returns>
            <exception cref="T:System.FormatException">The exception that is thrown when the format of an argument is invalid, or when a composite format string is not well formed.</exception>
            <exception cref="T:System.InvalidCastException">The exception that is thrown for invalid casting or explicit conversion.</exception>
            <exception cref="T:System.OverflowException"> The exception that is thrown when an arithmetic, casting, or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.ToDouble">
            <summary>
            Attempts to convert JSON value to double.
            </summary>
            <returns>Converted double value.</returns>
            <exception cref="T:System.FormatException">The exception that is thrown when the format of an argument is invalid, or when a composite format string is not well formed.</exception>
            <exception cref="T:System.InvalidCastException">The exception that is thrown for invalid casting or explicit conversion.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.ToDecimal">
            <summary>
            Attempts to convert JSON value to decimal.
            </summary>
            <returns>Converted decimal value.</returns>
            <exception cref="T:System.FormatException"> The exception that is thrown when the format of an argument is invalid, or when a composite format string is not well formed.</exception>
            <exception cref="T:System.InvalidCastException">The exception that is thrown when an arithmetic, casting, or conversion operation in a checked context results in an overflow.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.ToDateTime">
            <summary>
            Attempts to convert JSON value to DateTime with standard format and culture.
            </summary>
            <returns>
            Converted DateTime value.
            </returns>
            <exception cref="T:System.FormatException">The exception that is thrown when the format of an argument is invalid or when a composite format string is not well formed.</exception>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference (nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.ToDateTime(System.String,System.IFormatProvider)">
            <summary>
            Attempts to convert JSON value to DateTime with provided format.
            </summary>
            <param name="format">DateTime format for conversion.</param>
            <param name="provider">Format control for DateTime.</param>
            <returns>Converted DateTime value.</returns>
            <exception cref="T:System.FormatException"> The exception that is thrown when the format of an argument is invalid, or when a composite format string is not well formed.</exception>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference (nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.ToStringValue">
            <summary>
            Attempts to convert JSON value to string.
            </summary>
            <returns>Converted string value.</returns>
            <exception cref="T:System.FormatException">The exception that is thrown when the format of an argument is invalid, or when a composite format string is not well formed.</exception>
            <exception cref="T:System.InvalidCastException">The exception that is thrown for invalid casting or explicit conversion.</exception>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.Equals(System.Object)">
            <summary>
            Checks if object is equal to JSON value object.
            </summary>
            <param name="obj">Object to be compared.</param>
            <returns>True, if obj is equal to this object.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.ToString">
            <summary>
            Represents in string format.
            </summary>
            <returns>String representation of the object.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.GetHashCode">
            <summary>
            Gets HashCode of the value.
            </summary>
            <returns>Hashcode of value.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.op_Implicit(System.Boolean)~Alachisoft.NCache.Runtime.JSON.JsonValue">
            <summary>
            Implicit operator overload to conveert boolean to JSONValue.
            </summary>
            <param name="value">Boolean value.</param>
            <returns>Json value.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.op_Implicit(System.Byte)~Alachisoft.NCache.Runtime.JSON.JsonValue">
            <summary>
            Implicit operator overload to convert byte to JSONValue.
            </summary>
            <param name="value">Byte value.</param>
            <returns>Json value.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.op_Implicit(System.SByte)~Alachisoft.NCache.Runtime.JSON.JsonValue">
            <summary>
            Implicit operator overload to convert sbyte to JSONValue.
            </summary>
            <param name="value">Sbyte value.</param>
            <returns>Json value.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.op_Implicit(System.Int16)~Alachisoft.NCache.Runtime.JSON.JsonValue">
            <summary>
            Implicit operator overload to convert short to JSONValue.
            </summary>
            <param name="value">Short value.</param>
            <returns>Json value.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.op_Implicit(System.UInt16)~Alachisoft.NCache.Runtime.JSON.JsonValue">
            <summary>
            Implicit operator overload to convert ushort to JSONValue.
            </summary>
            <param name="value">ushort value.</param>
            <returns>Json value.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.op_Implicit(System.Int32)~Alachisoft.NCache.Runtime.JSON.JsonValue">
            <summary>
            Implicit operator overload to convert int to JSONValue.
            </summary>
            <param name="value">int value.</param>
            <returns>Json value.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.op_Implicit(System.UInt32)~Alachisoft.NCache.Runtime.JSON.JsonValue">
            <summary>
            Implicit operator overload to convert uint to JSONValue.
            </summary>
            <param name="value">uint value.</param>
            <returns>Json value.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.op_Implicit(System.Int64)~Alachisoft.NCache.Runtime.JSON.JsonValue">
            <summary>
            Implicit operator overload to convert long to JSONValue.
            </summary>
            <param name="value">long value.</param>
            <returns>Json value.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.op_Implicit(System.UInt64)~Alachisoft.NCache.Runtime.JSON.JsonValue">
            <summary>
            Implicit operator overload to convert ulong to JSONValue
            </summary>
            <param name="value">ulong value.</param>
            <returns>Json value.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.op_Implicit(System.Single)~Alachisoft.NCache.Runtime.JSON.JsonValue">
            <summary>
            Implicit operator overload to convert float to JSONValue.
            </summary>
            <param name="value">float value.</param>
            <returns>Json value.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.op_Implicit(System.Double)~Alachisoft.NCache.Runtime.JSON.JsonValue">
            <summary>
            Implicit operator overload to convert double to JSONValue.
            </summary>
            <param name="value">Double value.</param>
            <returns>Json value.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.op_Implicit(System.Decimal)~Alachisoft.NCache.Runtime.JSON.JsonValue">
            <summary>
            Implicit operator overload to convert decimal to JSONValue.
            </summary>
            <param name="value">Decimal value.</param>
            <returns>Json value.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.op_Implicit(System.DateTime)~Alachisoft.NCache.Runtime.JSON.JsonValue">
            <summary>
            Implicit operator overload to conert  DateTime to JSONValue with standard format and culture.
            </summary>
            <param name="value">DateTime value.</param>
            <returns>Json value.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.op_Implicit(System.Numerics.BigInteger)~Alachisoft.NCache.Runtime.JSON.JsonValue">
            <summary>
            Implicit operator overload to convert BigInteger to JSONValue. 
            </summary>
            <param name="value">BigInteger value.</param>
            <returns>Json value.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValue.op_Explicit(System.String)~Alachisoft.NCache.Runtime.JSON.JsonValue">
            <summary>
            Explicit operator overload to convert string to JSONValue.
            </summary>
            <param name="value"> string value.</param>
            <returns>Json value.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.JSON.JsonValueBase">
            <summary>
            Abstract class which acts as the base class for all JSON based types in NCache.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.JSON.JsonValueBase.Size">
            <summary>
            Size of the object.
            </summary>
            <returns>Size of the object.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.JSON.JsonValueBase.InMemorySize">
            <summary>
            In memory size of the object.
            </summary>
            <returns>In memory size of the object.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.JSON.JsonValueBase.DataType">
            <summary>
            Type of the JSON object.
            </summary>
            <returns>Type of data contained by the Json class.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.JSON.JsonValueBase.Value">
            <summary>
            Value of the object.
            </summary>
            <returns>Value of the object.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValueBase.#ctor">
            <summary>
             The default constructor of class JsonValueBase.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValueBase.#ctor(System.Object,Alachisoft.NCache.Runtime.Enum.JsonDataType)">
            <summary>
            An overloaded constructor which pass the value to JSONDataType provided.
            </summary>
            <param name="value">Object to be passed.</param>
            <param name="dataType">Type of the data contained by the Json class.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValueBase.Parse(System.String)">
            <summary>
            Parses string representation of Json object and returns the parsed object.
            </summary>
            <param name="json">Type of Json.</param>
            <returns>An abstract class which acts as the base class for all JSON based types in NCache.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValueBase.op_Implicit(System.Boolean)~Alachisoft.NCache.Runtime.JSON.JsonValueBase">
            <summary>
            This operator implicitly converts Boolean value to JsonValueBase.
            </summary>
            <returns>Abstract class which acts as the base class for all JSON based types in NCache.</returns>
            <param name="value">Value in JsonValueBase.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValueBase.op_Implicit(System.Byte)~Alachisoft.NCache.Runtime.JSON.JsonValueBase">
            <summary>
            This operator implicitly converts Byte value to JsonValueBase.
            </summary>
            <returns>Abstract class which acts as the base class for all JSON based types in NCache.</returns>
            <param name="value">Value in JsonValueBase.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValueBase.op_Implicit(System.SByte)~Alachisoft.NCache.Runtime.JSON.JsonValueBase">
             <summary>
             This operator implicitly converts SByte value to JsonValueBase.
             </summary>
            <returns>Abstract class which acts as the base class for all JSON based types in NCache.</returns>
             <param name="value">Value in JsonValueBase.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValueBase.op_Implicit(System.Int16)~Alachisoft.NCache.Runtime.JSON.JsonValueBase">
            <summary>
            This operator implicitly converts Int16 value to JsonValueBase.
            </summary>
            <returns>Abstract class which acts as the base class for all JSON based types in NCache.</returns>
            <param name="value">Value in JsonValueBase.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValueBase.op_Implicit(System.UInt16)~Alachisoft.NCache.Runtime.JSON.JsonValueBase">
            <summary>
            This operator implicitly converts UInt16 value to JsonValueBase.
            </summary>
            <returns>Abstract class which acts as the base class for all JSON based types in NCache.</returns>
            <param name="value">Value in JsonValueBase.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValueBase.op_Implicit(System.Int32)~Alachisoft.NCache.Runtime.JSON.JsonValueBase">
            <summary>
            This operator implicitly converts Int32 value to JsonValueBase.
            </summary>
            <returns>Abstract class which acts as the base class for all JSON based types in NCache.</returns>
            <param name="value">Value in JsonValueBase.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValueBase.op_Implicit(System.UInt32)~Alachisoft.NCache.Runtime.JSON.JsonValueBase">
            <summary>
            This operator implicitly converts UInt32 value to JsonValueBase.
            </summary>
            <returns>Abstract class which acts as the base class for all JSON based types in NCache.</returns>
            <param name="value">Value in JsonValueBase.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValueBase.op_Implicit(System.Int64)~Alachisoft.NCache.Runtime.JSON.JsonValueBase">
            <summary>
            This operator implicitly converts Int64 value to JsonValueBase. 
            </summary>
            <returns>Abstract class which acts as the base class for all JSON based types in NCache.</returns>
            <param name="value">Value in JsonValueBase.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValueBase.op_Implicit(System.UInt64)~Alachisoft.NCache.Runtime.JSON.JsonValueBase">
            <summary>
            This operator implicitly converts UInt64 value to JsonValueBase.
            </summary>
            <returns>Abstract class which acts as the base class for all JSON based types in NCache.</returns>
            <param name="value">Value in JsonValueBase.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValueBase.op_Implicit(System.Single)~Alachisoft.NCache.Runtime.JSON.JsonValueBase">
            <summary>
            This operator implicitly converts Single to JsonValueBase.
            </summary>
            <returns>Abstract class which acts as the base class for all JSON based types in NCache.</returns>
            <param name="value">Value in JsonValueBase.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValueBase.op_Implicit(System.Double)~Alachisoft.NCache.Runtime.JSON.JsonValueBase">
            <summary>
            This operator implicitly converts Double to JsonValueBase.
            </summary>
            <returns>Abstract class which acts as the base class for all JSON based types in NCache.</returns>
            <param name="value">Value in JsonValueBase.</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValueBase.op_Implicit(System.Decimal)~Alachisoft.NCache.Runtime.JSON.JsonValueBase">
            <summary>
            This operator implicitly converts Decimal value to JsonValueBase.
            </summary>
            <param name="value">Value in JsonValueBase.</param>
            <returns>Abstract class which acts as the base class for all JSON based types in NCache.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValueBase.op_Implicit(System.DateTime)~Alachisoft.NCache.Runtime.JSON.JsonValueBase">
            <summary>
            This operator implicitly converts DateTime value to JsonValueBase.
            </summary>
            <param name="value">Value in JsonValueBase.</param>
            <returns>Abstract class which acts as the base class for all JSON based types in NCache.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.JsonValueBase.op_Implicit(System.String)~Alachisoft.NCache.Runtime.JSON.JsonValueBase">
            <summary>
            This operator implicitly converts String value to JsonValueBase.
            </summary>
            <returns>Abstract class which acts as the base class for all JSON based types in NCache. </returns>
            <param name="value">Value in JsonValueBase.</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.JSON.PrimaryField">
            <summary>
            Makes a field or property searchable in DataType's item.
            If PrimaryField attribute is provided with any Field then only that Field will be Serialized and sent to NCache Server and search operation will only look up for that specific attribute on the server.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.JSON.PrimaryField.#ctor">
            <summary>
            The default constructor of class PrimaryField.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Processor.EntryProcessorOptions">
            <summary>
            Class that defines Entry Processor options regarding invocation of task.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Processor.EntryProcessorOptions.ProviderName">
            <summary>
            Name of configured entry processor provider
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Processor.EntryProcessorOptions.Args">
            <summary>
            Arguments for the task
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Processor.EntryProcessorOptions.LocationAffinities">
            <summary>
            Optional array of location affinity keys. You may provide the complete key, or just the affinity tag
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Processor.EntryProcessorTaskCallback">
            <summary>
            Users can register a callback on the Entry Processor task that is called when task execution is completed, failed or cancelled with a parameter response that encapsulates status of the task and result (if completed).
            </summary>
            <param name="response">Encapsulates task and result if completed</param>
            <remarks><b>Note:</b> If entry processor call back is registered than GetEntryProcessorTaskResult(taskID) for specific taskID can not be called. </remarks>
            
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Processor.IEntryProcessor">
            <summary>
            EntryProcesser interface to implement the process logic for server.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Processor.IEntryProcessor.Process(Alachisoft.NCache.Runtime.Processor.IMutableEntry,System.Object[])">
             <summary>
             This method will contain the logic to be executed over the cache item(s) on the server side. It takes in an instance of IMutableEntry and an array of parameters. 
             </summary>
             <param name="entry">An instance of IMutableEntry</param>
             <param name="arguments">Array of the parameters for the cache</param>
             <returns>Returns any required results. </returns>
             <example>
             Argument list is optional. 
             Following example demonstrates how to implement ProcessEntry.
             <code>
             public object ProcessEntry(IMutableEntry entry, params object[] arguments)
             {
                 if (entry.Key.Equals("1"))
                 {
                   if (entry.Exists())
                     {
                        entry.Remove();
                        return 0;
                     }
                   else
                     {
                        entry.Remove();
                        return -1;
                     }
                  }
                 else if (entry.Equals("15"))
                 {
                    object value = "Greater Than 10";
                    entry.Value = value;
                    return value;
                 }
            
                return 1;
             }
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Processor.IEntryProcessor.IgnoreLock">
            <summary>
            In case an entry is locked by an application and you wish to run the EntryProcessor over it, you can use this method to ignore the lock and access the entry to execute your method.
            </summary>
            <returns>True or false depending upon the logic.</returns>
            <example>
            Following examples demonstrates how to implement IgnoreLock.
            <code>
            public bool IgnoreLock()
            {
                // implement logic
                 return true;
            }
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Processor.EntryProcessorException">
            <summary>
            This class wraps the exceptions occur during the execution of Entry Processor.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Processor.EntryProcessorException.#ctor">
            <summary>
            Default constructor of class EntryProcessorException to initialize the object of the class.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Processor.EntryProcessorException.#ctor(System.String)">
            <summary>
            Initialize given message as an exception.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Processor.EntryProcessorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initialize an instance of Exception with serialized information.
            </summary>
            <param name="info">Serialized data for which exception is being thrown.</param>
            <param name="context">Contextual information about source or destination. </param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Processor.EntryProcessorException.#ctor(System.String,System.Exception)">
            <summary>
            Initialize inner exception with given explanatory message.
            </summary>
            <param name="message">Message that explains inner exception. </param>
            <param name="innerException">Inner exception thrown i.e NUllRefrenceException</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Processor.EntryProcessorException.#ctor(System.Exception)">
             <summary>
            Initialize  exception and concatenates it with the relevant message. 
             </summary>
             <param name="exception">Inner or external exception. </param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Processor.IEntryProcessorResult">
            <summary>
            Returns updated data or exception after execution of entry processor. 
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Processor.IEntryProcessorResult.Key">
             <summary>
             Returns the cache entry on which the EntryProcessor is executed.
             </summary>
             <example>
             Example prints the key along with result
             <code>
             IEntryProcessorResult result = _cache.Invoke("Product_1", new SampleProcessor());
            
             if (result.IsSuccessful)
             {
                 Console.WriteLine(result.Key + ": " + result.Value as string);
             }
             </code>
             </example>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Processor.IEntryProcessorResult.Value">
             <summary>
             Returns the resultant value after execution.
             </summary>
             <example>
             Example prints result along with key
             <code>
             IEntryProcessorResult result = _cache.Invoke("Product_1", new SampleProcessor());
            
             if (result.IsSuccessful)
             {
                 Console.WriteLine(result.Key + ": " + result.Value as string);
             }
             </code>
             </example>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Processor.IEntryProcessorResult.IsSuccessful">
             <summary>
             	Flag to indicate operation success. If it returns false, the user can create their own logic to handle the EntryProcessorException thrown.
             </summary>
             <example>
             Example prints key and value of the result if processing was successful
             <code>
             IEntryProcessorResult result = _cache.Invoke("Product_1", new SampleProcessor());
            
             if (result.IsSuccessful)
             {
                 Console.WriteLine(result.Key + ": " + result.Value as string);
             }
             </code>
             </example>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Processor.IEntryProcessorResult.Exception">
             <summary>
             If this occurs, no mutations will be made to the cache. Moreover, users can also specify in their logic the cases where they would want the exception to be thrown.
             </summary>
             <example>
             Example prints exception occurred while processing entry
             <code>
             IEntryProcessorResult result = _cache.Invoke("Product_1", new SampleProcessor());
            
             if (!result.IsSuccessful)
             {
                 Console.WriteLine(result.Key + ": " + result.Exception.ToString());
             }
             </code>
             </example>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Processor.IEntryProcessorTaskResult">
            <summary>
            Returns the result of Entry Processor Task result from server.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Runtime.Processor.IEntryProcessorTaskResult.GetCollection" -->
        <member name="M:Alachisoft.NCache.Runtime.Processor.IEntryProcessorTaskResult.Remove">
            <summary>
            Removes the result of the task from store.
            </summary>
            <example>
            <code>
            result.Remove();
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Processor.IEntryProcessorTrackableTask">
            <summary>
            This interface lets you keep track of the progress of the task and its status as the task is executed. And lets you fetch the output of the task.
            <para><b> Note:</b>EntryProcessorTaskCallback() and GetResult() cannot be executed together because GetResult is a blocking call and this combination will throw an exception.</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "E:Alachisoft.NCache.Runtime.Processor.IEntryProcessorTrackableTask.OnTrackableTaskComplete" -->
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Runtime.Processor.IEntryProcessorTrackableTask.GetResult" -->
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Runtime.Processor.IEntryProcessorTrackableTask.GetResult(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "T:Alachisoft.NCache.Runtime.Processor.IMutableEntry" -->
        <member name="P:Alachisoft.NCache.Runtime.Processor.IMutableEntry.Key">
             <summary>
            Gets the key of cache entry on which entry processor has to be executed. 
             </summary>
             <returns>Returns key of the associated cahe entry. </returns>
             <example>
             Example looks for string Product in Key property of Mutable Entry 
             <code>
             if (entry.Exists())
             {
                 if (entry.Key.Contains("Product"))
                 {
                     return "It is a product.";
                 }
                 else
                 {
                     return "Unknown data";
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Processor.IMutableEntry.Exists">
            <summary>
            Checks, if the required key for Entry Processor exists in cache or not.
            </summary>
            <returns>Returns true, if key exists or vice versa.</returns>
            <example>
            Example returns string based on existence of entry to be processed in cache
            <code>
            if (entry.Exists())
            {
                return "Key exists.";
            }
            else
            {
                return "Key does not exist.";
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Processor.IMutableEntry.Remove">
            <summary>
            Removes the key from cache after executing the entry processor.
            </summary>
            <example>
            Example removes entry from cache after processing
            <code>
            if (entry.Key.Contains("Product"))
            {
               entry.Remove();
               return "Removed.";
            }
            </code>
            </example>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Processor.IMutableEntry.Value">
            <summary>
            Sets/Gets data for relevant key. 
            </summary>
            <returns>The data of the relevant key.</returns>
            <example>
            Example get the value of the entry and returns its type
            <code>
            if (entry.Exists())
            {
                return entry.Value.GetType().FullName;
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Processor.IMutableEntry.UnWrap(System.Type)">
            <summary>
            Convert data type of the value.
            </summary>
            <param name="type"> New data Type.</param>
            <returns>Value with updated data type. </returns>
            <example>
            Example unwraps the entry into string and returns
            <code>
            if (entry.Exists())
            {
                return entry.UnWrap(typeof(string));
            }
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter">
            <summary>
            CompactWriter is the  base class for CompactBinaryWriter.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter.WriteObject(System.Object)">
            <summary>
            Writes <paramref name="graph"/> to the current stream and advances the stream position. 
            </summary>
            <param name="graph">Object to write</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter.WriteObjectAs``1(``0)">
            <summary>
            Writes the specified type to the current stream and advances the stream position.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="graph"></param>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter.BaseStream">
            <summary>
            Memory stream on which the bytes are written to
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter.Write(System.Boolean)">
            <summary>
            Writes <paramref name="value"/> to the current stream and advances the stream position. 
            This method writes directly to the underlying stream.
            </summary>
            <param name="value">Object to write</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter.Write(System.Byte)">
            <summary>
            Writes <paramref name="value"/> to the current stream and advances the stream position. 
            This method writes directly to the underlying stream.
            </summary>
            <param name="value">Object to write</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter.Write(System.Char)">
            <summary>
            Writes <paramref name="ch"/> to the current stream and advances the stream position. 
            This method writes directly to the underlying stream.
            </summary>
            <param name="ch">Object to write</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter.Write(System.Int16)">
            <summary>
            Writes <paramref name="value"/> to the current stream and advances the stream position. 
            This method writes directly to the underlying stream.
            </summary>
            <param name="value">Object to write</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter.Write(System.Int32)">
            <summary>
            Writes <paramref name="value"/> to the current stream and advances the stream position. 
            This method writes directly to the underlying stream.
            </summary>
            <param name="value">Object to write</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter.Write(System.Int64)">
            <summary>
            Writes <paramref name="value"/> to the current stream and advances the stream position. 
            This method writes directly to the underlying stream.
            </summary>
            <param name="value">Object to write</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter.Write(System.Decimal)">
            <summary>
            Writes <paramref name="value"/> to the current stream and advances the stream position. 
            This method writes directly to the underlying stream.
            </summary>
            <param name="value">Object to write</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter.Write(System.Single)">
            <summary>
            Writes <paramref name="value"/> to the current stream and advances the stream position. 
            This method writes directly to the underlying stream.
            </summary>
            <param name="value">Object to write</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter.Write(System.Double)">
            <summary>
            Writes <paramref name="value"/> to the current stream and advances the stream position. 
            This method writes directly to the underlying stream.
            </summary>
            <param name="value">Object to write</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter.Write(System.DateTime)">
            <summary>
            Writes <paramref name="value"/> to the current stream and advances the stream position. 
            This method writes directly to the underlying stream.
            </summary>
            <param name="value">Object to write</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter.Write(System.Guid)">
            <summary>
            Writes <paramref name="value"/> to the current stream and advances the stream position. 
            This method writes directly to the underlying stream.
            </summary>
            <param name="value">Object to write</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter.Write(System.Byte[])">
            <summary>
            Writes <paramref name="buffer"/> to the current stream and advances the stream position. 
            This method writes directly to the underlying stream.
            </summary>
            <param name="buffer">Object to write</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter.Write(System.Char[])">
            <summary>
            Writes <paramref name="chars"/> to the current stream and advances the stream position. 
            This method writes directly to the underlying stream.
            </summary>
            <param name="chars">Object to write</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter.Write(System.String)">
            <summary>
            Writes <paramref name="value"/> to the current stream and advances the stream position. 
            This method writes directly to the underlying stream.
            </summary>
            <param name="value">Object to write</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes <paramref name="buffer"/> to the current stream and advances the stream position. 
            This method writes directly to the underlying stream.
            </summary>
            <param name="buffer">buffer to write</param>
            <param name="index">starting position in the buffer</param>
            <param name="count">number of bytes to write</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes <paramref name="chars"/> to the current stream and advances the stream position. 
            This method writes directly to the underlying stream.
            </summary>
            <param name="chars">buffer to write</param>
            <param name="index">starting position in the buffer</param>
            <param name="count">number of bytes to write</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter.Write(System.SByte)">
            <summary>
            Writes <paramref name="value"/> to the current stream and advances the stream position. 
            This method writes directly to the underlying stream.
            </summary>
            <param name="value">Object to write</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter.Write(System.UInt16)">
            <summary>
            Writes <paramref name="value"/> to the current stream and advances the stream position. 
            This method writes directly to the underlying stream.
            </summary>
            <param name="value">Object to write</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter.Write(System.UInt32)">
            <summary>
            Writes <paramref name="value"/> to the current stream and advances the stream position. 
            This method writes directly to the underlying stream.
            </summary>
            <param name="value">Object to write</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter.Write(System.UInt64)">
            <summary>
            Writes <paramref name="value"/> to the current stream and advances the stream position. 
            This method writes directly to the underlying stream.
            </summary>
            <param name="value">Object to write</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader">
            <summary>
            CompactReader is the  base class for CompactBinaryReader.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadObject">
            <summary>
            Reads an object of type <see cref="T:System.Object"/> from the current stream 
            and advances the stream position. 
            </summary>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadObject(System.Object)">
            <summary>
            Reads an object of type <see cref="T:System.Object"/> from the current stream 
            and advances the stream position. 
            </summary>
            <param name="defaultValue">Default value to be used for deserializing old version of the object</param>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadObjectAs``1">
            <summary>
            Reads an object of specified type from the current stream.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.BaseStream">
            <summary>
            Memory stream on which the bytes are read from
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.SkipObject">
            <summary>
            Skips an object of type <see cref="T:System.Object"/> from the current stream 
            and advances the stream position. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.SkipObjectAs``1">
            <summary>
            Skips an object of template type from the current stream and advances the stream position.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadBoolean">
            <summary>
            Reads an object of type <see cref="T:System.Boolean"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadBoolean(System.Boolean)">
            <summary>
            Reads an object of type <see cref="T:System.Boolean"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <param name="defaultValue">Default value to be used for deserializing old version of the object</param>
            <returns>bool read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadByte">
            <summary>
            Reads an object of type <see cref="T:System.Byte"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadByte(System.Byte)">
            <summary>
            Reads an object of type <see cref="T:System.Byte"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <param name="defaultValue">Default value to be used for deserializing old version of the object</param>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadBytes(System.Int32)">
            <summary>
            Reads an object of type <see cref="!:byte[]"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <param name="count">number of bytes read</param>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadBytes(System.Int32,System.Byte[])">
            <summary>
            Reads an object of type <see cref="!:byte[]"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <param name="count">number of bytes read</param>
            <param name="defaultValue">Default value to be used for deserializing old version of the object</param>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadChar">
            <summary>
            Reads an object of type <see cref="T:System.Char"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadChar(System.Char)">
            <summary>
            Reads an object of type <see cref="T:System.Char"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <param name="defaultValue">Default value to be used for deserializing old version of the object</param>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadChars(System.Int32)">
            <summary>
            Reads an object of type <see cref="!:char[]"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadChars(System.Int32,System.Char[])">
            <summary>
            Reads an object of type <see cref="!:char[]"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <param name="defaultValue">Default value to be used for deserializing old version of the object</param>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadDecimal">
            <summary>
            Reads an object of type <see cref="T:System.Decimal"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadDecimal(System.Decimal)">
            <summary>
            Reads an object of type <see cref="T:System.Decimal"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <param name="defaultValue">Default value to be used for deserializing old version of the object</param>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadSingle">
            <summary>
            Reads an object of type <see cref="T:System.Single"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadSingle(System.Single)">
            <summary>
            Reads an object of type <see cref="T:System.Single"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <param name="defaultValue">Default value to be used for deserializing old version of the object</param>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadDouble">
            <summary>
            Reads an object of type <see cref="T:System.Double"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadDouble(System.Double)">
            <summary>
            Reads an object of type <see cref="T:System.Double"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <param name="defaultValue">Default value to be used for deserializing old version of the object</param>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadInt16">
            <summary>
            Reads an object of type <see cref="T:System.Int16"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadInt16(System.Int16)">
            <summary>
            Reads an object of type <see cref="T:System.Int16"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <param name="defaultValue">Default value to be used for deserializing old version of the object</param>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadInt32">
            <summary>
            Reads an object of type <see cref="T:System.Int32"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadInt32(System.Int32)">
            <summary>
            Reads an object of type <see cref="T:System.Int32"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <param name="defaultValue">Default value to be used for deserializing old version of the object</param>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadInt64">
            <summary>
            Reads an object of type <see cref="T:System.Int64"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadInt64(System.Int64)">
            <summary>
            Reads an object of type <see cref="T:System.Int64"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <param name="defaultValue">Default value to be used for deserializing old version of the object</param>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadString">
            <summary>
            Reads an object of type <see cref="T:System.String"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadString(System.String)">
            <summary>
            Reads an object of type <see cref="T:System.String"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <param name="defaultValue">Default value to be used for deserializing old version of the object</param>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadDateTime">
            <summary>
            Reads an object of type <see cref="T:System.DateTime"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadDateTime(System.DateTime)">
            <summary>
            Reads an object of type <see cref="T:System.DateTime"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <param name="defaultValue">Default value to be used for deserializing old version of the object</param>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadGuid">
            <summary>
            Reads an object of type <see cref="T:System.Guid"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadGuid(System.Guid)">
            <summary>
            Reads an object of type <see cref="T:System.Guid"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <param name="defaultValue">Default value to be used for deserializing old version of the object</param>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the specifies number of bytes into <paramref name="buffer"/>.
            This method reads directly from the underlying stream.
            </summary>
            <param name="buffer">buffer to read into</param>
            <param name="index">starting position in the buffer</param>
            <param name="count">number of bytes to write</param>
            <returns>number of buffer read</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads the specifies number of bytes into <paramref name="buffer"/>.
            This method reads directly from the underlying stream.
            </summary>
            <param name="buffer">buffer to read into</param>
            <param name="index">starting position in the buffer</param>
            <param name="count">number of bytes to write</param>
            <returns>number of chars read</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadSByte">
            <summary>
            Reads an object of type <see cref="T:System.SByte"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <returns>object read from the stream</returns>+
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadSByte(System.SByte)">
            <summary>
            Reads an object of type <see cref="T:System.SByte"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <param name="defaultValue">Default value to be used for deserializing old version of the object</param>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadUInt16">
            <summary>
            Reads an object of type <see cref="T:System.UInt16"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadUInt16(System.UInt16)">
            <summary>
            Reads an object of type <see cref="T:System.UInt16"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <param name="defaultValue">Default value to be used for deserializing old version of the object</param>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadUInt32">
            <summary>
            Reads an object of type <see cref="T:System.UInt32"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadUInt32(System.UInt32)">
            <summary>
            Reads an object of type <see cref="T:System.UInt32"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <param name="defaultValue">Default value to be used for deserializing old version of the object</param>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadUInt64">
            <summary>
            Reads an object of type <see cref="T:System.UInt64"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.ReadUInt64(System.UInt64)">
            <summary>
            Reads an object of type <see cref="T:System.UInt64"/> from the current stream 
            and advances the stream position. 
            This method reads directly from the underlying stream.
            </summary>
            <param name="defaultValue">Default value to be used for deserializing old version of the object</param>
            <returns>object read from the stream</returns>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.SkipBoolean">
            <summary>
            Skips an object of type <see cref="T:System.Boolean"/> from the current stream 
            and advances the stream position. 
            This method Skips directly from the underlying stream.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.SkipByte">
            <summary>
            Skips an object of type <see cref="T:System.Byte"/> from the current stream 
            and advances the stream position. 
            This method Skips directly from the underlying stream.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.SkipBytes(System.Int32)">
            <summary>
            Skips an object of type <see cref="!:byte[]"/> from the current stream 
            and advances the stream position. 
            This method Skips directly from the underlying stream.
            </summary>
            <param name="count">number of bytes read</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.SkipChar">
            <summary>
            Skips an object of type <see cref="T:System.Char"/> from the current stream 
            and advances the stream position. 
            This method Skips directly from the underlying stream.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.SkipChars(System.Int32)">
            <summary>
            Skips an object of type <see cref="!:char[]"/> from the current stream 
            and advances the stream position. 
            This method Skips directly from the underlying stream.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.SkipDecimal">
            <summary>
            Skips an object of type <see cref="T:System.Decimal"/> from the current stream 
            and advances the stream position. 
            This method Skips directly from the underlying stream.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.SkipSingle">
            <summary>
            Skips an object of type <see cref="T:System.Single"/> from the current stream 
            and advances the stream position. 
            This method Skips directly from the underlying stream.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.SkipDouble">
            <summary>
            Skips an object of type <see cref="T:System.Double"/> from the current stream 
            and advances the stream position. 
            This method Skips directly from the underlying stream.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.SkipInt16">
            <summary>
            Skips an object of type <see cref="T:System.Int16"/> from the current stream 
            and advances the stream position. 
            This method Skips directly from the underlying stream.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.SkipInt32">
            <summary>
            Skips an object of type <see cref="T:System.Int32"/> from the current stream 
            and advances the stream position. 
            This method Skips directly from the underlying stream.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.SkipInt64">
            <summary>
            Skips an object of type <see cref="T:System.Int64"/> from the current stream 
            and advances the stream position. 
            This method Skips directly from the underlying stream.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.SkipString">
            <summary>
            Skips an object of type <see cref="T:System.String"/> from the current stream 
            and advances the stream position. 
            This method Skips directly from the underlying stream.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.SkipDateTime">
            <summary>
            Skips an object of type <see cref="T:System.DateTime"/> from the current stream 
            and advances the stream position. 
            This method Skips directly from the underlying stream.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.SkipGuid">
            <summary>
            Skips an object of type <see cref="T:System.Guid"/> from the current stream 
            and advances the stream position. 
            This method Skips directly from the underlying stream.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.SkipSByte">
            <summary>
            Skips an object of type <see cref="T:System.SByte"/> from the current stream 
            and advances the stream position. 
            This method Skips directly from the underlying stream.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.SkipUInt16">
            <summary>
            Skips an object of type <see cref="T:System.UInt16"/> from the current stream 
            and advances the stream position. 
            This method Skips directly from the underlying stream.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.SkipUInt32">
            <summary>
            Skips an object of type <see cref="T:System.UInt32"/> from the current stream 
            and advances the stream position. 
            This method Skips directly from the underlying stream.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader.SkipUInt64">
            <summary>
            Skips an object of type <see cref="T:System.UInt64"/> from the current stream 
            and advances the stream position. 
            This method Skips directly from the underlying stream.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Serialization.ICompactSerializable">
            <summary> 
            Implementations of ICompactSerializable can add their state directly to the output stream, 
            enabling them to bypass costly serialization.
            </summary>
            <remarks>
            Objects that implement <see cref="T:Alachisoft.NCache.Runtime.Serialization.ICompactSerializable"/> must have a default 
            constructor (can be private). 
            <para>
            As per current implementation when a <see cref="T:Alachisoft.NCache.Runtime.Serialization.ICompactSerializable"/> is deserialized 
            the default constructor is not invoked, therefore the object must "construct" itself in 
            <see cref="M:Alachisoft.NCache.Runtime.Serialization.ICompactSerializable.Deserialize(Alachisoft.NCache.Runtime.Serialization.IO.CompactReader)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.ICompactSerializable.Deserialize(Alachisoft.NCache.Runtime.Serialization.IO.CompactReader)">
            <summary>
            Load the state from the passed stream reader object.
            </summary>
            <param name="reader"> An object of class <see cref="T:Alachisoft.NCache.Runtime.Serialization.IO.CompactReader"/>. </param>
            <remarks>
            As per current implementation when a <see cref="T:Alachisoft.NCache.Runtime.Serialization.ICompactSerializable"/> is deserialized 
            the default constructor is not invoked, therefore the object must "construct" itself in 
            <see cref="M:Alachisoft.NCache.Runtime.Serialization.ICompactSerializable.Deserialize(Alachisoft.NCache.Runtime.Serialization.IO.CompactReader)"/>.
            </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.ICompactSerializable.Serialize(Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter)">
            <summary>
            Save the state to the passed stream reader object.
            </summary>
            <param name="writer">An object of class <see cref="T:Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter"/>.</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.Serialization.ICustomSerializable">
            <summary> 
            Implementations of ICompactSerializable can add their state directly to the output stream, 
            enabling them to bypass costly serialization.
            </summary>
            <remarks>
            Objects that implement <see cref="T:Alachisoft.NCache.Runtime.Serialization.ICompactSerializable"/> must have a default 
            constructor (can be private). 
            <para>
            As per current implementation when a <see cref="T:Alachisoft.NCache.Runtime.Serialization.ICompactSerializable"/> is deserialized 
            the default constructor is not invoked, therefore the object must "construct" itself in 
            <see cref="M:Alachisoft.NCache.Runtime.Serialization.ICompactSerializable.Deserialize(Alachisoft.NCache.Runtime.Serialization.IO.CompactReader)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.ICustomSerializable.DeserializeLocal(System.IO.BinaryReader)">
            <summary>
            Load the state from the passed stream reader object.
            </summary>
            <param name="reader">A <see cref="T:System.IO.BinaryReader"/> object</param>
            <remarks>
            As per current implementation when a <see cref="T:Alachisoft.NCache.Runtime.Serialization.ICompactSerializable"/> is deserialized 
            the default constructor is not invoked, therefore the object must "construct" itself in 
            <see cref="M:Alachisoft.NCache.Runtime.Serialization.ICompactSerializable.Deserialize(Alachisoft.NCache.Runtime.Serialization.IO.CompactReader)"/>.
            </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.Serialization.ICustomSerializable.SerializeLocal(System.IO.BinaryWriter)">
            <summary>
            Save the state to the passed stream reader object.
            </summary>
            <param name="writer">A <see cref="T:System.IO.BinaryWriter"/> object</param>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Alachisoft.NCache.Runtime.TrackableTask.ITaskResult.TaskStatus" -->
        <member name="P:Alachisoft.NCache.Runtime.TrackableTask.ITaskResult.TaskFailureReason">
            <summary>
            Returns reason behind the failure of task.
            </summary>
            <example>
            Example prints task failure reason
            <code>
            if (result.TaskStatus == TaskCompletionStatus.Failure)
            {
                Console.WriteLine(result.TaskFailureReason);
            }
            </code>
            </example>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.TrackableTask.ITrackableTask.Name">
            <summary>
            Task name set by users implementation. 
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.TrackableTask.ITrackableTask.Id">
             <summary>
             Unique GUID identification of MapReduce task. 
             </summary>
             <example>
             Example prints task id
             <code>
             ITrackableTask taskTracker = cache.ExecuteTask(prodAggregatorTask, new OrderKeyFilter());
            
             Console.WriteLine("Task Id: " + taskTracker.TaskId);
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.TrackableTask.ITrackableTask.Cancel">
             <summary>
             Cancels the already running task.
             </summary>
             <example>
             Example cancels task if it is not completed in 15 seconds
             <code>
             ITrackableTask taskTracker = cache.ExecuteTask(prodAggregatorTask, new OrderKeyFilter());
            
             int count = 0;
             do
             {
                 Thread.Sleep(5000);
                 if (count == 2)
                 {
                     taskTracker.CancelTask();
                     break;
                 }
                 else count++;
             } while (taskTracker.TaskStatus.Progress == Alachisoft.NCache.Runtime.MapReduce.TaskStatus.Status.InProgress);
             </code>
             </example>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.TrackableTask.ITrackableTask.Status">
             <summary>
             Gets the task’s status and contains following values: Waiting, InProgress, Completed, Cancelled, Failed.
             </summary>
             <example>
             Example checks for task status after an interval of 5 seconds
             <code>
             ITrackableTask taskTracker = cache.ExecuteTask(prodAggregatorTask, new OrderKeyFilter());
            
             int count = 0;
             do
             {
                 Thread.Sleep(5000);
                 if (count == 2)
                 {
                     taskTracker.CancelTask();
                     break;
                 }
                 else count++;
             } while (taskTracker.TaskStatus.Progress == Alachisoft.NCache.Runtime.MapReduce.TaskStatus.Status.InProgress);
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.TrackableTask.KeyValuePair.#ctor">
            <summary>
            Default Constructor which initializes a new instance of key-value pair class.
            </summary>
            <example>
            Example creates output map entry instance
            <code>
            public void BeginReduce()
            {
                outputMapEntry = new KeyValuePair();
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.TrackableTask.KeyValuePair.#ctor(System.Object,System.Object)">
             <summary>
             Initialize a new instance of key-value pair class.
             </summary>
             <param name="key">key</param>
             <param name="value">value</param>
             <example>
             Example creates output map entry instance
             <code>
             public KeyValuePair FinishReduce()
             {
                 outputMapEntry = new KeyValuePair(outputKey, count);
                 return outputMapEntry;
            }
             </code>
             </example>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.TrackableTask.KeyValuePair.Value">
            <summary>
            Sets/returns value from intermediate Key-Value pair.
            </summary>
            <example>
            Example sets the value in KeyValuePair
            <code>
            public KeyValuePair FinishReduce()
            {
               outputMapEntry.Key = outputKey;
               outputMapEntry.Value = count;
               return outputMapEntry;
            }
            </code>
            </example>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.TrackableTask.KeyValuePair.Key">
            <summary>
             Sets/returns key from intermediate Key-Value pair.
            </summary>
            <example>
            Example sets the value in KeyValuePair
            <code>
            public KeyValuePair FinishReduce()
            {
               outputMapEntry.Key = outputKey;
               outputMapEntry.Value = count;
               return outputMapEntry;
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.TrackableTask.KeyValuePair.Deserialize(Alachisoft.NCache.Runtime.Serialization.IO.CompactReader)">
            <summary>
            Compact Deserialize key-value pair
            </summary>
            <param name="reader">Compact deserialization instance</param>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.TrackableTask.KeyValuePair.Serialize(Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter)">
            <summary>
            Compact Serialize  key-value pair.
            </summary>
            <param name="writer">Compact serialization instance.</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.TrackableTask.TaskCompletionStatus">
            <summary>
            Gives the status of the completed task. 
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.TrackableTask.TaskCompletionStatus.Success">
            <summary>
            Task has completed successfully. 
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.TrackableTask.TaskCompletionStatus.Failure">
            <summary>
            Task failed as either an exception has been thrown or time out has reached. 
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.TrackableTask.TaskCompletionStatus.Cancelled">
            <summary>
            Task has been canceled.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.TrackableTask.Status.Waiting">
            <summary>
            Task is in waiting queue.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.TrackableTask.Status.InProgress">
            <summary>
            Task is being executed.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.TrackableTask.Status.Completed">
            <summary>
            Task has been completed.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.TrackableTask.Status.Cancelled">
            <summary>
            Task has been canceled.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.TrackableTask.Status.Failed">
            <summary>
            Exception has been thrown or time out has been reached. 
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Runtime.TrackableTask.Status.InStateTransfer">
            <summary>
            Cluster is under state transfer. 
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.TrackableTask.TaskStatus">
            <summary>
             Returns the status of running task. 
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.TrackableTask.TaskStatus.FailureReason">
             <summary>
            Sets/Gets failure reason of the task. 
             </summary>
        </member>
        <member name="P:Alachisoft.NCache.Runtime.TrackableTask.TaskStatus.ExecutionStatus">
            <summary>
            Return task progress in form of status. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Runtime.TrackableTask.TaskStatus.#ctor(Alachisoft.NCache.Runtime.TrackableTask.Status)">
            <summary>
            Return task current status.
            </summary>
            <param name="status">status of the task</param>
        </member>
        <member name="T:Alachisoft.NCache.Runtime.TrackableTask.TrackableTaskInput">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Common.ISizable">
            <summary>
            Interface that defines the size of item
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Common.ISizable.Size">
            <summary>
            Get the size of item
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Common.ISizable.InMemorySize">
            <summary>
            Get the size of memory Consumed by item
            </summary>
        </member>
    </members>
</doc>
