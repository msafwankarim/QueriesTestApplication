<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Alachisoft.NCache.Client</name>
    </assembly>
    <members>
        <member name="T:Alachisoft.NCache.Client.CacheCollection">
            <summary>
            Represents a collection of the caches initialized within the same application domain. 
            </summary>
            <remarks>An instance of this class can not be created. The class implements the IEnumerable 
            interface.
            </remarks>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheCollection.Item(System.String)">
            <summary>
            Gets the Cache instance at the specified key.
            </summary>
            <param name="cacheId">The cache id that uniquely identifies each cache instance</param>
            <returns>Alachisoft.NCache.Client.Caching.Cache instance</returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheCollection.Count">
            <summary>
            The count of the caches contained in the collection.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheCollection.GetEnumerator">
            <summary>
            Returns an <seealso cref="T:System.Collections.IEnumerator"/> which iterates over existent caches
            </summary>
            <returns>An System.Collections.IDictionaryEnumerator for the Alachisoft.NCache.Client.CacheCollection</returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.CacheConnection">
            <summary>
            Instance of this class can be used to define the parameters to establish a connection with the cache.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.CacheConnectionOptions">
            <summary>
            Instance of this class can be used to define the parameters at the time of client connection with the cache.
            </summary>
            <example>
            Following example demonstrates how to use CacheConnectionOptions to get instance of <see cref="T:Alachisoft.NCache.Client.ICache"/> from <see cref="T:Alachisoft.NCache.Client.CacheManager"/>.
            <code>
            CacheConnectionOptions cacheConnectionOptions = new CacheConnectionOptions();
            
            cacheConnectionOptions.LoadBalance = true;
            cacheConnectionOptions.ConnectionRetries = 5;
            cacheConnectionOptions.Mode = IsolationLevel.OutProc;
            cacheConnectionOptions.ClientRequestTimeOut = TimeSpan.FromSeconds(30);
            cacheConnectionOptions.UserCredentials = new Credentials("domain\\user-id", "password");
            cacheConnectionOptions.RetryInterval = TimeSpan.FromSeconds(5);
            cacheConnectionOptions.ServerList = new List&lt;ServerInfo&gt;();
            {
            	new ServerInfo("remoteServer",9800)
            };
            
            ICache cache = CacheManager.GetCache("demoCache", cacheConnectionOptions);
            </code>
            </example>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheConnectionOptions.DefaultReadThruProvider">
            <summary>
            Gets/Sets ID of DefaultReadThruProvider
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheConnectionOptions.DefaultWriteThruProvider">
            <summary>
            Gets/Sets ID of DefaultWriteThruProvider
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheConnectionOptions.ClientCacheMode">
            <summary>
            Gets/Sets <see cref="T:Alachisoft.NCache.Client.ClientCacheSyncMode"/> to specify how the Client cache is synchronized with
            the cluster caches through events. 
            </summary>	
            <returns>
            Synchronization mode for the client and cluster cache.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheConnectionOptions.SkipUnAvailableClientCache">
            <summary>
            Skip clientcahe if not available.
            </summary>
            <returns>
            Specifies a boolean value, either true or false.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheConnectionOptions.RetryL1ConnectionInterval">
            <summary>
            Time in seconds to retry client cache connection.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheConnectionOptions.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.CacheManager">
            <summary>
            Provides and manages the instance of <see cref="T:Alachisoft.NCache.Client.ICache"/>.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheManager.Caches">
            <summary>
            Returns <see cref="T:Alachisoft.NCache.Client.CacheCollection"/> of the caches initialized within the same application domain. 
            </summary>
            <returns>
            A collection of caches initialized within the same application domain.
            </returns> 
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheManager.GetCache(System.String,Alachisoft.NCache.Client.CacheConnectionOptions,System.String,Alachisoft.NCache.Client.CacheConnectionOptions)">
            <summary>
            Returns an instance of <see cref="T:Alachisoft.NCache.Client.ICache"/> for this application.
            </summary>
            <param name="cacheName">The identifier for the <see cref="T:Alachisoft.NCache.Client.ICache"/>.</param>
            <param name="cacheConnectionOptions"><see cref="T:Alachisoft.NCache.Client.CacheConnectionOptions"/> parameters for <see cref="T:Alachisoft.NCache.Client.ICache"/> connection.</param>
            <param name="clientCacheName">The identifier for the ClientCache.</param>
            <param name="clientCacheConnectionOptions"><see cref="T:Alachisoft.NCache.Client.CacheConnectionOptions"/> parameters for ClientCache connection.</param>
            <returns>Instance of <see cref="T:Alachisoft.NCache.Client.ICache"/>.</returns>
            <remarks>
            The <paramref name="clientCacheName"/> parameter represents the registration/config name of the Client Cache (L1 Cache). 
            Depending upon the configuration the <see cref="T:Alachisoft.NCache.Client.ICache"/> object is 
            created InProc or OutProc.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="cacheName"/> is a null reference.</exception>
            <code>
            CacheConnectionOptions cacheConnectionOptions = new CacheConnectionOptions();
            
            cacheConnectionOptions.LoadBalance = true;
            cacheConnectionOptions.ConnectionRetries = 5;
            cacheConnectionOptions.Mode = IsolationLevel.OutProc;
            cacheConnectionOptions.ClientRequestTimeOut = TimeSpan.FromSeconds(30);
            cacheConnectionOptions.UserCredentials = new Credentials("domain\\user-id", "password");
            cacheConnectionOptions.RetryInterval = TimeSpan.FromSeconds(5);
            cacheConnectionOptions.ServerList = new List&lt;ServerInfo&gt;();
            {
            	new ServerInfo("remoteServer",9800)
            };
            
            CacheConnectionOptions clientConnectionOptions = new CacheConnectionOptions();
            clientConnectionOptions.Mode = IsolationLevel.InProc;
            
            ICache cache = CacheManager.GetCache("demoCache", cacheConnectionOptions,"clientCache",clientConnectionOptions);
            </code>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheManager.GetCacheClients(System.String,Alachisoft.NCache.Client.CacheConnection)">
            <summary>
            Gets information of clients connected to each server node in a cache.
            </summary>
            <param name="cacheName">The identifier for the <see cref="T:Alachisoft.NCache.Client.ICache"/>.</param>
            <param name="connection"><see cref="T:Alachisoft.NCache.Client.CacheConnection"/> parameters for connection to cache.</param>
            <returns>Key value pair of <see cref="T:Alachisoft.NCache.Runtime.CacheManagement.ServerNode"/> and list of <see cref="T:Alachisoft.NCache.Runtime.Caching.ClientInfo"/> in a cache. </returns>
            <example>
            The following example shows how to get connected clients to each server node in a cache.
            <code>
            CacheConnection cacheConnection = new CacheConnection("remoteServer", 8250);
            cacheConnection.UserCredentials = new Credentials("domain\\user-id", "password");
            
            Dictionary&lt;ServerNode, List&lt;Alachisoft.NCache.Runtime.Caching.ClientInfo&gt; info = CacheManager.GetCacheClients("demoCache", cacheConnection);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheManager.GetCacheHealth(System.String,Alachisoft.NCache.Client.CacheConnection)">
            <summary>
            Gets Health status of a cache.
            </summary>
            <param name="cacheName">The identifier for the <see cref="T:Alachisoft.NCache.Client.ICache"/>.</param>
            <param name="connection"><see cref="T:Alachisoft.NCache.Client.CacheConnection"/> parameters for connection to cache.</param>
            <returns>
            <see cref="T:Alachisoft.NCache.Runtime.CacheManagement.CacheHealth"/> containing information about cache including <see cref="T:Alachisoft.NCache.Runtime.CacheManagement.NodeStatus"/> for each node in cache.
            </returns>
            <example>
            The following example shows the to Health status of a cache.
            <code>
            CacheConnection cacheConnection = new CacheConnection("remoteServer", 8250);
            cacheConnection.UserCredentials = new Credentials("domain\\user-id", "password");
            
            CacheHealth cacheHealth = CacheManager.GetCacheHealth("demoCache", cacheConnection);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheManager.StartCache(System.String,Alachisoft.NCache.Client.CacheConnection)">
            <summary>
            Starts an OutProc cache. The end result is the same as that of starting the 
            cache using the NCache Manager. It starts the cache on the specified cache server.
            If the Cache Server could not be contacted then it throws a <see cref="T:Alachisoft.NCache.Runtime.Exceptions.ManagementException"/>.
            It tries to get the Security Parameters from the client.ncconf.
            </summary>
            <param name="cacheName">The identifier for the <see cref="T:Alachisoft.NCache.Client.ICache"/>.</param>
            <param name="connection"><see cref="T:Alachisoft.NCache.Client.CacheConnection"/> parameters for connection to cache.</param>
            <example>
            The following example shows to to start a cache from the application.
            <code>
            CacheConnection cacheConnection = new CacheConnection("remoteServer", 8250);
            cacheConnection.UserCredentials = new Credentials("domain\\user-id", "password");
            
            CacheManager.StartCache("demoCache", cacheConnection);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheManager.StopCache(System.String,Alachisoft.NCache.Client.CacheConnection,System.Boolean)">
            <summary>
            Stops an out-proc cache. The end result is the same as that of stoping the 
            cache using NCache Manager. It stops the cache only on the same server where the 
            client application is running.
            If the Cache Server could not be contacted then it throws a <see cref="T:Alachisoft.NCache.Runtime.Exceptions.ManagementException"/> exception.
            It tries to get the Security Parameters from the Client.ncconf.
            </summary>
            <param name="cacheName">The identifier for the <see cref="T:Alachisoft.NCache.Client.ICache"/>.</param>
            <param name="connection"><see cref="T:Alachisoft.NCache.Client.CacheConnection"/> parameters for connection to Cache.</param>
            <param name="gracefullyShutDownNode">The identifier for graceful node shutdown.</param>
            <example>
            The following example show to to stop cache from application.
            <code>
            CacheConnection cacheConnection = new CacheConnection("remoteServer", 8250);
            cacheConnection.UserCredentials = new Credentials("domain\\user-id", "password");
            
            CacheManager.Stop("demoCache", cacheConnection, true);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheManager.StartStore(System.String,Alachisoft.NCache.Client.ConnectionOptions)">
            <summary>
            Starts an out-proc cache. The end result is the same as that of starting the 
            cache using NCache Manager. It starts the cache on the specified cache server.
            If the Cache Server could not be contacted then it throws a <see cref="T:Alachisoft.NCache.Runtime.Exceptions.ManagementException"/> exception.
            It tries to get the Security Parameters from the Client.ncconf.
            </summary>
            <param name="cacheName">The identifier for the <see cref="T:Alachisoft.NCache.Client.ICache"/>.</param>
            <param name="connection"><see cref="T:Alachisoft.NCache.Client.CacheConnection"/> parameters for connection to Cache.</param>
            <example>
            The following example show to to start cache from application.
            <code>
            CacheConnection cacheConnection = new CacheConnection("remoteServer", 8250);
            cacheConnection.UserCredentials = new Credentials("domain\\user-id", "password");
            
            CacheManager.StartStore("demoCache", cacheConnection);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheManager.StopStore(System.String,Alachisoft.NCache.Client.ConnectionOptions,System.Boolean)">
            <summary>
            Stops an OutProc cache. The end result is the same as that of stopping the 
            cache using the NCache Manager. It stops the cache only on the same server where the 
            client application is running.
            If the Cache Server could not be contacted then it throws a <see cref="T:Alachisoft.NCache.Runtime.Exceptions.ManagementException"/>.
            It tries to get the Security Parameters from the client.ncconf.
            </summary>
            <param name="cacheName">The identifier for the <see cref="T:Alachisoft.NCache.Client.ICache"/>.</param>
            <param name="connection"><see cref="T:Alachisoft.NCache.Client.CacheConnection"/> parameters for connection to cache.</param>
            <param name="gracefullyShutDownNode">The identifier for graceful node shutdown.</param>
            <example>
            The following example shows how to stop the cache from application.
            <code>
            CacheConnection cacheConnection = new CacheConnection("remoteServer", 8250);
            cacheConnection.UserCredentials = new Credentials("domain\\user-id", "password");
            
            CacheManager.StopStore("demoCache", cacheConnection, true);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheManager.GetStoreHealth(System.String,Alachisoft.NCache.Client.ConnectionOptions)">
            <summary>
            Get Health status of a cache.
            </summary>
            <param name="cacheName">The identifier for the <see cref="T:Alachisoft.NCache.Client.ICache"/>.</param>
            <param name="connection"><see cref="T:Alachisoft.NCache.Client.CacheConnection"/> parameters for connection to Cache.</param>
            <returns><see cref="T:Alachisoft.NCache.Runtime.CacheManagement.CacheHealth"/> containing information cache including <see cref="T:Alachisoft.NCache.Runtime.CacheManagement.NodeStatus"/> for each node in cache.</returns>
            <example>
            The following example shows the to Health status of a cache.
            <code>
            CacheConnection cacheConnection = new CacheConnection("remoteServer", 8250);
            cacheConnection.UserCredentials = new Credentials("domain\\user-id", "password");
            
            CacheHealth cacheHealth = CacheManager.GetStoreHealth("demoCache",cacheConnection);
            </code>
            </example>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheManager.StoreCollection">
            <summary>
            Returns <see cref="T:Alachisoft.NCache.Client.StoreCollection"/> of the caches initialized within the same application domain. 
            </summary>
            
        </member>
        <member name="M:Alachisoft.NCache.Client.ConnectionOptions.#ctor(System.String,System.Int32)">
            <summary>
            Initializes new instance of CacheConnection
            </summary>
            <param name="server">Specifies the name of server on which cache is running.</param>
            <param name="port">Specifies the port of server on which cache is running.</param>
        </member>
        <member name="P:Alachisoft.NCache.Client.ConnectionOptions.ServerList">
            <summary>
            List of <see cref="T:Alachisoft.NCache.Client.ServerInfo"/> in the cache.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.ConnectionOptions.Server">
            <summary>
            Name of server on which cache is running.
            </summary>
            
        </member>
        <member name="P:Alachisoft.NCache.Client.ConnectionOptions.Port">
            <summary>
            Port of server on which cache is running.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.ConnectionOptions.UserCredentials">
            <summary>
            Get/Set <see cref="T:Alachisoft.NCache.Client.Credentials"/> of the cache for authorization.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.ConnectionOptions.Clone">
            <summary>
            Method not implemented.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.Credentials">
            <summary>
            Class that provides the security parameters for authorization.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.Credentials.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of the Credentials.
            </summary>
            <param name="userId">User Id.</param>
            <param name="password">Password.</param>
        </member>
        <member name="P:Alachisoft.NCache.Client.Credentials.UserID">
            <summary>
            This property specifies the User Id.
            </summary>
            <returns>
            This property specifies the User Id.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.Credentials.Password">
            <summary>
            This property specifies the Password.
            </summary>
            <returns>
            This property specifies the Password.
            </returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.IsolationLevel">
            <summary>
            Specifies the Isolation Level of the <see cref="T:Alachisoft.NCache.Client.ICache"/>.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.IsolationLevel.Default">
            <summary>
            Isolation level of cache will be read from the configuration file.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.IsolationLevel.InProc">
            <summary>
            InProc specifies low Isolation level, i.e, cache process is embeded inside the application process.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.IsolationLevel.OutProc">
            <summary>
            OutProc specifies high isolation level, i.e, cache process runs in a separate process.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.LogLevel">
            <summary>
            Defines the level of 
            logging you want to use.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.LogLevel.Info">
            <summary>
            Info level describes some useful information about any operation performed on cache.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.LogLevel.Error">
            <summary>
            This log flag gives the cause of errors that are raised during operation execution.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.LogLevel.Debug">
            <summary>
            This log option prints detailed information about any operations in cache.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.StoreConnectionOptions.Mode">
            <summary>
            Gets/Sets the <see cref="T:Alachisoft.NCache.Client.IsolationLevel"/> of the cache.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.StoreConnectionOptions.LoadBalance">
            <summary>
            When this flag is set, client tries to connect to the optimum server in terms of number of connected clients.
            <para>
            This way almost equal number of clients are connected to every node in the clustered cache and no single node 
            is overburdened.
            </para>
            </summary>
            <returns>
            Specifies a boolean value, either true or false.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.StoreConnectionOptions.LoadBalancerConnectionRetries">
            <summary>
            This represents how many times the client will prompt the load balancer to get connected to the right machine. 
            This property is used when there is a load balancer between client and server cluster.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.StoreConnectionOptions.ClientBindIP">
            <summary>
            Gets/Sets the IP for the client to be binded with
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.Cache.CacheAsyncEventsListener._parent">
            <summary> Underlying implementation of NCache. </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.Cache.CacheAsyncEventsListener.#ctor(Alachisoft.NCache.Client.StoreBase)">
            <summary>
            Constructor.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.Cache.CacheAsyncEventsListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or 
            resetting unmanaged resources.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:Alachisoft.NCache.Client.Cache.ClusterEventsListener._parent">
            <summary> Underlying implementation of NCache. </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.Cache.ClusterEventsListener.#ctor(Alachisoft.NCache.Client.StoreBase)">
            <summary>
            Constructor.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.Cache.ClusterEventsListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or 
            resetting unmanaged resources.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:Alachisoft.NCache.Client.Cache.CacheEventsListener._parent">
            <summary> Underlying implementation of NCache. </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.Cache.CacheEventsListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or 
            resetting unmanaged resources.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Alachisoft.NCache.Client.CacheItem">
            <summary>
            NCache uses a "key" and "value" structure for storing objects in the cache.
            When an object is added in cache it is stored as value and metadata against the specified key.
            This combination of value and metadata is defined as CacheItem in NCache.
            The value of the objects stored in the cache can range from being simple string types to complex objects.
            <para>
            CacheItem class in NCache has properties that enable you to set metadata for the item to be added in the cache 
            in an organized way. In scenarios where multiple attributes have to be set while adding an item in the cache, 
            using CacheItem is preferred. Using CacheItem class object removes the problem of using multiple API overloads 
            on adding/updating data in the cache. You can easily use the basic API overload and add/update data easily using CacheItem.
            </para>
            </summary>
            <example>
            The following example shows how you can create an instance of CacheItem class and add it to the <see cref="T:Alachisoft.NCache.Client.ICache"/>
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            
            Product product = new Product();
            CacheItem item = new CacheItem(product);
            item.Expiration = new Expiration(ExpirationType.Sliding, TimeSpan.FromMinutes(5));
            item.Priority = CacheItemPriority.High;
            
            cache.Add("productKey", item);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheItem.#ctor(System.Object)">
            <summary>
            Initialize new instance of cache item.
            </summary>
            <param name="value">Actual object to be stored in cache.</param>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheItem.Expiration">
            <summary>
            This property sets <see cref="T:Alachisoft.NCache.Runtime.Caching.Expiration"/> for the cache item. After the specified timespan,
            the item expires from cache.
            <remarks>If expiration is not set then it is disabled.
            </remarks>
            </summary>
            <returns>
            This property specifies the time after which the message is expired from the cache.
            </returns>
            <example>
            The following example sets the sliding expiration of a CacheItem as 5 minutes.
            <code>
            Product product = new Product();
            product.Id = 1;
            product.Name = "Chai";
            
            CacheItem item = new CacheItem(product);
            
            item.Expiration = new Expiration(ExpirationType.Sliding, TimeSpan.FromMinutes(5));
            </code>
            </example>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheItem.Priority">
            <summary>When the application's cache is full or runs low on memory, the cache selectively purges
            items to free system memory. When an item is added to the Cache, you can assign it a relative priority
            compared to the other items stored in the Cache using this property. 
            <para>
            This eliminates the problem of using API overloads for setting the priority. Items that are assigned higher
            priority values are less likely to be deleted from the cache when the server is processing a large
            number of requests, while items assigned lower priority values are more likely to be deleted.
            </para>
            </summary>
            <value>The default value is CacheItemPriority.Default.</value>
            <remarks>This property will be used only when the eviction policy is set to 
            priority in the configuration.</remarks>
            <example>
            The following example sets <see cref="T:Alachisoft.NCache.Runtime.CacheItemPriority"/> of a CacheItem.
            <code>
            Product product = new Product();
            product.Id = 1;
            product.Name = "Chai";
            
            CacheItem item = new CacheItem(product);
            item.Priority = CacheItemPriority.Normal;
            </code>
            </example>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheItem.Version">
            <summary>
            NCache uses cache item versioning. <see cref="T:Alachisoft.NCache.Client.CacheItemVersion"/> is a property associated with every cache item.
            It is basically a numeric value that is used to represent the version of the cached item which changes
            with every update to an item. 
            <para>
            This property allows you to track, whether any change occurred in an item or not. When you fetch an item from cache, you also fetch its current version from the cache.
            </para>
            </summary>
            <returns>
             A numeric value used to represent the version of the cached item. 
            </returns>
            <example>
            The following example gets <see cref="T:Alachisoft.NCache.Client.CacheItemVersion"/> of a CacheItem.
            <code>
            CacheItem item = cache.GetCacheItem("Product0");
            Console.WriteLine("Version: {0}", item.Version.Version);
            </code>
            </example>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheItem.CreationTime">
            <summary>
            Specifies when the item was added in the cache for the first time.
            </summary>
            <returns>
            This property specifies the DateTime when the item was first added in the cache.
            </returns>
            <example>
            The following example prints creation time of a CacheItem.
            <code>
            CacheItem item = cache.GetCacheItem("Product0");
            Console.WriteLine("Creation Time: {0}", item.CreationTime.ToString());
            </code>
            </example>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheItem.LastModifiedTime">
            <summary>
            This property of CacheItem stores the last modified time of the cache item. If an item is
            updated in cache its last modified time is updated as well. Last modified time is checked 
            when Least Recently Used based eviction is triggered. 
            </summary>
            <returns>
            This property specifies the last modification time of the cache.
            </returns>
            <example>
            The following example prints creation time of a CacheItem.
            <code>
            CacheItem item = cache.GetCacheItem("Product0");
            Console.WriteLine("Last Modified Time: {0}", item.LastModifiedTime.ToString());
            </code>
            </example>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheItem.Tags">
             <summary>
             Using Tags, you can associate keywords(s) with your cache items.
             You can mark your data with tags, which act as identifiers for your cache items.
             Using this property, you can easily set tags for a cache item.
             </summary>
             <returns>
             This property associates keywords with your cache items so that they are logically grouped together and 
             can be retrieved efficiently.
             </returns>
             <example>The following example sets multiple <see cref="T:Alachisoft.NCache.Runtime.Caching.Tag"/> of a CacheItem.
             <code>
             Product product = new Product();
             product.Id = 1;
             product.Name = "Chai";
             
             CacheItem item = new CacheItem(product);
            
             Tag[] tags = new Tag[2];
             tags[0] = new Tag("alpha");
             tags[1] = new Tag("beta");
            
             item.Tags = tags;
             </code>
             </example>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheItem.NamedTags">
             <summary>
             With Named Tags, the user is able to store additional information (of any type) required to 
             query the object stored as string. Users are required to provide the list of named tags,
             each having two parameters, "key" (name of a tag) as string and "value" (assigned value) 
             as any primitive type. 
             <para>
             NCache then allows you to search your objects through these named tags. Named tags can be 
             specified by using this property of CacheItem.
             </para>
             </summary>
             <returns>
             Represents a dictionary so that items can be grouped together and retrieved efficiently.
             </returns>
            <example>The following example sets named tags of a CacheItem.
             <code>
             Product product = new Product();
             product.Id = 1;
             product.Name = "Chai";
             
             CacheItem item = new CacheItem(product);
            
             NamedTagsDictionary tags = new NamedTagsDictionary();
             tags.Add("tag1", "alpha");
             tags.Add("tag2", "beta");
            
             item.NamedTags = tags;
             </code>
             </example>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheItem.ResyncOptions">
            <summary>
            This property is used to define the <see cref="P:Alachisoft.NCache.Client.CacheItem.ResyncOptions"/> for the cache item.
            </summary>
            <returns>
            This property is used to define the <see cref="P:Alachisoft.NCache.Client.CacheItem.ResyncOptions"/> for the cache item.
            </returns>
            <example>The following example sets <see cref="T:Alachisoft.NCache.Runtime.Caching.ResyncOptions"/> of a CacheItem.
            <code>
            Product product = new Product();
            product.Id = 1;
            product.Name = "Chai";
            
            CacheItem item = new CacheItem(product);
            item.ResyncOptions = new ResyncOptions(true, "ProdProvider");
            </code>
            </example>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheItem.Group">
            <summary>
            Groups help you create a logical partition of your cached data for easy retrieval. 
            Group information can be added with an item by setting the Group property of CacheItem.
            This reduces the complication of using API overloads for adding groups at the time of 
            adding/updating item in the cache.
            </summary>
            <returns>
            Name of a group.
            </returns>
            <example>
            The following example sets group of a CacheItem.
            <code>
            Product product = new Product();
            product.Id = 1;
            product.Name = "Chai";
            
            CacheItem item = new CacheItem(product);
            item.Group = "group_name";
            </code>
            </example>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheItem.SyncDependency">
            <summary>
            Synchronizes two separate caches so that an item updated or removed from one cache can 
            have the same effect on the synchronized cache. 
            For cache sync dependency, an item must exist in cache before another item can be added 
            with a dependency on it. This property lets you set the cache sync dependency with a cache item. 
            </summary>
            <returns>
            This property keeps the items present in one cache synchronized with the items present in another cache.
            </returns>
            <example>
            The following example sets a <see cref="T:Alachisoft.NCache.Client.CacheSyncDependency"/> dependency of a CacheItem.
            <code>
            Product product = new Product();
            product.Id = 1;
            product.Name = "Chai";
            
            CacheItem item = new CacheItem(product);
            
            item.SyncDependency = new CacheSyncDependency("partitionedCache", "Product0");
            </code>
            </example>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheItem.Dependency">
            <summary>
            The file or cache key dependencies for the item. 
            When any dependency changes, the object becomes invalid and is removed from 
            the cache. If there are no dependencies, this property contains a null 
            reference.
            </summary>
            <remarks></remarks>
            <returns>
            This property tracks cache dependencies, which can be files, directories, or keys to other objects in an application cache.
            </returns>
            <example>
            The following example sets a key dependency of a CacheItem.
            <code>
            Product product = new Product();
            product.Id = 1;
            product.Name = "Chai";
            
            CacheItem item = new CacheItem(product);
            
            item.Dependency = new KeyDependency("Product1");
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheItem.SetCacheDataNotification(Alachisoft.NCache.Client.CacheDataNotificationCallback,Alachisoft.NCache.Runtime.Events.EventType,Alachisoft.NCache.Runtime.Events.EventDataFilter)">
            <summary>
            You can use this to notify applications when their objects are updated or removed in the cache.
            Callbacks can be registered against <see cref="T:Alachisoft.NCache.Runtime.Events.EventType"/> for the key the items is inserted to.
            Callbacks are overridden for the same <see cref="T:Alachisoft.NCache.Runtime.Events.EventType"/>, if called again.
            <para>
            CacheDataNotificationCallback defines the callback to be used for notifications. EventType describes
            the type of event you want to register. If that event is triggered, a notification will be received. 
            </para>
            </summary>
            <param name="callback">Callback to be raised when an item is updated or removed.</param>
            <param name="eventType"><see cref="T:Alachisoft.NCache.Runtime.Events.EventType"/> the callback is registered against.</param>
            <param name="datafilter">Tells whether to receive metadata, data with metadata or none when a notification is triggered.</param>
            <example>
            The following example sets item notification callback of a CacheItem.
            <code>
            private void DataModifiedCallback(string key, CacheEventArgs args)
            {
               //
            }
            
            Product product = new Product();
            product.Id = 1;
            product.Name = "Chai";
            
            CacheItem item = new CacheItem(product);
            
            item.SetCacheDataNotification(new CacheDataNotificationCallback(DataModifiedCallback), EventType.ItemAdded, EventDataFilter.DataWithMetadata);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheItem.GetValue``1">
            <summary>
            Returns the value stored in the CacheItem.
            </summary>
            <remarks>
            This value must be serializable, otherwise <see cref="T:System.ArgumentException"/> 
            is thrown, when you will try to add or insert the CacheItem.
            </remarks>
            <typeparam name="T">Specifies the type of value obtained from the cache item.</typeparam>
            <returns>Value of the cache item with the type defined.</returns>
            <example>
            The following example gets value of a CacheItem.
            <code>
            CacheItem item = cache.GetCacheItem("Product0");
            
            Product product = item.GetValue&lt;Product&gt;();
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheItem.SetValue(System.Object)">
            <summary>
            Sets the value of the cache item.
            </summary>
            <param name="value">Object to be stored in the CacheItem.</param>
            <example>
            The following example sets value of a CacheItem.
            <code>
            CacheItem item = cache.GetCacheItem("productKey");
            
            Product product = new Product();
            product.Id = 1;
            product.Name = "Chai";
            
            item.SetValue(product);
            
            cache.Insert("productKey", item);
            </code>
            </example> 
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheItem.Clone">
            <summary>
            Creates a shallow copy of the cache item.
            </summary>
            <returns>
            A shallow copy of the cache item.
            </returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.ICache">
            <summary>
            This interface contians the services and methods that are used to perform operations on the cache.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.ICache.Count">
            <summary>
            Gets the number of items stored in the cache.
            </summary>
            <returns>
            Number of items stored in the cache.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.ICache.ConnectedClientList">
            <summary>
            Gets the information of all connected clients to the cache.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.ICache.MessagingService">
            <summary>
            Gets an instance of <see cref="T:Alachisoft.NCache.Client.Services.IMessagingService"/>.
            </summary>
            <returns>
            It contains the properties and methods required for the Messaging Service.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.ICache.SearchService">
            <summary>
            Gets an instance of <see cref="T:Alachisoft.NCache.Client.Services.ISearchService"/>.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.ICache.QueryService">
            <summary>
            Gets an instance of <see cref="T:Alachisoft.NCache.Client.Services.IQueryService"/>.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.ICache.ExecutionService">
            <summary>
            Gets an instance of <see cref="T:Alachisoft.NCache.Client.Services.IExecutionService"/>.
            </summary>
            <returns>
            It contains properties and methods required for the Execution Service.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.ICache.DataTypeManager">
            <summary>
            Gets an instance of <see cref="T:Alachisoft.NCache.Client.DataTypes.IDataTypeManager"/>.
            </summary>
            
        </member>
        <member name="P:Alachisoft.NCache.Client.ICache.DataStructureService">
            <summary>
            Gets an instance of <see cref="T:Alachisoft.NCache.Client.Services.IDataStructureService"/>.
            </summary>
            
        </member>
        <member name="P:Alachisoft.NCache.Client.ICache.JsonPatchService">
            <summary>
            Gets an instance of <see cref="T:Alachisoft.NCache.Client.Services.IJsonPatchService"/>.
            </summary>
            
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.Add(System.String,System.Object)">
            <summary>
            Adds an item into the cache with a cache key to reference its location.
            </summary>
            <param name="key">Unique key to identify the cache item.</param>
            <param name="value">The item (object) to be stored in the cache.</param>
            <returns>Represents the version of each cache item.</returns>
            <example>The following example demonstrates how to add a value to cache.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            
            Product product = new Product();
            product.Id = 1;
            product.Name = "Chai";
            
            string key = "Product0";
            
            cache.Add(key, product);
            </code>        
            </example>    
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.Add(System.String,Alachisoft.NCache.Client.CacheItem,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Adds a <see cref="T:Alachisoft.NCache.Client.CacheItem"/> to the cache. It also lets you specify the WriteThruOptions.
            Using CacheItem, you can also specify properties for the cache items, for e.g., expiration and priority.
            </summary>
            <param name="key">Unique key to identify the cache item.</param>
            <param name="item"><see cref="T:Alachisoft.NCache.Client.CacheItem"/> that is to be stored in the cache.</param>
            <param name="writeThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating the data source. This can be either WriteThru, WriteBehind or none.</param>
            <returns>Represents the version of each cache item.</returns>
            <remarks>If CacheItem contains invalid values, the related exception is thrown. 
            See <see cref="T:Alachisoft.NCache.Client.CacheItem"/> for invalid property values and related exceptions.</remarks>
            <example>The following example demonstrates how to add an item to the cache with a sliding expiration of 5 minutes and a high priority.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            
            Product product = new Product();
            product.Id = 1;
            product.Name = "Chai";
            
            CacheItem item = new CacheItem(product);
            item.Expiration = new Expiration(ExpirationType.Sliding,new TimeSpan(0, 5, 0));
            item.Priority = CacheItemPriority.High;
            
            string key = "Product0";
            
            WriteThruOptions writeThruOptions = new WriteThruOptions(WriteMode.WriteThru, "ProdDataSource1");
            
            cache.Add(key, item, writeThruOptions);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.AddBulk(System.Collections.Generic.IDictionary{System.String,Alachisoft.NCache.Client.CacheItem},Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
             <summary>
             Adds a dictionary of cache keys with <see cref="T:Alachisoft.NCache.Client.CacheItem"/> to the cache with the WriteThruOptions. 
             The CacheItem contains properties to associate with the item, like expiration, dependencies and eviction information. 
             </summary>
             <param name="items">Dictionary of keys and <see cref="T:Alachisoft.NCache.Client.CacheItem"/>. Keys must be unique.</param>>
             <param name="writeThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating data source. This can be WriteThru, WriteBehind or none.</param>
             <returns>Dictionary of Keys along with Exception that were unable to store in cache.</returns>
             <example>The following example demonstrates how to add items in bulk to the cache. These items have absolute expiration of 2 minutes from now and have a high priority.
             <code>
             ICache cache = CacheManager.GetCache("demoClusteredCache");
            
             CacheItem[] cacheItems = new CacheItem[3];
             
             Product product_1 = new Product();
             product_1.Id = 1;
             product_1.Name = "Chai";
             
             Product product_2 = new Product();
             product_2.Id = 2;
             product_2.Name = "Chang";
             
             Product product_3 = new Product();
             product_3.Id = 2;
             product_3.Name = "Aniseed Syrup";
             
             cacheItems[0] = new CacheItem(product_1);
             cacheItems[0].Expiration = new Expiration(ExpirationType.Absolute, new TimeSpan(0, 2, 0));
             cacheItems[0].Priority = CacheItemPriority.High;
             
             cacheItems[1] = new CacheItem(product_2);
             cacheItems[1].Expiration = new Expiration(ExpirationType.Absolute, new TimeSpan(0, 2, 0));
             cacheItems[1].Priority = CacheItemPriority.Normal;
             
             cacheItems[2] = new CacheItem(product_3);
             cacheItems[2].Expiration = new Expiration(ExpirationType.Absolute, new TimeSpan(0, 2, 0));
             cacheItems[2].Priority = CacheItemPriority.Low;
             
             IDictionary&lt;string, CacheItem&gt; items = new Dictionary&lt;string, CacheItem&gt;()
             {
                 { "Product0",cacheItems[0]},
                 { "Product1",cacheItems[1]},
                 { "Product2",cacheItems[2]}
             }
             
             WriteThruOptions writeThruOptions = new WriteThruOptions(WriteMode.WriteThru, "ProdDataSource1");
             
             cache.AddBulk(items, writeThruOptions);
             </code>        
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.AddAsync(System.String,System.Object)">
            <summary>
            Adds an object into the cache asynchronously, with a cache key to reference its location.
            </summary>
            <param name="key">Unique key to identify the cache item.</param>
            <param name="value">The item (object) to be stored in the cache.</param>
            <returns>
            Task that performs an add operation in the background. Once the Task is completed, it will return the version of cache item that was 
            added in cache. Task contains the status of the operation taking place in the background. 
            That status can be one out of them completed, canceled, running or faulted.
            </returns>
            <example> The following example demonstrates how to add an object to the cache asynchronously, with 
            registering a Task to monitor the status of the operation.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            
            Product product = new Product();
            product.Id = 1;
            product.Name = "Chai";
            
            string key = "Product0";
            
            cache.AddAsync(key, product).ContinueWith(task => OnItemAdded(key, task));
            
            private static void OnItemAdded(string key, Task&lt;CacheItemVersion&gt; task)
            {
                if (task.Status == TaskStatus.RanToCompletion)
                {
                ...
                }
                if (task.Status == TaskStatus.Faulted)
                {
                ...
                }
                if (task.Exception != null)
                {
                ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.AddAsync(System.String,Alachisoft.NCache.Client.CacheItem,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Adds a <see cref="T:Alachisoft.NCache.Client.CacheItem"/> into the cache asynchronously, with a cache key to reference its location
            and WriteThruOptions.
            </summary>
            <param name="key">Unique key to identify the cache item.</param>
            <param name="item"><see cref="T:Alachisoft.NCache.Client.CacheItem"/> that is to be stored in the cache.</param>
            <param name="writeThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating the data source. This can be either WriteThru, WriteBehind or none.</param>
            <returns>
            Task that performs an add operation in the background. Once completed returns version of 
            cache item that was added in cache. Task Status property can be used to determine status
            of the Task that can be IsCanceled, IsCompleted, and IsFaulted.
            </returns>
            <example>The following example demonstrates how to add an <see cref="T:Alachisoft.NCache.Client.CacheItem"/> to the cache asynchronously, with 
            registering a Task to monitor the status of the operation along with WriteThruOptions.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            
            Product product = new Product();
            product.Id = 1;
            product.Name = "Chai";
            
            CacheItem item = new CacheItem(product);
            
            string key = "Product0";
            
            WriteThruOptions writeThruOptions = new WriteThruOptions(WriteMode.WriteThru, "ProdDataSource1");
            
            cache.AddAsync(key, item, writeThruOptions).ContinueWith(task => OnItemAdded(key, task));
            
            private static void OnItemAdded(string key, Task&lt;CacheItemVersion&gt; task)
            {
                if (task.Status == TaskStatus.RanToCompletion)
                {
                ...
                }
                if (task.Status == TaskStatus.Faulted)
                {
                ...
                }
                if (task.Exception != null)
                {
                ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.Insert(System.String,System.Object)">
            <summary>
            Inserts an item (object) into the cache.
            </summary>
            <param name="key">Unique key to identify the cache item.</param>
            <param name="value">The item (object) that is to be inserted into the cache.</param>
            <returns>Represents the version of each cache item.</returns>
            <remarks> 
            If the key already exists, this overload overwrites the values of the existing <seealso cref="T:Alachisoft.NCache.Client.ICache"/> item. If the key does not exist, it adds the item to the cache.
            </remarks> 
            <example>The following example demonstrates how to insert an item (object) into the cache.
            <code>
            Cache cache = CacheManager.GetCache("demoClusteredCache");
            
            Product product = new Product();
            product.Id = 1;
            product.Name = "Chai";
            
            string key = "Product0";
             
            cache.Insert(key,product);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.Insert(System.String,Alachisoft.NCache.Client.CacheItem,Alachisoft.NCache.Client.LockHandle,System.Boolean)">
             <summary>
             Inserts a <see cref="T:Alachisoft.NCache.Client.CacheItem"/> into the cache.
             </summary>
             <param name="key">Unique key to identify the cache item.</param>
             <param name="item">The CacheItem that is to be inserted into the cache.</param>
             <param name="lockHandle">An instance of <seealso cref="T:Alachisoft.NCache.Client.LockHandle"/> that holds the lock information. If the item is locked, then it can only be updated if the correct lockHandle is specified.</param>
             <param name="releaseLock">A flag to determine whether or not the lock should be released after operation is performed.</param>
             <returns>Represents the version of each cache item.</returns>
             <remarks> If the key already exists, this overload overwrites the values of the existing <seealso cref="T:Alachisoft.NCache.Client.ICache"/> item. If the key does not exist, it adds the item to the cache.
             If CacheItem contains invalid values the related exception is thrown. 
             See <see cref="T:Alachisoft.NCache.Client.CacheItem"/> for invalid property values and related exceptions.</remarks>			
             <example>The following example demonstrates how to insert an item to the cache with a sliding expiration of 5 minutes, a priority of 
             high.
             <code>
             ICache cache = CacheManager.GetCache("demoClusteredCache");
            
             Product product = new Product();
             product.Id = 1;
             product.Name = "Chai";
            
             CacheItem item = new CacheItem(product);
             item.Priority = CacheItemPriority.Low;
            
             string key = "Product0";
            
             cache.Add(key, item);
            
             LockHandle lockHandle = new LockHandle();
            
             CacheItem cachedItem = cache.Get&lt;CacheItem&gt;("cachedItemKey", true, new TimeSpan(0, 5, 0), ref lockHandle);
            
             if (cachedItem != null)
             {
                 try
                 {
                    cachedItem.Priority = CacheItemPriority.High;
                    cachedItem.Expiration = new Expiration(ExpirationType.Sliding, new TimeSpan(0, 2, 0));
            
                    cache.Insert(key, cachedItem,  lockHandle, true);
                 }
                 catch (OperationFailedException ex)
                 {
                 ...
                 }
             }
             </code>
             </example>
             
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.Insert(System.String,Alachisoft.NCache.Client.CacheItem,Alachisoft.NCache.Runtime.Caching.WriteThruOptions,Alachisoft.NCache.Client.LockHandle,System.Boolean)">
             <summary>
             Inserts a <see cref="T:Alachisoft.NCache.Client.CacheItem"/> into the cache, along with allowing to specify the WriteThruOptions.
             </summary>
             <param name="key">Unique key to identify the CacheItem.</param>
             <param name="item">The CacheItem that is to be inserted into the cache.</param>
             <param name="writeThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating the data source. This can be either WriteThru, WriteBehind or none.</param>
             <param name="lockHandle">An instance of <seealso cref="T:Alachisoft.NCache.Client.LockHandle"/> that holds the lock information. If the item is locked, then it can only be updated if the correct lockHandle is specified.</param>
             <param name="releaseLock">A flag to determine whether or not the lock should be released, after operation is performed.</param>
             <returns>Represents the version of each cache item.</returns>
             <remarks> If the key already exists, this overload overwrites the values of the existing <seealso cref="T:Alachisoft.NCache.Client.ICache"/> item. If the key does not exist, it adds the item to the cache.
             If CacheItem contains invalid values the related exception is thrown. The functionality of lockhandle with WriteThru is not supported. 
             See <see cref="T:Alachisoft.NCache.Client.CacheItem"/> for invalid property values and related exceptions.</remarks>			
             <example>The following example demonstrates how to insert an item to the cache with a sliding expiration of 5 minutes and a high priority.
             <code>
             ICache cache = CacheManager.GetCache("demoClusteredCache");
            
             Product product = new Product();
             product.Id = 1;
             product.Name = "Chai";
            
             CacheItem item = new CacheItem(product);
             item.Priority = CacheItemPriority.Low;
            
             string key = "Product0";
            
             cache.Add(key, item);
            
             LockHandle lockHandle = new LockHandle();
            
             CacheItem cachedItem = cache.Get&lt;CacheItem&gt;("cachedItemKey", true, new TimeSpan(0, 5, 0), ref lockHandle);
            
             if (cachedItem != null)
             {
                 try
                 {
                    cachedItem.Priority = CacheItemPriority.High;
                    cachedItem.Expiration = new Expiration(ExpirationType.Sliding, new TimeSpan(0, 2, 0));
            
                    WriteThruOptions writeThruOptions = new WriteThruOptions(WriteMode.WriteThru, "ProdDataSource1");
            
                    cache.Insert(key, cachedItem, writeThruOptions, lockHandle, true);
                 }
                 catch (OperationFailedException ex)
                 {
                 ...
                 }
             }
             </code>
             </example>
             
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.InsertBulk(System.Collections.Generic.IDictionary{System.String,Alachisoft.NCache.Client.CacheItem},Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
             <summary>
             Inserts a dictionary of cache keys with <see cref="T:Alachisoft.NCache.Client.CacheItem"/> to the cache with the WriteThruOptions. 
             The CacheItem contains properties to associate with the item, like expiration, dependencies and eviction information. 
             </summary>
             <param name="items">Dictionary of keys and <see cref="T:Alachisoft.NCache.Client.CacheItem"/>. Keys must be unique.</param>>
             <param name="writeThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating data source. This can be WriteThru, WriteBehind or none.</param>
             <returns>Dictionary of keys along with exception that were unable to store in cache.</returns>
             <remarks> If the key or multilple keys already exist, this overload overwrites the values of the existing <seealso cref="T:Alachisoft.NCache.Client.ICache"/> items.
             If the key does not exist, it adds the item to the cache.</remarks>
             <example>The following example demonstrates how to insert items to the cache with an absolute 
             expiration of 2 minutes from now, a priority of high.
             <code>
             ICache cache = CacheManager.GetCache("demoClusteredCache");
            
             CacheItem[] cacheItems = new CacheItem[3];
             
             Product product_1 = new Product();
             product_1.Id = 1;
             product_1.Name = "Chai";
             
             Product product_2 = new Product();
             product_2.Id = 2;
             product_2.Name = "Chang";
             
             Product product_3 = new Product();
             product_3.Id = 2;
             product_3.Name = "Aniseed Syrup";
             
             cacheItems[0] = new CacheItem(product_1);
             cacheItems[0].Expiration = new Expiration(ExpirationType.Absolute, new TimeSpan(0, 2, 0));
             cacheItems[0].Priority = CacheItemPriority.High;
             
             cacheItems[1] = new CacheItem(product_2);
             cacheItems[1].Expiration = new Expiration(ExpirationType.Absolute, new TimeSpan(0, 2, 0));
             cacheItems[1].Priority = CacheItemPriority.Normal;
             
             cacheItems[2] = new CacheItem(product_3);
             cacheItems[2].Expiration = new Expiration(ExpirationType.Absolute, new TimeSpan(0, 2, 0));
             cacheItems[2].Priority = CacheItemPriority.Low;
             
             IDictionary&lt;string, CacheItem&gt; items = new Dictionary&lt;string, CacheItem&gt;()
             {
                 { "Product0",cacheItems[0]},
                 { "Product1",cacheItems[1]},
                 { "Product2",cacheItems[2]}
             }
             
             WriteThruOptions writeThruOptions = new WriteThruOptions(WriteMode.WriteThru, "ProdDataSource1");
             
             cache.InsertBulk(items, writeThruOptions);
             </code>        
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.InsertAsync(System.String,System.Object)">
            <summary>
            Inserts an object into the cache asynchronously, with a cache key to reference its location.
            </summary>
            <param name="key">Unique key to identify the cache item.</param>
            <param name="value">The item (object) to be stored in the cache.</param>
            <returns>
            Task that performs an insert operation in the background. Once completed, returns a version of 
            CacheItem that was added in cache. Task Status property can be used to determine status
            of the Task that can be IsCanceled, IsCompleted, and IsFaulted.
            </returns>
            <remarks> If the key already exists, this overload overwrites the values of the existing <seealso cref="T:Alachisoft.NCache.Client.ICache"/> item.
            If the key does not exist, it adds the item to the cache.</remarks>
            <example>The following example demonstrates how to add an object to the cache asynchronously, with 
            registering a Task to monitor the status of the operation.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            
            Product product = new Product();
            product.Id = 1;
            product.Name = "Chai";
            
            string key = "Product0";
            
            cache.InsertAsync(key, product).ContinueWith(task => OnItemInserted(key, task));
            
            private static void OnItemInserted(string key, Task&lt;CacheItemVersion&gt; task)
            {
                if (task.Status == TaskStatus.RanToCompletion)
                {
                ...
                }
                if (task.Status == TaskStatus.Faulted)
                {
                ...
                }
                if (task.Exception != null)
                {
                ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.InsertAsync(System.String,Alachisoft.NCache.Client.CacheItem,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Inserts a <see cref="T:Alachisoft.NCache.Client.CacheItem"/> into the cache asynchronously, with a cache key to reference its location
            and WriteThruOptions.
            </summary>
            <param name="key">Unique key to identify the cache item.</param>
            <param name="item"><see cref="T:Alachisoft.NCache.Client.CacheItem"/> that is to be stored in the cache.</param>
            <param name="writeThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating the data source. This can be either WriteThru, WriteBehind or none.</param>
            <returns>
            Task that performs an insert operation in the background. Once completed returns version of 
            cache item that was added in cache. Task Status property can be used to determine status
            of the Task that can be IsCanceled, IsCompleted, and IsFaulted.
            </returns>
            <example>The following example demonstrates how to add an <see cref="T:Alachisoft.NCache.Client.CacheItem"/> to the cache asynchronously with 
            registering a Task to monitor the status of the operation along with WriteThruOptions.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            
            Product product = new Product();
            product.Id = 1;
            product.Name = "Chai";
            
            CacheItem item = new CacheItem(product);
            
            string key = "Product0";
            
            WriteThruOptions writeThruOptions = new WriteThruOptions(WriteMode.WriteThru, "ProdDataSource1");
            
            cache.InsertAsync(key, item, writeThruOptions).ContinueWith(task => OnItemInserted(key, task));
            
            private static void OnItemInserted(string key, Task&lt;CacheItemVersion&gt; task)
            {
                if (task.Status == TaskStatus.RanToCompletion)
                {
                ...
                }
                if (task.Status == TaskStatus.Faulted)
                {
                ...
                }
                if (task.Exception != null)
                {
                ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.UpdateAttributes(System.String,Alachisoft.NCache.Runtime.Caching.CacheItemAttributes)">
            <summary>
            Update <see cref="T:Alachisoft.NCache.Runtime.Caching.CacheItemAttributes"/> of an existing item in cache.
            </summary>
            <param name="key">Unique key to identify the cache item.</param>
            <param name="attributes">An instance of<see cref="T:Alachisoft.NCache.Runtime.Caching.CacheItemAttributes"/> to update item in the cache.</param>
            <returns>Flag that determines status of the update operation. True if attributes of 
            the item in cache was updated successfully otherwise False.
            </returns>
            <example>The following example demonstrates how to update absolute expiration of 5 minutes on an existing item in cache. 
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            
            Product product = new Product();
            product.Id = 1;
            product.Name = "Chai";
            
            string key = "Product0";
            
            cache.Insert(key, product);
            
            CacheItemAttributes attributes = new CacheItemAttributes();
            attributes.AbsoluteExpiration = DateTime.Now.AddMinutes(5);
            
            if(cache.UpdateAttributes(key, attributes))
            {
            ...
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.Get``1(System.String,Alachisoft.NCache.Runtime.Caching.ReadThruOptions)">
            <summary>
            Retrieves the specified item from the cache object, with read-through caching option available. If the option of read-through has been set, the object will be fetched from the data source if it does not exist in cache.
            </summary>
            <typeparam name="T">Specifies the type of value obtained from the cache.</typeparam>
            <param name="key">The unique identifier for the cache item to be retrieved.</param>
            <param name="readThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.ReadThruOptions"/> to read from data source. These can be either ReadThru, ReadThruForced or none.</param>
            <returns>The retrieved cache item, or a null reference if the key is not found.</returns>
            <remarks>
            If the key does not exists in the cache, then a null value is returned.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Key contains a null reference.</exception>
            <exception cref="T:System.ArgumentException">Key is an empty string.</exception>
            <example>The following example demonstrates how to retrieve the value from the cache.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            
            string key = "Product0";
            
            ReadThruOptions readThruOptions = new ReadThruOptions(ReadMode.ReadThru);
            
            Product product = cache.Get&lt;Product&gt;(key,readThruOptions);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.Get``1(System.String,System.Boolean,System.TimeSpan,Alachisoft.NCache.Client.LockHandle@)">
            functionality of lockhandle with readthru is not supported. 
            <summary>
            Retrieves the specified object from the cache and locks it simulataneously, if it is not already locked.
            It returns null, if the object is already locked. This is different from the basic Get operation, 
            where an object is returned ignoring the lock altogether. Use this method if you're using NCache item locking features.
            </summary>
            <typeparam name="T">Specifies the type of value obtained from the cache.</typeparam>
            <param name="key">Unique identifier for the cache item to be retrieved.</param>
            <param name="acquireLock">A flag to determine whether to acquire a lock or not.</param>
            <param name="lockTimeout">The TimeSpan after which the lock is automatically released.</param>
            <param name="lockHandle">An instance of <seealso cref="T:Alachisoft.NCache.Client.LockHandle"/> to hold the lock information.</param>
            <returns>The retrieved cache item, or a null reference if the key is not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> contains a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is an empty string.</exception>
            <example>The following example demonstrates how to retrieve the cached value and acquire a lock at the same time for minutes.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            
            Product product = new Product();
            product.Id = 1;
            product.Name = "Chai";
            
            string key = "Product0";
            
            cache.Add(key, product);
            
            LockHandle lockHandle = new LockHandle();
             
            object cachedItem = cache.Get&lt;Product&gt;(key, true, new TimeSpan(0, 2, 0), ref lockHandle);
            </code>
            </example>   
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.Get``1(System.String,Alachisoft.NCache.Client.CacheItemVersion@,Alachisoft.NCache.Runtime.Caching.ReadThruOptions)">
            <summary>
            Retrieves the specified item from the cache object, with read-through caching option available.
            If the option of read-through has been set, the object will be fetched from the data source if 
            it does not exist in cache. It accepts the <see cref="T:Alachisoft.NCache.Client.CacheItemVersion"/> by reference.
            <para>
            If null is passed for CacheItemVersion, then the version of the object from the cache is returned. If non-null
            CacheItemVersion is passed, then object is returned from the cache only if that is the current version of the object
            in the cache.
            </para>
            </summary>
            <typeparam name="T">Specifies the type of value obtained from the cache.</typeparam>
            <param name="key">Unique identifier for the cache item to be retrieved.</param>
            <param name="version">The version of the object.</param>
            <param name="readThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.ReadThruOptions"/> to read from data source. These can be either ReadThru, ReadThruForced or none.</param>
            <returns>The retrieved cache item, or a null reference if the key is not found.</returns>
            <example>The following example demonstrates how to retrieve the value cached with ReadThruOptions and version.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            
            Product product = new Product();
            product.Id = 1;
            product.Name = "Chai";
            
            string key = "Product0";
            
            CacheItemVersion version = cache.Add(key, product);
            
            ReadThruOptions readThruOptions = new ReadThruOptions(ReadMode.ReadThru);
            
            Product product = cache.Get&lt;Product&gt;(key,ref version, readThruOptions);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.GetIfNewer``1(System.String,Alachisoft.NCache.Client.CacheItemVersion@)">
            <summary>
            Gets an object from the cache only if a newer version of the object exists in cache.
            </summary>
            <typeparam name="T">Specifies the type of value obtained from the cache.</typeparam>
            <param name="key">Unique key used to reference the desired object.</param>
            <param name="version">The version of the specified object passed by reference.</param>
            <returns>If a newer object exists in the cache, the object is returned. Otherwise, null is returned.</returns>
            <example>The following example demonstrates how to get a newer version of the item from cache if it exists.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            
            Product product = new Product();
            product.Id = 1;
            product.Name = "Chai";
            
            string key = "Product0";
            
            CacheItemVersion version = cache.Add(key, product);
            
            Product product = cache.GetIfNewer&lt;Product&gt;(key, ref version);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.GetBulk``1(System.Collections.Generic.IEnumerable{System.String},Alachisoft.NCache.Runtime.Caching.ReadThruOptions)">
            <summary>
            Retrieves the objects from cache for the given keys as key-value pairs. Options regarding reading from data source (read-through) can be set.
            </summary>
            <typeparam name="T">Specifies the type of value obtained from the cache.</typeparam>
            <param name="keys">The keys against which items are to be fetched from cache.</param>
            <param name="readThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.ReadThruOptions"/> to read from data source. These can be either ReadThru, ReadThruForced or none.</param>
            <returns>The retrieved cache items as key-value pairs.</returns>
            <exception cref="T:System.ArgumentNullException">Keys contain a null reference.</exception>
            <exception cref="T:System.ArgumentException">Keys cannot be serialized.</exception>
            <example>The following example demonstrates how to retrieve the value cached against multiple keys with ReadThruOptions.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            
            List&lt;string&gt; keys = new List&lt;string&gt;()
            {
                "Product0",
                "Product1",
                "Product2"
            };
            
            ReadThruOptions readThruOptions = new ReadThruOptions(ReadMode.ReadThru);
            
            IDictionary&lt;string, Product&gt; items = cache.GetBulk&lt;Product&gt;(keys, readThruOptions);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.GetCacheItem(System.String,Alachisoft.NCache.Runtime.Caching.ReadThruOptions)">
            <summary>
            Retrieves the specified CacheItem from the cache object. This overload also allows specifying the ReadThruOptions. If read-through is set and the object does not exist in the cache,
            the object will be fetched from the data source and added to the cache.
            </summary>
            <param name="key">Unique identifier for the cache item to be retrieved.</param>  
            <param name="readThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.ReadThruOptions"/> regarding reading from data source. It can be either ReadThru, ReadThruForced or none.</param>
            <returns>The specified CacheItem. If the key does not exist, it returns a null reference.</returns>
            <exception cref="T:System.ArgumentNullException">Key contains a null reference.</exception>
            <example>The following example demonstrates how to retrieve the cache item with ReadThruOptions and CacheItemVersion.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string key = "Product0";
            ReadThruOptions readThruOptions = new ReadThruOptions(ReadMode.ReadThru);
            CacheItem cacheItem = cache.GetCacheItem(key, readThruOptions);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.GetCacheItem(System.String,System.Boolean,System.TimeSpan,Alachisoft.NCache.Client.LockHandle@)">
            <summary>
            Retrieves the cache item from the cache and locks it if it is not already locked. If the item is already locked, it returns null. 
            This differs from the basic GetCachItem operation, which returns an item (while ignoring the lock). 
            If you're using the NCache item locking features, use this approach.
            </summary>
            <param name="key">Key used to reference the desired object.</param>
            <param name="acquireLock">A flag to determine whether to acquire a lock or not.</param>
            <param name="lockTimeout">The TimeSpan after which the lock is automatically released.</param>
            <param name="lockHandle">An instance of <see cref="T:Alachisoft.NCache.Client.LockHandle"/> to hold the lock information.</param>
            <returns>The retrieved cache item. If key is not found, a null reference.</returns>
            <example>The following example demonstrates how to retrieve the cache item with lock handle, timeout and flag
            for aquiring a lock.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string key = "Product0";
            LockHandle lockHandle = new LockHandle();
            CacheItem item = cache.GetCacheItem(key, true, TimeSpan.FromSeconds(30), ref lockHandle);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.GetCacheItem(System.String,Alachisoft.NCache.Client.CacheItemVersion@,Alachisoft.NCache.Runtime.Caching.ReadThruOptions)">
            <summary>
            Retrieves the specified CacheItem from the cache object. This overload also allows specifying the ReadThruOptions. If read-through is set and the object does not exist in the cache, the object will be fetched from the data source and added to the cache.
            It accepts the <see cref="T:Alachisoft.NCache.Client.CacheItemVersion"/> by reference.
            <para>
            If null is passed for CacheItemVersion, then the version of the object from the cache is returned. If non-null
            CacheItemVersion is passed, then object is returned from the cache only if that is the current version of the object
            in the cache.
            </para>
            </summary>
            <param name="key">Unique identifier for the cache item to be retrieved.</param>  
            <param name="version">The <see cref="T:Alachisoft.NCache.Client.CacheItemVersion"/> of the object.</param>
            <param name="readThruOptions">Options regarding reading from data source. It can be either ReadThru or none.</param>
            <returns>The specified CacheItem. If the key does not exist, it returns a null reference.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> contains a null reference.</exception>
            <example>The following example demonstrates how to retrieve the CacheItem with ReadThruOptions and CacheItemVersion.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            
            Product product = new Product();
            product.Id = 1;
            product.Name = "Chai";
            
            string key = "Product0";
            
            CacheItemVersion version = cache.Add(key, product);
            
            ReadThruOptions readThruOptions = new ReadThruOptions(ReadMode.ReadThru);
            
            CacheItem item = cache.GetCacheItem(key, ref version, readThruOptions);
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.GetCacheItemBulk(System.Collections.Generic.IEnumerable{System.String},Alachisoft.NCache.Runtime.Caching.ReadThruOptions)">
            <summary>
            Retrieves the specified CacheItems from the cache object. This overload also allows specifying the ReadThruOptions. If read-through is set and the object does not exist in the cache,
            the object will be fetched from the data source and added to the cache.
            </summary>
            <param name="keys">IEnumerable list of unique identifiers for the cache items to be retrieved.</param>
            <param name="readThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.ReadThruOptions"/> regarding reading from data source. It can be either ReadThru, ReadThruForced or none.</param>
            <returns>The retrieved cache items as key-value pairs.</returns>
            <example>The following example demonstrates how to retrieve the cache items with ReadThruOptions.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            
            List&lt;string&gt; keys = new List&lt;string&gt;()
            {
                "Product0",
                "Product1",
                "Product2"
            };
            
            ReadThruOptions readThruOptions = new ReadThruOptions(ReadMode.ReadThru);
            IDictionary&lt;string, CacheItem&gt; items = cache.GetCacheItemBulk(keys, readThruOptions);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.Remove(System.String,Alachisoft.NCache.Client.LockHandle,Alachisoft.NCache.Client.CacheItemVersion,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Removes the specified item from the <see cref="T:Alachisoft.NCache.Client.ICache"/>. You can also specify the write option, such that the item may be removed from both cache and data source.
            If version is specified, then item will only be removed if the specified version is still the most recent version in the cache.
            </summary>
            <param name="key">Unique key of the item to be removed.</param>
            <param name="lockHandle">If the item is locked, it can be removed only if the correct lockHandle is specified. lockHandle should be the same which was used initially to lock the item, otherwise you will get the 'OperationFailedException'.</param>
            <param name="version">The version of the item to be removed. The item is removed from the cache
            only if this is still the most recent version in the cache.</param>
            <param name="writeThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating the data source. This can be either WriteThru, WriteBehind or none.</param>
            <example>The following example demonstrates how to remove a locked item in the cache with WriteThruOptions.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            
            Product product = new Product();
            product.Id = 1;
            product.Name = "Chai";
            
            string key = "Product0";
            
            CacheItemVersion version = cache.Add(key, product);
            
            LockHandle lockHandle = new LockHandle();
            
            object item = cache.Get&lt;Product&gt;(key, true, TimeSpan.Zero, ref lockHandle);
            
            if (item != null)
            {
                try
                {
                    WriteThruOptions writeThruOptions = new WriteThruOptions(WriteMode.WriteThru, "ProdDataSource1");
            
                    cache.Remove(key, lockHandle, version, writeThruOptions);
                }
                catch (OperationFailedException ex)
                {
                ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.Remove``1(System.String,``0@,Alachisoft.NCache.Client.LockHandle,Alachisoft.NCache.Client.CacheItemVersion,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Removes the specified item from the <see cref="T:Alachisoft.NCache.Client.ICache"/> and returns it to the application as an out parameter. You can also specify the write option such that the item may be removed from both cache and data source.
            If version is specified, then item will only be removed if the specified version is still the most recent version in the cache.
            </summary>
            <typeparam name="T">Specifies the type of value obtained from the cache.</typeparam>
            <param name="key">Unique key of the item to be removed.</param>
            <param name="removedItem">Out parameter through which the removed item from cache is returned</param>
            <param name="lockHandle">If the item is locked, it can be removed only if the correct LockHandle is specified. LockHandle should be the same which was used initially to lock the item, otherwise you will get the 'OperationFailedException'.</param>
            <param name="version">The version of the item to be removed. The item is removed from the cache,
            only if this is still the most recent version in the cache.</param>
            <param name="writeThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating the data source. This can be either WriteThru, WriteBehind or none.</param>
            <returns>Flag which determines the status of remove operation. True if item was removed successfully from the cache
             or False if remove opeartaion failed.</returns>
            <exception cref="T:System.ArgumentNullException">Key contains a null reference.</exception>
            <exception cref="T:System.ArgumentException">Key is not serializable.</exception>
            <example>The following example demonstrates how you can remove an item from the cache.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            
            Product product = new Product();
            product.Id = 1;
            product.Name = "Chai";
            
            string key = "Product0";
            
            CacheItemVersion version = cache.Add(key, product);
            
            LockHandle lockHandle = new LockHandle();
            object item = cache.Get&lt;Product&gt;(key, true, TimeSpan.Zero, ref lockHandle);
            
            WriteThruOptions writeThruOptions = new WriteThruOptions(WriteMode.WriteThru, "ProdDataSource1");
            
            try
            {
                Product removedProduct = null;
                if (cache.Remove&lt;Product&gt;(key, out removedProduct, lockHandle, version, writeThruOptions))
                {
                    //Removed successfully
                }
                else
                {
                    //Error Occured
                }
            }
            catch(Exception ex)
            {
            ...
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.RemoveBulk(System.Collections.Generic.IEnumerable{System.String},Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Removes the specified items from the <see cref="T:Alachisoft.NCache.Client.ICache"/>. You can also specify the write option such that the items may be removed from both cache and data source.
            </summary>
            <param name="keys">List of unique keys to reference the items.</param>
            /// <param name="writeThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating the data source. This can be either WriteThru, WriteBehind or none.</param>
            <exception cref="T:System.ArgumentNullException">Keys contain a null reference.</exception>
            <exception cref="T:System.ArgumentException">Keys are not serializable.</exception>
            <example>The following example demonstrates how you can remove an item from your application's 
            <see cref="T:Alachisoft.NCache.Client.ICache"/> object.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            
            List&lt;string&gt; keys = new List&lt;string&gt;()
            {
                "Product0",
                "Product1",
                "Product2"
            };
            
            WriteThruOptions writeThruOptions = new WriteThruOptions(WriteMode.WriteThru, "ProdDataSource1");
            
            cache.RemoveBulk(keys, writeThruOptions);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.RemoveBulk``1(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,``0}@,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Removes the specified items from the <see cref="T:Alachisoft.NCache.Client.Cache"/> and returns them to the application in the form of a dictionary as an out Parameter.
            </summary>
            <typeparam name="T">Specifies the type of value obtained from the cache.</typeparam>
            <param name="keys">List of unique keys to reference the items.</param>
            <param name="removedItems">out Parameter through which the removed items from the cache are returned.</param>
            <param name="writeThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating the data source. This can be either WriteThru, WriteBehind or none.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="keys"/> contains a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keys"/> is not serializable.</exception>
            <remarks>
            <para>RemovedItems dictionary contains the key and value of the items that were successfully removed from the cache.</para>
            </remarks>
            <example>The following example demonstrates how you can remove multiple of items from your application's 
            <see cref="T:Alachisoft.NCache.Client.ICache"/> object.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            
            List&lt;string&gt; keys = new List&lt;string&gt;()
            {
                "Product0",
                "Product1",
                "Product2"
            };
            
            WriteThruOptions writeThruOptions = new WriteThruOptions(WriteMode.WriteThru, "ProdDataSource1");
            
            IDictionary&lt;string, Product&gt; products = null;
            cache.RemoveBulk&lt;Product&gt;(keys,out products);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.RemoveAsync``1(System.String,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Removes an item from the cache asynchronously, with a cache key to reference its location
            and WriteThruOptions.
            </summary>
            <typeparam name="T">Specifies the type of value obtained from the cache.</typeparam>
            <param name="key">Unique key of the item to be removed.</param>
            <param name="writeThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating the data source. This can be either WriteThru, WriteBehind or none.</param>
            <returns>
            Task that performs a remove operation in the background. Once completed returns the item that was removed from the cache.
            Task Status property can be used to determine status of the Task that can be IsCanceled, IsCompleted, and IsFaulted.
            </returns>
            /// <example>The following example demonstrates how you can remove an item from your application's 
            <see cref="T:Alachisoft.NCache.Client.Cache"/> object asynchronously.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            
            string key = "Product0";
            
            WriteThruOptions writeThruOptions = new WriteThruOptions(WriteMode.WriteThru, "ProdDataSource1");
            
            cache.RemoveAsync&lt;Product&gt;(key, writeThruOptions).ContinueWith(task => OnItemRemoved(key, task));
            
            private static void OnItemRemoved(string key, Task&lt;Product&gt; task)
            {
                if (task.Status == TaskStatus.RanToCompletion)
                {
                ...
                }
                if (task.Status == TaskStatus.Faulted)
                {
                ...
                }
                if (task.Exception != null)
                {
                ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.Contains(System.String)">
            <summary>
            Determines whether the cache contains a specific key.
            </summary>
            <param name="key">The key to locate in the cache.</param>
            <returns>True, if the <see cref="T:Alachisoft.NCache.Client.ICache"/> contains an element 
            with the specified key; otherwise, false.</returns>
            <remarks>In most of the cases this method's implementation is close to O(1).
            <para><b>Note:</b> In a partitioned cluster this operation is an expensive one as it might 
            result in network calls. It is therefore advised to use this property only when required.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Key contains a null reference.</exception>
            <exception cref="T:System.ArgumentException"> Key is not serializable.</exception>
            <example>The following example demonstrates how to check for containment of an item in the cache.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            
            if(cache.Contains("Product0"))
            {
            	Console.WriteLine("Item found!");
            }
            </code>        
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.ContainsBulk(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether the cache contains specifiec keys.
            </summary>
            <param name="keys">IEnumerable collection of keys.</param>
            <returns>
            Dictionary of Keys with flag to dertermine presence of each key in cache.
            True if the <see cref="T:Alachisoft.NCache.Client.ICache"/> contains an element 
            with the specified key; otherwise, false.
            </returns>
            <remarks>
            <para><b>Note:</b> In a partitioned cluster this operation is an expensive one as it might 
            result in network calls. It is, therefore, advised to use this property only when required.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Keys contain a null reference.</exception>
            <exception cref="T:System.ArgumentException">Keys are not serializable.</exception>
            <example>The following example demonstrates how to check for containment of an item in the <see cref="T:Alachisoft.NCache.Client.ICache"/>.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            
            List&lt;string&gt; keys = new List&lt;string&gt;()
            {
                "Product0",
                "Product1"
            };
            
            IDictionary&lt;string, bool&gt; result = cache.ContainsBulk(list);
            </code>        
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.Clear">
            <summary>
            Removes all elements from the <see cref="T:Alachisoft.NCache.Client.ICache"/>.
            </summary>
            <remarks>In most of the cases this method's implementation is close to O(1).
            </remarks>
            <example>The following example demonstrates how to clear the <see cref="T:Alachisoft.NCache.Client.ICache"/>.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            
            cache.Clear();
            </code>   
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.ClearClientCache">
            <summary>
            Removes all elements from the client cache.
            </summary>                       
            <example>The following example demonstrates how to clear the client cache.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            
            cache.ClearClientCache();
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.Unlock(System.String,Alachisoft.NCache.Client.LockHandle)">
            <summary>
            Unlocks a locked cached item, if the correct LockHandle is specified.
            If LockHandle is null, it forcefully unlocks a locked cached item.
            </summary>
            <param name="key">Key of the cached item to be unlocked.</param>
            <param name="lockHandle">An instance of <see cref="T:Alachisoft.NCache.Client.LockHandle"/> that is generated when the lock is acquired.</param>
            <example>
            The following example demonstrates how to unlock a cached item.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            string key = "Product0";
            
            cache.Unlock(key, lockHandle);
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.Lock(System.String,System.TimeSpan,Alachisoft.NCache.Client.LockHandle@)">
             <summary>
             Acquires a lock on an item in the cache.
             </summary>
             <param name="key">Key of cached item to be locked.</param>
             <param name="lockTimeout">An instance of <see cref="T:System.TimeSpan"/> after which the lock is automatically released.</param>
             <param name="lockHandle">An instance of <see cref="T:Alachisoft.NCache.Client.LockHandle"/> that will be filled in with the lock information, if lock is acquired successfully.</param>
             <returns>Whether or not lock was acquired successfully.</returns>
             <example>
             The following example demonstrates how to lock a cached item.
             <code>
             
             ICache cache = CacheManager.GetCache("demoCache");
             string key = "Product0";
             
             LockHandle lockHandle = new LockHandle();
            
             bool locked = cache.lock(key, new TimeSpan(0,0,10), out lockHandle);
             
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.GetCacheStream(System.String,Alachisoft.NCache.Client.CacheStreamAttributes)">
            <summary>
            Gets a <see cref="T:Alachisoft.NCache.Client.CacheStream"/> instance.
            </summary>
            <param name="key">The key used to reference the stream.</param>
            <param name="cacheStreamAttributes">Instance of <see cref="T:Alachisoft.NCache.Client.CacheStreamAttributes"/> to set attributes of the stream.</param>
            <returns>An instance of CacheStream.</returns>
            <example>The following example demonstrates how to get the cache stream with Stream mode, Expiration and Cache Item Priority.
            box server control.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            
            string key = "Product1";
            
            CacheStreamAttributes cacheStreamAttributes = new CacheStreamAttributes(StreamMode.ReadWithoutLock);
            cacheStreamAttributes.CacheItemPriority = CacheItemPriority.Normal;
            cacheStreamAttributes.Expiration = new Expiration(ExpirationType.None);
            
            cache.GetCacheStream("abc", cacheStreamAttributes);
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICache.GetJsonEnumerator">
            <summary>
            Retrieves a dictionary enumerator used to iterate
            through the key settings and their values as JSON objects
            contained in the cache.
            </summary>
            <remarks>
            <para>
            To use GetJsonEnumerator method, cache serilization must be set to JSON instead of Binary.
            </para>
            <para>
            <b>Note:</b> Just like <see cref="P:Alachisoft.NCache.Client.Cache.Count"/> in a cluster, especially a partitioned cluster,
            this operation is an expensive one and may require network calls. It is, therefore, advised to use 
            this method only when required.
            </para>
            </remarks>
            <returns>An enumerator to iterate through the <see cref="T:Alachisoft.NCache.Client.Cache"/> as JSON objects.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.IStore.ClientInfo">
            <summary>
            Displays the information related to this client.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.IStore.ConnectedClients">
            <summary>
            Gets the information of all connected clients to the cache.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.IStore.NotificationService">
            <summary>
            Gets an instance of <see cref="T:Alachisoft.NCache.Client.Services.INotificationService"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Client.IStore.Clear" -->
        <member name="M:Alachisoft.NCache.Client.Core.IToolCache.GetInternalCacheItem(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Core.IToolCache.InsertBulkCacheItem(System.Collections.Generic.IDictionary{System.String,Alachisoft.NCache.Client.CacheItem})">
            <summary>
            
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.Core.IToolCache.GetStoreType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Core.IToolCache.IsPersistenceEnabled">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.StoreBase.ToString">
            <summary>
            The string representation of the cache object. 
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.StoreManager._storeBase">
            <summary> Underlying implementation of NCache. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.StoreManager._storeCollection">
            <summary> Contains all initialized instances of caches. They can be accessed using their cache-ids </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.StoreManager.GetStore``1(System.String,Alachisoft.NCache.Client.StoreConnectionOptions)">
            <summary>
            Returns an instance of <see cref="T:Alachisoft.NCache.Client.ICache"/> for this application.
            </summary>
            <param name="storeName">The identifier for the <see cref="T:Alachisoft.NCache.Client.ICache"/>.</param>
            <param name="storeConnectionOptions"><see cref="T:Alachisoft.NCache.Client.CacheConnectionOptions"/> parameters for <see cref="T:Alachisoft.NCache.Client.ICache"/> connection.</param>
            <param name="clientCacheName">The identifier for the ClientCache.</param>
            <param name="clientCacheConnectionOptions"><see cref="T:Alachisoft.NCache.Client.CacheConnectionOptions"/> parameters for ClientCache connection.</param>
            <returns>Instance of <see cref="T:Alachisoft.NCache.Client.ICache"/>.</returns>
            <remarks>
            The <paramref name="clientCacheName"/> parameter represents the registration/config name of the Client Cache (L1 Cache). 
            Depending upon the configuration the <see cref="T:Alachisoft.NCache.Client.ICache"/> object is 
            created inproc or outproc.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="storeName"/> is a null reference.</exception>
            <code>
            CacheConnectionOptions cacheConnectionOptions = new CacheConnectionOptions();
            
            cacheConnectionOptions.LoadBalance = true;
            cacheConnectionOptions.ConnectionRetries = 5;
            cacheConnectionOptions.Mode = IsolationLevel.OutProc;
            cacheConnectionOptions.ClientRequestTimeOut = TimeSpan.FromSeconds(30);
            cacheConnectionOptions.UserCredentials = new Credentials("domain\\user-id", "password");
            cacheConnectionOptions.RetryInterval = TimeSpan.FromSeconds(5);
            cacheConnectionOptions.ServerList = new List&lt;ServerInfo&gt;();
            {
            	new ServerInfo("remoteServer",9800)
            };
            
            CacheConnectionOptions clientConnectionOptions = new CacheConnectionOptions();
            clientConnectionOptions.Mode = IsolationLevel.InProc;
            
            ICache cache = CacheManager.GetCache("demoCache", cacheConnectionOptions,"clientCache",clientConnectionOptions);
            </code>
            
        </member>
        <member name="M:Alachisoft.NCache.Client.StoreManager.GetStoreClients(System.String,System.Int32,Alachisoft.NCache.Client.CacheConnection)">
            <summary>
            Get information of clients connected to each server node in a cache.
            </summary>
            <param name="cacheName">The identifier for the <see cref="T:Alachisoft.NCache.Client.ICache"/>.</param>
            <param name="connection"><see cref="T:Alachisoft.NCache.Client.CacheConnection"/> parameters for connection to Cache.</param>
            <returns>Key value pair of <see cref="T:Alachisoft.NCache.Runtime.CacheManagement.ServerNode"/> and list of <see cref="T:Alachisoft.NCache.Runtime.Caching.ClientInfo"/> in a cache. </returns>
            <example>
            The following example shows how to get connected clients to each server node in a cache.
            <code>
            CacheConnection cacheConnection = new CacheConnection("remoteServer", 8250);
            cacheConnection.UserCredentials = new Credentials("domain\\user-id", "password");
            
            Dictionary&lt;ServerNode, List&lt;Alachisoft.NCache.Runtime.Caching.ClientInfo&gt; info = CacheManager.GetCacheClients("demoCache", cacheConnection);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.StoreManager.GetStoreHealthInternal(System.String,System.Int32,Alachisoft.NCache.Client.ConnectionOptions)">
            <summary>
            Get Health status of a cache.
            </summary>
            <param name="cacheName">The identifier for the <see cref="T:Alachisoft.NCache.Client.ICache"/>.</param>
            <param name="connection"><see cref="T:Alachisoft.NCache.Client.CacheConnection"/> parameters for connection to Cache.</param>
            <returns><see cref="T:Alachisoft.NCache.Runtime.CacheManagement.CacheHealth"/> containing information cache including <see cref="T:Alachisoft.NCache.Runtime.CacheManagement.NodeStatus"/> for each node in cache.</returns>
            <example>
            The following example shows the to Health status of a cache.
            <code>
            CacheConnection cacheConnection = new CacheConnection("remoteServer", 8250);
            cacheConnection.UserCredentials = new Credentials("domain\\user-id", "password");
            
            CacheHealth cacheHealth = CacheManager.GetCacheHealth("demoCache",cacheConnection);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.StoreManager.StartStoreInternal(System.String,System.Int32,Alachisoft.NCache.Client.ConnectionOptions)">
            <summary>
            Starts an out-proc cache. The end result is the same as that of starting the 
            cache using NCache Manager. It starts the cache on the specified cache server.
            If the Cache Server could not be contacted then it throws a <see cref="T:Alachisoft.NCache.Runtime.Exceptions.ManagementException"/> exception.
            It tries to get the Security Parameters from the Client.ncconf.
            </summary>
            <param name="storeName">The identifier for the <see cref="T:Alachisoft.NCache.Client.ICache"/>.</param>
            <param name="connection"><see cref="T:Alachisoft.NCache.Client.CacheConnection"/> parameters for connection to Cache.</param>
            <example>
            The following example show to to start cache from application.
            <code>
            CacheConnection cacheConnection = new CacheConnection("remoteServer", 8250);
            cacheConnection.UserCredentials = new Credentials("domain\\user-id", "password");
            
            CacheManager.StartCache("demoCache", cacheConnection);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.StoreManager.StopStoreInternal(System.String,System.Int32,Alachisoft.NCache.Client.ConnectionOptions,System.Boolean)">
            <summary>
            Stops an out-proc cache. The end result is the same as that of stoping the 
            cache using NCache Manager. It stops the cache only on the same server where the 
            client application is running.
            If the Cache Server could not be contacted then it throws a <see cref="T:Alachisoft.NCache.Runtime.Exceptions.ManagementException"/> exception.
            It tries to get the Security Parameters from the Client.ncconf.
            </summary>
            <param name="storeName">The identifier for the <see cref="T:Alachisoft.NCache.Client.ICache"/>.</param>
            <param name="connection"><see cref="T:Alachisoft.NCache.Client.CacheConnection"/> parameters for connection to Cache.</param>
            <param name="gracefullyShutDownNode">The identifier for graceful node shutdown.</param>
            <example>
            The following example show to to stop cache from application.
            <code>
            CacheConnection cacheConnection = new CacheConnection("remoteServer", 8250);
            cacheConnection.UserCredentials = new Credentials("domain\\user-id", "password");
            
            CacheManager.Stop("demoCache", cacheConnection, true);
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Client.Services.IExecutionService">
            <summary>
            This interface contains properties and methods required for a Execution Service.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Client.Services.IExecutionService.InvokeEntryProcessor(Alachisoft.NCache.Runtime.Processor.EntryProcessorOptions)" -->
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Client.Services.IExecutionService.GetEntryProcessorTask(System.String)" -->
        <member name="M:Alachisoft.NCache.Client.Services.IExecutionService.GetEntryProcessorTasks">
             <summary>
             Gets all submitted tasks.
             </summary>
             <returns>Collection of currently executing tasks.</returns>
             <example>
             <code>
             ICache cache = CacheManager.GetCache("demoClusteredCache");
             
             string key1 = "2202";
             
             Product product1 = new Product()
             {
             	Id = 4,
             	Category = "Clothes",
             	UnitPrice = 4,
             	UnitsAvailable = 2
             };
             
             string key2 = "2203";
             Product product2 = new Product()
             {
             	Id = 4,
             	Category = "Shoes",
             	UnitPrice = 5,
             	UnitsAvailable = 9
             };
             
             cache.Add(key1, product1);
             cache.Add(key2, product2);
             
            
             ICollection&lt;IEntryProcessorTrackableTask&gt; runningTasks = cache.ExecutionService.GetEntryProcessorTasks();
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IExecutionService.Invoke(System.Collections.Generic.IEnumerable{System.String},Alachisoft.NCache.Runtime.Processor.IEntryProcessor,Alachisoft.NCache.Runtime.Caching.ReadThruOptions,Alachisoft.NCache.Runtime.Caching.WriteThruOptions,System.Object[])">
            <summary>
            Execution of entry processor on a set of keys (regardless of caching topology used), allows to execute code
            against a set of cache entries on server-side, without fetching any data on client-side. 
            </summary>
            <param name="keys">Set of keys of Cache entries on which EntryProcessor will be executed.</param>
            <param name="entryProcessor">IEntryProcessor instance.</param>
            <param name="readThruOption"><see cref="T:Alachisoft.NCache.Runtime.Caching.ReadThruOptions"/> to read from data source. These can be either ReadThru, ReadThruForced or none.</param>
            <param name="writeThruOption"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating the data source. This can be either WriteThru, WriteBehind or none.</param>
            <param name="arguments">Arguments list for the process.</param>
            <returns>Returns a collection of instances of IEntryProcessorResult.</returns>
            <example>
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            
            //Get a new instance of sample Class implementing EntryProcessor interface.
            CustomEntryProcessor myProcessor = new CustomEntryProcessor();
            string[] keys = new string[] { "1", "5", "12", "15" };
            
            cache.Insert(keys[0], "Value1");
            cache.Insert(keys[1], "Value1");
            cache.Insert(keys[2], "Value1");
            cache.Insert(keys[3], "Value1");
            //Invoking the Entry processor against a set of items.
            
            ReadThruOptions readThruOptions = new ReadThruOptions(ReadMode.ReadThru, "ProdDataSource");
            WriteThruOptions writeThruOptions = new WriteThruOptions(WriteMode.WriteThru, "ProdDataSource");
            
            ICollection retEntries = cache.ExecutionService.Invoke(keys, myProcessor,readThruOptions,writeThruOptions);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IExecutionService.Invoke(System.String,Alachisoft.NCache.Runtime.Processor.IEntryProcessor,Alachisoft.NCache.Runtime.Caching.ReadThruOptions,Alachisoft.NCache.Runtime.Caching.WriteThruOptions,System.Object[])">
            <summary>
            Execution of entry processor (regardless of caching topology used), allows to execute code against a cache entry
            on server-side, without fetching any data on client-side. 
            </summary>
            <param name="key">Key of Cache entry on which the EntryProcessor is executed.</param>
            <param name="entryProcessor">IEntryProcessor instance</param>
            <param name="readThruOption"><see cref="T:Alachisoft.NCache.Runtime.Caching.ReadThruOptions"/> to read from data source. These can be either ReadThru, ReadThruForced or none.</param>
            <param name="writeThruOption"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating the data source. This can be either WriteThru, WriteBehind or none.</param>
            <param name="arguments">Arguments list for the process.</param>
            <returns>Returns an instance of IEntryProcessorResult.</returns>
            <example>
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            
            //Get a new instance of sample Class implementing EntryProcessor interface.
            CustomEntryProcessor myProcessor = new CustomEntryProcessor();
            string[] keys = new string[] { "1", "5", "12", "15" };
            
            cache.Insert(keys[0], "Value1");
            cache.Insert(keys[1], "Value1");
            cache.Insert(keys[2], "Value1");
            cache.Insert(keys[3], "Value1");
            //Invoking the Entry processor against a set of items.
            
            ReadThruOptions readThruOptions = new ReadThruOptions(ReadMode.ReadThru, "ProdDataSource");
            WriteThruOptions writeThruOptions = new WriteThruOptions(WriteMode.WriteThru, "ProdDataSource");
            Object invokerVal = cache.ExecutionService.Invoke(keys[2], myProcessor,readThruOptions,writeThruOptions);
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Client.Services.IMessagingService">
            <summary>
            This interface contains properties and methods required for Messaging Service. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IMessagingService.GetTopic(System.String,Alachisoft.NCache.Runtime.Caching.Messaging.TopicSearchOptions)">
            <summary>
            Retrieves the topic instance against the <see cref="T:Alachisoft.NCache.Runtime.Caching.Messaging.TopicSearchOptions"/> and provided name or pattern. 
            </summary>
            <param name="topicName">Name or pattern to identify topic.</param>
            <param name="searchOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.Messaging.TopicSearchOptions"/> specifies to search topic by name or pattern.</param>
            <returns>Returns the topic instance, null if it does not exist.</returns>
            <example>The following example demonstrates how to get topic by name.
            First, initialize the cache.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            </code>
            Then, get topic from MessagingService.
            <code>
            ITopic topic = cache.MessagingService.GetTopic("mytopic", TopicSearchOptions.ByName);
            TopicSearch Option is an optional paramater which has default value of ByName 
            </code>        
            
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IMessagingService.CreateTopic(System.String,Alachisoft.NCache.Runtime.Messaging.TopicPriority)">
            <summary>
            Creates and retrieves the topic instance against the specified topic name.
            </summary>
            <param name="topicName">Name or a pattern to identify topic.</param>
            <param name="topicPriority">Topic Priority is an optional parameter which has a default value of TopicPriority.Normal.</param>
            <returns>
            Returns the topic instance, null if it does not exist.
            </returns>
            <example>
            The following example demonstrates how to create a topic.
            First, initialize the cache.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            </code>
            Then, get messaging service from the cache.
            <code>
            IMessagingService messagingService = cache.MessagingService;
            </code>
            Then, create the topic from messagingService.
            <code>
            ITopic topic = messagingService.CreateTopic("mytopic");
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IMessagingService.DeleteTopic(System.String)">
            <summary>
            Deletes the topic instance against the specified topic name.
            </summary>
            <param name="topicName">Name to identify topic.</param>
            <example>The following example demonstrates how to delete a topic. 
            
            First, initialize the cache.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            </code>
            
            Then, get messaging service from cache.
            <code>
            IMessagingService messagingService=cache.MessagingService;
            </code>
            
            The,n delete topic from messagingService.
            <code>
            messagingService.DeleteTopic("mytopic");
            </code>        
            
            </example>        
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IMessagingService.DeleteTopicAsync(System.String)">
            <summary>
            Deletes the topic instance asynchronously, against the specified topic name.
            </summary>
            <param name="topicName">Name to identify topic.</param>
            <returns>
            Task that performs an delete topic operation in the background. Task Status property can be used to determine status
            of the Task that can be canceled, completed or faulted.
            </returns>
            <example>The following example demonstrates how to delete a topic. 
            
            First, initialize cache.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            </code>
            
            Then, get messaging service from cache.
            <code>
            IMessagingService messagingService=cache.MessagingService;
            </code>
            
            Then, delete topic from messagingService.
            <code>
            messagingService.DeleteTopicAsync("mytopic").ContinueWith(task => 
            {
                if (task.Status == TaskStatus.RanToCompletion)
                {
                    Console.WriteLine("Topic Deleted Successfully");
                }
                if (task.Status == TaskStatus.Faulted)
                {
                    Console.WriteLine("Error has occurred");
                }
                if (task.Exception != null)
                {
                    Console.WriteLine(task.Exception);
                }
            });
            </code>        
            
            </example>        
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IMessagingService.RegisterCQ(Alachisoft.NCache.Client.ContinuousQuery)">
            <summary>
            Registers the specified Continuous Query with the cache server. You can use this method multiple times in your application depending on its need to receive the notifications for a change in the dataset of your query. 
            This method takes as argument an object of ContinuousQuery which has the query and the callbacks registered to it.
            </summary>
            <param name="query">SQL-like query to be executed on cache.</param>
            <example>
            The following example demonstrates how to register a continuous query with item added, updated and removed callbacks.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            
            string queryString = "SELECT MyApplication.Employee WHERE this.Salary > ?";
            
            QueryCommand queryCommand = new QueryCommand(queryString);
            queryCommand.Parameters.Add("Salary", 50000);
            
            ContinuousQuery continuousQuery = new ContinuousQuery(queryCommand);
            
            continuousQuery.RegisterNotification(new QueryDataNotificationCallback(query_ItemAdded), EventType.ItemAdded, EventDataFilter.None);
            continuousQuery.RegisterNotification(new QueryDataNotificationCallback(query_ItemUpdated), EventType.ItemUpdated, EventDataFilter.DataWithMetadata);
            continuousQuery.RegisterNotification(new QueryDataNotificationCallback(query_ItemRemoved), EventType.ItemRemoved, EventDataFilter.None);
            
            cache.MessagingService.RegisterCQ(continuousQuery);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IMessagingService.RegisterCacheNotification(System.String,Alachisoft.NCache.Client.CacheDataNotificationCallback,Alachisoft.NCache.Runtime.Events.EventType,Alachisoft.NCache.Runtime.Events.EventDataFilter)">
            <summary>
            Registers cache notification <see cref="T:Alachisoft.NCache.Runtime.Events.EventType"/> of type item added, updated or removed against specified key in cache.
            </summary>
            <param name="key">Unique key to identify the cache item.</param>
            <param name="callback">The <see cref="T:Alachisoft.NCache.Client.CacheDataNotificationCallback"/> that is invoked when specified <see cref="T:Alachisoft.NCache.Runtime.Events.EventType"/> is triggered against specified key in cache.</param>
            <param name="eventType">States whether the event is to be raised on item added, updated or removed.</param>
            <param name="eventDataFilter">States whether to receive metadata, data with metadata or none when a notification is triggered.</param>
            <example>The following example demonstrates how to register item added, updated or removed notification against a key in cache.
            First, create an ItemCallback.
            <code>
            ItemCallback(string key, CacheEventArg cacheEventArgs)
            {
               ...
            }
            </code>
            Then, register the Key Notification.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            cache.MessagingService.RegisterCacheNotification(key, new CacheDataNotificationCallback(ItemCallback), EventType.ItemUpdated, EventDataFilter.DataWithMetadata);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IMessagingService.RegisterCacheNotification(System.Collections.Generic.IEnumerable{System.String},Alachisoft.NCache.Client.CacheDataNotificationCallback,Alachisoft.NCache.Runtime.Events.EventType,Alachisoft.NCache.Runtime.Events.EventDataFilter)">
            <summary>
            Registers cache notification <see cref="T:Alachisoft.NCache.Runtime.Events.EventType"/> of type item added, updated or removed against specified keys in cache.
            </summary>
            <param name="keys">IEnumerable list of keys to identify the cache item.</param>
            <param name="callback">The <see cref="T:Alachisoft.NCache.Client.CacheDataNotificationCallback"/> that is invoked when specified <see cref="T:Alachisoft.NCache.Runtime.Events.EventType"/> is triggered against specified keys in cache.</param>
            <param name="eventType">Tells whether the event is to be raised on item added, updated or removed.</param>
            <param name="eventDataFilter">Tells whether to receive metadata, data with metadata or none when a notification is triggered.</param>
            <remarks>
            Only single notification is registered against duplicate keys in <paramref name="keys"/>.
            </remarks>
            <example>The following example demonstrates how to register item added, updated or removed notification against multiple keys in cache.
            First, create an ItemCallback.
            <code>
            ItemCallback(string key, CacheEventArg cacheEventArgs)
            {
               ...
            }
            </code>
            Then, register the Key Notification.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            List&lt;string&gt; keys = new List&lt;string&gt;()
            {
            	"Product0",
            	"Product1",
            	"Product2"
            };
            
            cache.MessagingService.RegisterCacheNotification(keys, new CacheDataNotificationCallback(ItemCallback), EventType.ItemAdded, EventDataFilter.DataWithMetadata);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IMessagingService.RegisterCacheNotification(Alachisoft.NCache.Client.CacheDataNotificationCallback,Alachisoft.NCache.Runtime.Events.EventType,Alachisoft.NCache.Runtime.Events.EventDataFilter)">
            <summary>
            Registers cache notification <see cref="T:Alachisoft.NCache.Runtime.Events.EventType"/> of type item added, updated or removed against specified keys in cache.
            </summary>
            <param name="callback">The <see cref="T:Alachisoft.NCache.Client.CacheDataNotificationCallback"/> that is invoked when specified <see cref="T:Alachisoft.NCache.Runtime.Events.EventType"/> is triggered in cache.</param>
            <param name="eventType">Tells whether the event is to be raised on Item Added, Updated or Removed.</param>
            <param name="eventDataFilter">Tells whether to receive metadata, data with metadata or none when a notification is triggered.</param>
            <returns>Instance of <see cref="T:Alachisoft.NCache.Client.CacheEventDescriptor"/> required to <see cref="o:UnRegisterCacheNotification"/></returns>
            <remarks>
            Client application can show interest in receiving events if an item is added, update or removed from the cache.
            As soon as the item is added, updated or removed from the cache, the client application is notified
            and actions can be taken accordingly.
            </remarks>
            <example>The following example demonstrates how to register Item added, updated or removed notification in cache.
            First, create an ItemCallback.
            <code>
            ItemCallback(string key, CacheEventArg e)
            {
               ...
            }
            </code>
            Then, register the Cache Notification.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            CacheEventDescriptor descriptor = cache.MessagingService.RegisterCacheNotification(new CacheDataNotificationCallback(ItemCallback), EventType.ItemAdded, EventDataFilter.None);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IMessagingService.UnRegisterCQ(Alachisoft.NCache.Client.ContinuousQuery)">
            <summary>
            Unregisters an already registered continuous query to deactivate it on the cache server. Like RegisterCQ, it takes as argument an object of ContinuousQuery to unregister the callbacks which are no more fired after this call.
            <para>
            This method is used when the user is no more interested in receiving notifications for changes in a query result set.
            </para>
            </summary>
            <param name="query">SQL-like query to be executed over the cache.</param>
            <example>
            The following example demonstrates how to unregister a Continuous Query on the cache.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            
            string queryString = "SELECT MyApplication.Employee WHERE this.Salary > ?";
            
            QueryCommand queryCommand = new QueryCommand(queryString);
            queryCommand.Parameters.Add("Salary", 50000);
            
            ContinuousQuery continuousQuery = new ContinuousQuery(queryCommand);
            
            continuousQuery.RegisterNotification(new QueryDataNotificationCallback(query_ItemAdded), EventType.ItemAdded, EventDataFilter.None);
            continuousQuery.RegisterNotification(new QueryDataNotificationCallback(query_ItemUpdated), EventType.ItemUpdated, EventDataFilter.DataWithMetadata);
            continuousQuery.RegisterNotification(new QueryDataNotificationCallback(query_ItemRemoved), EventType.ItemRemoved, EventDataFilter.None);
            
            cache.MessagingService.RegisterCQ(continuousQuery);
            
            cache.MessagingService.UnRegisterCQ(continuousQuery);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IMessagingService.UnRegisterCacheNotification(Alachisoft.NCache.Client.CacheEventDescriptor)">
            <summary>
            Unregisters a cache-level event that may have been registered.
            </summary>
            <param name="discriptor">The descriptor returned when the general event was registered.</param>
            <example>
            Let us consider you registered an event against a cache.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            CacheEventDescriptor descriptor = cache.MessagingService.RegisterCacheNotification(new CacheDataNotificationCallback(ItemCallback), EventType.ItemAdded, EventDataFilter.None);
            </code>
            Now, Unregister this event by using the CacheEventDescriptor returned by regitering the event.
            <code>
            cache.MessagingService.UnRegisterCacheNotification(descriptor);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IMessagingService.UnRegisterCacheNotification(System.String,Alachisoft.NCache.Client.CacheDataNotificationCallback,Alachisoft.NCache.Runtime.Events.EventType)">
            <summary>
            Unregisters the <see cref="T:Alachisoft.NCache.Client.CacheItemUpdatedCallback"/> already registered for the specified key.
            </summary>
            <param name="key">Unique key to identify the cache item.</param>
            <param name="callback">The <see cref="T:Alachisoft.NCache.Client.CacheDataNotificationCallback"/> that is invoked when specified <see cref="T:Alachisoft.NCache.Runtime.Events.EventType"/> is triggered in cache.</param>
            <param name="EventType">Tells whether the event is to be raised on Item Added, Updated or Removed.</param>
            <example>The following example registers and unregisters update and remove notification against a key
            First, create an ItemCallback.
            <code>
            ItemCallback(string key, CacheEventArg cacheEventArgs)
            {
               ...
            }
            </code>
            Then, register the Key Notification.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            cache.MessagingService.RegisterCacheNotification(key, new CacheDataNotificationCallback(ItemCallback), EventType.ItemUpdated, EventDataFilter.DataWithMetadata);
            </code>
            Now, Unregister this event.
            <code>
            cache.MessagingService.UnRegisterCacheNotification(key, new CacheDataNotificationCallback(ItemCallback), EventType.ItemUpdated);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IMessagingService.UnRegisterCacheNotification(System.Collections.Generic.IEnumerable{System.String},Alachisoft.NCache.Client.CacheDataNotificationCallback,Alachisoft.NCache.Runtime.Events.EventType)">
            <summary>
            Unregisters cache notification against specified keys in cache.
            </summary>
            <param name="keys">IEnumerable list of keys to identify the cache item.</param>
            <param name="callback">The <see cref="T:Alachisoft.NCache.Client.CacheDataNotificationCallback"/> that is invoked when specified <see cref="T:Alachisoft.NCache.Runtime.Events.EventType"/> is triggered against specified keys in cache.</param>
            <param name="EventType">Tells whether the event is to be raised on Item Added, Updated or Removed.</param>
            <example>The following example demonstrates how to unregister Item added, updated or removed notification against multiple keys in cache.
            First, create an ItemCallback.
            <code>
            ItemCallback(string key, CacheEventArg cacheEventArgs)
            {
               ...
            }
            </code>
            Then, register the Key Notification.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            
            List&lt;string&gt; keys = new List&lt;string&gt;()
            {
            	"Product0",
            	"Product1",
            	"Product2"
            };
            
            cache.MessagingService.RegisterCacheNotification(keys, new CacheDataNotificationCallback(ItemAdded), EventType.ItemAdded, EventDataFilter.DataWithMetadata);
            </code>
            Now, Unregister this event.
            <code>
            cache.MessagingService.UnRegisterCacheNotification(keys, new CacheDataNotificationCallback(ItemAdded), EventType.ItemAdded);
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Client.Services.INotificationService">
            <summary>
            This interface contains properties and methods required for a Notification Service. 
            </summary>
        </member>
        <member name="E:Alachisoft.NCache.Client.Services.INotificationService.CacheCleared">
            <summary>
            Event for notifying applications when the <see cref="T:Alachisoft.NCache.Client.ICache"/> is cleared.
            </summary>
            <remarks>Since this handler is invoked every time the <see cref="T:Alachisoft.NCache.Client.ICache"/> is cleared, doing a lot
            of processing inside the handler might have an impact on the performance of the cache and cluster. It
            is therefore advisable to do minimal processing inside the handler.
            </remarks>
            <returns>
            Defines a callback method for notifying applications when the <see cref="T:Alachisoft.NCache.Client.ICache"/> is cleared.
            </returns>
        </member>
        <member name="E:Alachisoft.NCache.Client.Services.INotificationService.CacheClientConnectivityChanged">
            <summary>
            Event for notifying the application about the status of cache client connectivity.
            </summary>
            <remarks>This handler is invoked when cache client connectivity is changed.</remarks>
            <returns>
            Defines a callback method for notifying the application about the status of cache client connectivity.
            </returns>
        </member>
        <member name="E:Alachisoft.NCache.Client.Services.INotificationService.CacheStopped">
            <summary>
            Event for notifying applications when the <see cref="T:Alachisoft.NCache.Client.ICache"/> is stopped.
            </summary>
            <remarks>This handler is invoked when a <see cref="T:Alachisoft.NCache.Client.ICache"/> is stopped.</remarks>
            <returns>
            Defines a callback method for notifying applications when the Alachisoft.NCache.Client.Cache stops.
            </returns>
        </member>
        <member name="E:Alachisoft.NCache.Client.Services.INotificationService.MemberJoined">
            <summary>
            Event for notifying applications when a new node joins the cluster.
            </summary>
            <remarks>This handler is invoked every time a new node joins the cluster.</remarks>
            <returns>
            Defines a callback method for notifying applications when a new node joins the cluster.
            </returns>
        </member>
        <member name="E:Alachisoft.NCache.Client.Services.INotificationService.MemberLeft">
            <summary>
            Event for notifying applications when a node leaves the cluster.
            </summary>
            <remarks>This handler is invoked every time a node leaves the cluster.</remarks>
            <returns>
            Defines a callback method for notifying applications when a node leaves the cluster.
            </returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IJsonPatchService.Update(System.String,Alachisoft.NCache.Runtime.IJsonPatch)">
            <summary>
            Applies <see cref="T:Alachisoft.NCache.Client.JsonPatch"/> to the given key in Cache
            </summary>
            <param name="key">Unique key to identify the cache item.</param>
            <param name="jsonPatch"><see cref="T:Alachisoft.NCache.Client.JsonPatch"/> object to be applied on the value of <paramref name="key"/></param>
            <returns><see cref="T:Alachisoft.NCache.Client.CacheItemVersion"/>: Represents the version of cache item.</returns>
            
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IJsonPatchService.Update(System.String,Alachisoft.NCache.Runtime.IJsonPatch,Alachisoft.NCache.Client.LockHandle,System.Boolean)">
            <summary>
            Applies <see cref="T:Alachisoft.NCache.Client.JsonPatch"/> to the given key in Cache
            </summary>
            <param name="key">Unique key to identify the cache item.</param>
            <param name="jsonPatch"><see cref="T:Alachisoft.NCache.Client.JsonPatch"/> object to be applied on the value of <paramref name="key"/></param>
            <param name="lockHandle">An instance of <seealso cref="T:Alachisoft.NCache.Client.LockHandle"/> that holds the lock information. If the item is locked, then it can only be updated if the correct lockHandle is specified.</param>
            <param name="releaseLock">A flag to determine whether or not the lock should be released after operation is performed.</param>
            <returns><see cref="T:Alachisoft.NCache.Client.CacheItemVersion"/>: Represents the version of cache item.</returns>
            
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IJsonPatchService.Update(System.String,Alachisoft.NCache.Runtime.IJsonPatch,Alachisoft.NCache.Runtime.Caching.WriteThruOptions,Alachisoft.NCache.Client.LockHandle,System.Boolean)">
            <summary>
            Applies <see cref="T:Alachisoft.NCache.Client.JsonPatch"/> to the given key in Cache
            </summary>
            <param name="key">Unique key to identify the cache item.</param>
            <param name="jsonPatch"><see cref="T:Alachisoft.NCache.Client.JsonPatch"/> object to be applied on the value of <paramref name="key"/></param>
            <param name="writeThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating the data source. This can be either WriteThru, WriteBehind or none.</param>
            <param name="lockHandle">An instance of <seealso cref="T:Alachisoft.NCache.Client.LockHandle"/> that holds the lock information. If the item is locked, then it can only be updated if the correct lockHandle is specified.</param>
            <param name="releaseLock">A flag to determine whether or not the lock should be released after operation is performed.</param>
            <returns><see cref="T:Alachisoft.NCache.Client.CacheItemVersion"/>: Represents the version of cache item.</returns>
            
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IJsonPatchService.Update(System.String,Alachisoft.NCache.Runtime.IJsonPatch,Alachisoft.NCache.Client.CacheItemVersion)">
            <summary>
            Applies <see cref="T:Alachisoft.NCache.Client.JsonPatch"/> to the given key in Cache
            </summary>
            <param name="key">Unique key to identify the cache item.</param>
            <param name="jsonPatch"><see cref="T:Alachisoft.NCache.Client.JsonPatch"/> object to be applied on the value of <paramref name="key"/></param>
            <param name="itemVersion">The version of the object.</param>
            <returns><see cref="T:Alachisoft.NCache.Client.CacheItemVersion"/>: Represents the version of cache item.</returns>
            
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IJsonPatchService.Update(System.String,Alachisoft.NCache.Runtime.IJsonPatch,Alachisoft.NCache.Runtime.Caching.WriteThruOptions,Alachisoft.NCache.Client.CacheItemVersion)">
            <summary>
            Applies <see cref="T:Alachisoft.NCache.Client.JsonPatch"/> to the given key in Cache
            </summary>
            <param name="key">Unique key to identify the cache item.</param>
            <param name="writeThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating the data source. This can be either WriteThru, WriteBehind or none.</param>
            <param name="jsonPatch"><see cref="T:Alachisoft.NCache.Client.JsonPatch"/> object to be applied on the value of <paramref name="key"/></param>
            <param name="itemVersion">The version of the object.</param>
            <returns><see cref="T:Alachisoft.NCache.Client.CacheItemVersion"/>: Represents the version of cache item.</returns>
            
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IJsonPatchService.UpdateAsync(System.String,Alachisoft.NCache.Runtime.IJsonPatch)">
            <summary>
            Applies <see cref="T:Alachisoft.NCache.Client.JsonPatch"/> to the given key in Cache
            </summary>
            <param name="key">Unique key to identify the cache item.</param>
            <param name="jsonPatch"><see cref="T:Alachisoft.NCache.Client.JsonPatch"/> object to be applied on the value of <paramref name="key"/></param>
            <returns>
            Task that performs an insert operation in the background. Once completed, returns a version of 
            CacheItem that was added in cache. Task Status property can be used to determine status
            of the Task that can be IsCanceled, IsCompleted, and IsFaulted.
            </returns>
            
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IJsonPatchService.UpdateAsync(System.String,Alachisoft.NCache.Runtime.IJsonPatch,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Applies <see cref="T:Alachisoft.NCache.Client.JsonPatch"/> to the given key in Cache
            </summary>
            <param name="key">Unique key to identify the cache item.</param>
            <param name="jsonPatch"><see cref="T:Alachisoft.NCache.Client.JsonPatch"/> object to be applied on the value of <paramref name="key"/></param>
            <param name="writeThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating the data source. This can be either WriteThru, WriteBehind or none.</param>
            <returns>
            Task that performs an insert operation in the background. Once completed, returns a version of 
            CacheItem that was added in cache. Task Status property can be used to determine status
            of the Task that can be IsCanceled, IsCompleted, and IsFaulted.
            </returns>
            
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IJsonPatchService.UpdateBulk(System.Collections.Generic.IEnumerable{System.String},Alachisoft.NCache.Runtime.IJsonPatch,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Applies the <see cref="T:Alachisoft.NCache.Client.JsonPatch"/> to the given keys
            </summary>
            <param name="keys">Collection of keys.</param>
            <param name="jsonPatch"><see cref="T:Alachisoft.NCache.Client.JsonPatch"/> object to be applied on the value of <paramref name="key"/></param>
            <param name="writeThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating the data source. This can be either WriteThru, WriteBehind or none.</param>
            <returns>Dictionary of keys along with exception that were unable to store in cache.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IJsonPatchService.UpdateBulk(System.String,Alachisoft.NCache.Runtime.IJsonPatch,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Applies the <see cref="T:Alachisoft.NCache.Client.JsonPatch"/> to the cache items with specified group
            </summary>
            <param name="group">Group name</param>
            <param name="jsonPatch"><see cref="T:Alachisoft.NCache.Client.JsonPatch"/> object to be applied on the value of <paramref name="key"/></param>
            <param name="writeThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating the data source. This can be either WriteThru, WriteBehind or none.</param>
            <returns>Dictionary of keys along with exception that were unable to store in cache.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IJsonPatchService.UpdateBulk(Alachisoft.NCache.Runtime.Caching.Tag,Alachisoft.NCache.Runtime.IJsonPatch,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Applies the <see cref="T:Alachisoft.NCache.Client.JsonPatch"/> to the cache items with specified tag
            </summary>
            <param name="tag">A Tag to search cache with.</param>
            <param name="jsonPatch"><see cref="T:Alachisoft.NCache.Client.JsonPatch"/> object to be applied on the value of <paramref name="key"/></param>
            <param name="writeThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating the data source. This can be either WriteThru, WriteBehind or none.</param>
            <returns>Dictionary of keys along with exception that were unable to store in cache.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IJsonPatchService.UpdateBulk(System.Collections.Generic.IEnumerable{Alachisoft.NCache.Runtime.Caching.Tag},Alachisoft.NCache.Client.TagSearchOptions,Alachisoft.NCache.Runtime.IJsonPatch,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Applies the <see cref="T:Alachisoft.NCache.Client.JsonPatch"/> to the cache items with specified group
            </summary>
            <param name="tags">IEnumerable collection of tags to search cache with.</param>
            <param name="type"><see cref="T:Alachisoft.NCache.Client.TagSearchOptions"/> specifies the search type for the tags.</param>
            <param name="jsonPatch"><see cref="T:Alachisoft.NCache.Client.JsonPatch"/> object to be applied on the value of <paramref name="key"/></param>
            <param name="writeThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating the data source. This can be either WriteThru, WriteBehind or none.</param>
            <returns>Dictionary of keys along with exception that were unable to store in cache.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IJsonPatchService.GetJson``1(System.String,System.String,Alachisoft.NCache.Runtime.Caching.ReadThruOptions)">
            <summary>
            Retrieves a portion of cache object from given path
            </summary>
            <typeparam name="T">Specifies the type of retrieved part obtained from the cache object.</typeparam>
            <param name="key">The unique identifier for the cache item to be retrieved.</param>
            <param name="path">Object at the specified path will be returned</param>
            <param name="readThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.ReadThruOptions"/> to read from data source. These can be either ReadThru, ReadThruForced or none.</param>
            <returns>The retrieved object</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IJsonPatchService.GetJson``1(System.String,System.String,System.Boolean,System.TimeSpan,Alachisoft.NCache.Client.LockHandle@)">
            <summary>
            Retrieves a portion of cache object from given path
            </summary>
            <typeparam name="T">Specifies the type of retrieved part obtained from the cache object.</typeparam>
            <param name="key">The unique identifier for the cache item to be retrieved.</param>
            <param name="path">Object at the specified path will be returned</param>
            <param name="acquireLock">A flag to determine whether to acquire a lock or not.</param>
            <param name="lockTimeout">The TimeSpan after which the lock is automatically released.</param>
            <param name="lockHandle">An instance of <seealso cref="T:Alachisoft.NCache.Client.LockHandle"/> to hold the lock information.</param>
            <returns>The retrieved object</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IJsonPatchService.GetJson``1(System.String,System.String,Alachisoft.NCache.Client.CacheItemVersion@,Alachisoft.NCache.Runtime.Caching.ReadThruOptions)">
            <summary>
            Retrieves a portion of cache object from given path
            </summary>
            <typeparam name="T">Specifies the type of retrieved part obtained from the cache object.</typeparam>
            <param name="key">The unique identifier for the cache item to be retrieved.</param>
            <param name="path">Object at the specified path will be returned</param>
            <param name="version">The version of the object.</param>
            <param name="readThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.ReadThruOptions"/> to read from data source. These can be either ReadThru, ReadThruForced or none.</param>        
            <returns>The retrieved object</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IJsonPatchService.GetJsonBulk``1(System.Collections.Generic.IEnumerable{System.String},System.String,Alachisoft.NCache.Runtime.Caching.ReadThruOptions)">
            <summary>
            Retrieves the portions of multiple cache objects
            </summary>
            <typeparam name="T">Specifies the type of retrieved part obtained from the cache object.</typeparam>
            <param name="keys">The keys against which items are to be fetched from cache.</param>
            <param name="path">Object at the specified path will be returned</param>
            <param name="readThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.ReadThruOptions"/> to read from data source. These can be either ReadThru, ReadThruForced or none.</param>
            <returns>The retrieved objects as key-value pairs</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IQueryService.ExecuteReader(Alachisoft.NCache.Client.QueryCommand,System.Boolean,System.Int32)">
            <summary>
            Performs search on the cache based on the query specified. Returns list of key-value pairs in
            a data reader which fulfills the query criteria. This key-value pair has cache key and its respective value.
            You can specify the flag for specifying if you want data with keys.
            </summary>
            <param name="queryCommand"><see cref="T:Alachisoft.NCache.Client.QueryCommand"/> containing query text and values.</param>
            <param name="getData">Flag to indicate whether the resulting values have to be returned with keys or not.</param>
            <param name="chunkSize">Size of data/keys packets received after search, default value is 512*1024 KB.</param>
            <returns>Reads forward-only stream of result sets of the query executed on cache.</returns>
            <remarks>
            These operators are supported by NCache Queries.
            1. Comparison Operators = , == , != , &lt;> , &lt; , > , &lt;=, >=, IN 
            2. Logical Operators AND , OR , NOT 
            3. Miscellaneous () , DateTime.Now , DateTime("any date time compatible string")
            </remarks>
            <example>
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            </code>
            
            Instead of Product, specify fully qualified name of your custom class.
            
            <code>
            string query = "SELECT Product where this.ProductName = ?";
            
            QueryCommand queryCommand = new QueryCommand(query);
            queryCommand.Parameters.Add("ProductName", "Chai");
            queryCommand.Parameters.Add("UnitsInStock", 250);
            
            try
            {
            	ICacheReader reader = cache.SearchService.ExecuteReader(queryCommand, true, 50);
            	if (reader.FieldCount > 0)
            	{
            		while (reader.Read())
            		{
            			object category = reader.GetValue&lt;object&gt;(0);
            			//perform operations
            		}
            	}
            	else
            	{
            		//perform operations
            	}
            	reader.Close();
            }
            
            catch
            {
            	//handle exception
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IQueryService.ExecuteScalar(Alachisoft.NCache.Client.QueryCommand)">
            <summary>
            Executes the query, and returns the first column of the first row in the result set returned 
            by the query. Additional columns or rows are ignored.
            </summary>
            <param name="queryCommand"><see cref="T:Alachisoft.NCache.Client.QueryCommand"/> containing query text and values.</param>
            <returns>The first column of the first row in the result set, or null if the result set is empty.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IQueryService.ExecuteNonQuery(Alachisoft.NCache.Client.QueryCommand)">
            <summary>
            Executes non-query statements on cache. Returns number of affected rows after query is executed.
            </summary>
            <param name="queryCommand"><see cref="T:Alachisoft.NCache.Client.QueryCommand"/> containing query text and values.</param>      
            <param name="writeThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating data source. This can be WriteThru, WriteBehind or none.</param>
            <returns>Number of rows affected after query is executed.</returns>
            <remarks>
            INSERT, UPSERT, UPDATE and DELETE queries are supported.
            
            These operators are supported by NCache Queries.
            1. Comparison Operators = , == , != , &lt;> , &lt; , > , &lt;=, >=, IN 
            2. Logical Operators AND , OR , NOT 
            3. Miscellaneous () , DateTime.Now , DateTime("any date time compatible string")
            </remarks>
            <example>
            <code>
            ICache _cache = CacheManager.GetCache("demoCache");
            
            string query = "delete Test.Application.Employee where this.Name = ?";
            QueryCommand queryCommand = new QueryCommand(query);
            queryCommand.Parameters.Add("Name", "Paul Jones");
            int result = _cache.SearchService.ExecuteNonQuery(queryCommand, null);
            
            query = "update Test.Application.Employee set this.Tax = 25 where this.Salary > ?";
            queryCommand = new QueryCommand(query);
            queryCommand.Parameters.Add("Salary", 2000);
            result = _cache.SearchService.ExecuteNonQuery(queryCommand);
            
            query = "delete Test.Application.Employee where Not(this.Name = 'Paul Jones' and this.Salary > 2000)";
            queryCommand = new QueryCommand(query);
            queryCommand.Parameters.Add("Name", "Paul Jones");
            queryCommand.Parameters.Add("Salary", 2000);
            result = _cache.SearchService.ExecuteNonQuery(queryCommand);
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IQueryService.ExecuteNonQuery(Alachisoft.NCache.Client.QueryCommand,Alachisoft.NCache.Client.QueryExecutionOptions)">
            <summary>
            Executes non-query statements on cache.
            </summary>
            <param name="queryCommand"><see cref="T:Alachisoft.NCache.Client.QueryCommand"/> containing query text and values.</param>      
            <param name="options"><see cref="T:Alachisoft.NCache.Client.QueryExecutionOptions"/> contains advanced configuration for query execution</param>
            <returns><see cref="T:Alachisoft.NCache.Client.QueryResult"/> that includes number of affected rows and failed operations in the form of key-exception pairs after query is executed.</returns>
            <remarks>
            INSERT, UPSERT, UPDATE and DELETE queries are supported.
            
            These operators are supported by NCache Queries.
            1. Comparison Operators = , == , != , &lt;> , &lt; , > , &lt;=, >=, IN 
            2. Logical Operators AND , OR , NOT 
            3. Miscellaneous () , DateTime.Now , DateTime("any date time compatible string")
            </remarks>
            <example>
            <code>
            ICache _cache = CacheManager.GetCache("demoCache");
            
            string query = "delete Test.Application.Employee where this.Name = ?";
            QueryCommand queryCommand = new QueryCommand(query);
            queryCommand.Parameters.Add("Name", "Paul Jones");
            int result = _cache.SearchService.ExecuteNonQuery(queryCommand, null, 120);
            
            query = "update Test.Application.Employee set this.Tax = 25 where this.Salary > ?";
            queryCommand = new QueryCommand(query);
            queryCommand.Parameters.Add("Salary", 2000);
            result = _cache.SearchService.ExecuteNonQuery(queryCommand);
            
            query = "delete Test.Application.Employee where Not(this.Name = 'Paul Jones' and this.Salary > 2000)";
            queryCommand = new QueryCommand(query);
            queryCommand.Parameters.Add("Name", "Paul Jones");
            queryCommand.Parameters.Add("Salary", 2000);
            result = _cache.SearchService.ExecuteNonQuery(queryCommand);
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IQueryService.ExecuteNonQueryAsync(Alachisoft.NCache.Client.QueryCommand,Alachisoft.NCache.Client.QueryExecutionOptions)">
            <summary>
            Executes non-query statements on cache asynchronously.
            </summary>
            <param name="queryCommand"><see cref="T:Alachisoft.NCache.Client.QueryCommand"/> containing query text and values.</param>
            <param name="options"><see cref="T:Alachisoft.NCache.Client.QueryExecutionOptions"/> contains advanced configuration for query execution</param>
            <returns><see cref="T:Alachisoft.NCache.Client.QueryResult"/> that includes number of affected rows and failed operations in the form of key-exception pairs after query is executed.</returns>
            <remarks>
            INSERT, UPSERT, UPDATE and DELETE queries are supported.
            
            These operators are supported by NCache Queries.
            1. Comparison Operators = , == , != , &lt;> , &lt; , > , &lt;=, >=, IN 
            2. Logical Operators AND , OR , NOT 
            3. Miscellaneous () , DateTime.Now , DateTime("any date time compatible string")
            </remarks>
            <example>
            <code>
            ICache _cache = CacheManager.GetCache("demoCache");
            
            string query = "delete Test.Application.Employee where this.Name = ?";
            QueryCommand queryCommand = new QueryCommand(query);
            queryCommand.Parameters.Add("Name", "Paul Jones");
            int result = _cache.SearchService.ExecuteNonQuery(queryCommand);
            
            query = "delete Test.Application.Employee where this.Salary > ?";
            queryCommand = new QueryCommand(query);
            queryCommand.Parameters.Add("Salary", 2000);
            result = _cache.SearchService.ExecuteNonQuery(queryCommand);
            
            query = "delete Test.Application.Employee where Not(this.Name = 'Paul Jones' and this.Salary > 2000)";
            queryCommand = new QueryCommand(query);
            queryCommand.Parameters.Add("Name", "Paul Jones");
            queryCommand.Parameters.Add("Salary", 2000);
            result = _cache.SearchService.ExecuteNonQuery(queryCommand);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IQueryService.RemoveByTag(Alachisoft.NCache.Runtime.Caching.Tag,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Removes the cached objects with the specified tag.
            </summary>
            <param name="tag">A Tag to search cache with.</param>
            <example>The following example demonstrates how to remove the objects with the specified tag.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            Tag tag = new Tag("Alpha");
            cache.SearchService.RemoveByTag(tag);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IQueryService.RemoveByTags(System.Collections.Generic.IEnumerable{Alachisoft.NCache.Runtime.Caching.Tag},Alachisoft.NCache.Client.TagSearchOptions,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Removes the cached objects that have tags with specified <see cref="T:Alachisoft.NCache.Client.TagSearchOptions"/>.
            </summary>
            <param name="tags">IEnumerable collection of tags to search cache with.</param>
            <param name="type"><see cref="T:Alachisoft.NCache.Client.TagSearchOptions"/> specifies the search type for the tags.</param>
            <example>The following example demonstrates how to remove the objects with the specified tags with <see cref="T:Alachisoft.NCache.Client.TagSearchOptions"/>.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            
            Tag[] tags = new Tag[2];
            tags[0] = new Tag("Alpha");
            tags[1] = new Tag("Beta");
            
            cache.SearchService.RemoveByTags(tags, TagSearchOptions.ByAllTags);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IQueryService.GetByTag``1(Alachisoft.NCache.Runtime.Caching.Tag)">
            <summary>
            Gets all the cached items with the specified tag.
            </summary>
            <typeparam name="T">Specifies the type of value obtained from the cache.</typeparam>
            <param name="tag">Name of tag to search the cache items with.</param>
            <returns>Returns a dictionary containing the cache keys and associated objects with the type specified.</returns>
            <example>The following example demonstrates how to get the objects with the specified tag.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            Tag tag = new Tag("Sports");
            IDictionary&lt;string,Product&gt; result = cache.SearchService.GetByTag&lt;Product&gt;(tag);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IQueryService.GetByTag``1(System.String)">
            <summary>
            Gets all the cached objects with the wild card supported tag.
            </summary>
            <typeparam name="T">Specifies the type of value obtained from the cache.</typeparam>
            <param name="wildCardExpression">The wild card Expression to search with.</param>
            <returns>Returns a dictionary containing the cache keys and associated objects with the type specified.</returns>
            <remarks>
            The special characters supported in wild search by NCache are:
            
            1) "*" : Used as a substitute for zero or more characters in the string.
            2) "?" : Used as a substitute for a single character in the string.
            </remarks>
            <example>The following example demonstrates how to get the objects with the specified tag using wildcard.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            </code>
            Following tags are created and items are added in the cache with these tags
            <code>
            Tag[] tags = new Tag[3];
            tags[0] = new Tag("Important Customers");
            tags[1] = new Tag("East Coast Customers");
            tags[2] = new Tag("West Coast Customers");
            
            IDictionary&lt;string, Customer&gt; result = cache.SearchService.GetByTag&lt;Customer&gt;("*Customers");
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IQueryService.GetByTags``1(System.Collections.Generic.IEnumerable{Alachisoft.NCache.Runtime.Caching.Tag},Alachisoft.NCache.Client.TagSearchOptions)">
            <summary>
            Returns the cached objects that have tags with specified <see cref="T:Alachisoft.NCache.Client.TagSearchOptions"/>.
            </summary>
            <typeparam name="T">Specifies the type of value obtained from the cache.</typeparam>
            <param name="tags">IEnumerable collection of tags to search cache with.</param>
            <param name="type"><see cref="T:Alachisoft.NCache.Client.TagSearchOptions"/> specifies the search type for the tags.</param>
            <returns>A dictionary containing cache keys and associated objects with the specified type.</returns>
            <example>The following example demonstrates how to get the objects that have the specified tags
            with <see cref="T:Alachisoft.NCache.Client.TagSearchOptions"/>.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            
            Tag[] tags = new Tag[2];
            tags[0] = new Tag("Alpha");
            tags[1] = new Tag("Beta");
            
            IDictionary&lt;string, Product&gt; result = cache.SearchService.GetByTags&lt;Product&gt;(tags,TagSearchOptions.ByAllTags);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IQueryService.GetKeysByTag(Alachisoft.NCache.Runtime.Caching.Tag)">
            <summary>
            Gets all keys of the objects with the specified tag.
            </summary>
            <param name="tag">The tag to search the cache with.</param>
            <returns>Returns collection containing the cache keys.</returns>
            <example>The following example demonstrates how to get the keys with the specified tag.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            Tag tag = new Tag("Sports");
            ICollection&lt;string&gt; keys = cache.SearchService.GetKeysByTag(tag);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IQueryService.GetKeysByTag(System.String)">
            <summary>
            Gets all the keys with the wild card supported tag.
            </summary>
            <param name="wildCardExpression">The wild card Expression to search with.</param>
            <returns>Returns collection containing the cache keys.</returns>
             <remarks>
            The special characters supported in wild search by NCache are:
            
            1) "*" : Used as a substitute for zero or more characters in the string.
            2) "?" : Used as a substitute for a single character in the string.
            </remarks>
            <example>The following example demonstrates how to get the keys with the specified tag using wildcard.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            </code>
            Following tags are created and items are added in the cache with these tags
            <code>
            Tag[] tags = new Tag[3];
            tags[0] = new Tag("Important Customers");
            tags[1] = new Tag("East Coast Customers");
            tags[2] = new Tag("West Coast Customers");
            
            ICollection&lt;string&gt; keys = cache.SearchService.GetKeysByTag("*Customers");
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IQueryService.GetKeysByTags(System.Collections.Generic.IEnumerable{Alachisoft.NCache.Runtime.Caching.Tag},Alachisoft.NCache.Client.TagSearchOptions)">
            <summary>
            Returns keys of the cached items that have tags with specified <see cref="T:Alachisoft.NCache.Client.TagSearchOptions"/>.
            </summary>
            <param name="tags">IEnumerable collection of tags to search cache with.</param>
            <param name="type"><see cref="T:Alachisoft.NCache.Client.TagSearchOptions"/> specifies the search type for the tags.</param>
            <returns>Returns collection containing the cache keys.</returns>
            <example>The following example demonstrates how to get the keys that have the specified tags
            with <see cref="T:Alachisoft.NCache.Client.TagSearchOptions"/>.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            
            Tag[] tags = new Tag[2];
            tags[0] = new Tag("Alpha");
            tags[1] = new Tag("Beta");
            
            ICollection&lt;string&gt; result = cache.SearchService.GetKeysByTags(tags, TagSearchOptions.ByAllTags);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IQueryService.RemoveGroupData(System.String,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Remove the data items pertaining to the specified group from cache.
            </summary>
            <param name="group">Name of group to be removed.</param>
            <example>Example demonstrates how you can remove an item from cache using its group.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            cache.SearchService.RemoveGroupData("group_name");
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IQueryService.GetGroupKeys(System.String)">
            <summary>
            Retrieves the keys of the items in the specified group.
            </summary>
            <param name="group">Name of group whose keys are to be returned.</param>
            <returns>The list of keys of the group.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="group"/> contains a null reference.</exception>
            <example>The following example demonstrates how to retrieve key list against group.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            ICollection&lt;string&gt; keys = cache.SearchService.GetGroupKeys("group_name");
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IQueryService.GetGroupData``1(System.String)">
            <summary>
            Retrieves the key and value pairs of the specified group.
            </summary>
            <typeparam name="T">Specifies the type of value obtained from the cache.</typeparam>
            <param name="group">Name of group whose data is to be returned.</param>
            <returns>A dictionary containing key-value pairs of the specified group.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="group"/> contains a null reference.</exception>
            <example>The following example demonstrates how to retrieve data against group.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            IDictionary&lt;string,Product&gt; keys = cache.SearchService.GetGroupData&lt;Product&gt;("group_name");
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Client.Services.ISearchService">
            <summary>
            This interface contains properties and methods required for Search Service.
            </summary>
            
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IDataStructureService.CreateCounter(System.String,System.Int64)">
            <summary>
            Creates the counter against the provided name.
            </summary>
            <param name="key">is unqiue identifier for counter object. </param>
            <param name="initialValue">is starting index of counter object.Defualt value is zero</param>
            <returns>Interface for using counters</returns>
            <example>This example demonstrates how to create a distributed counter.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedCounter";
            
            ICounter counter = cache.DataTypeManager.CreateCounter(dataTypeName);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IDataStructureService.CreateCounter(System.String,Alachisoft.NCache.Client.DataTypes.Collections.DataStructureAttributes,System.Int64,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Creates the counter against the provided name and configures it according to the provided user configuration as attributes.
            </summary>
            <param name="name">is unqiue identifier for counter object.</param>
            <param name="attributes"><see cref="T:Alachisoft.NCache.Client.DataTypes.Collections.DataStructureAttributes"/> for providing user configuration for this collection.</param>
            <param name="options"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating data source. This can be WriteThru, WriteBehind or None.</param>
            <param name="initialValue">is starting index of counter object.Defualt value is zero.</param>
            <returns>Interface for using counters.</returns>
            <example>This example demonstrates how to create a distributed counter with absolute expiration
            of 1 minute.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedCounter";
            
            DataTypeAttributes attributes = new DataTypeAttributes();
            attributes.Expiration = new Expiration(ExpirationType.Absolute, new TimeSpan(0, 1, 0));
            
            ICounter counter = cache.DataTypeManager.CreateCounter(dataTypeName, attributes);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IDataStructureService.Remove(System.String,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Remove the specified data type.
            </summary>
            <param name="key">Name of the data type.</param>
            <param name="writeThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating data source. This can be WriteThru, WriteBehind or None.</param>
            <example>This example demonstrates how to remove a DataType from <see cref="T:Alachisoft.NCache.Client.ICache"/>.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DataType0";
            
            cache.DataTypeManager.Remove(dataTypeName);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.IDataStructureService.GetCounter(System.String,Alachisoft.NCache.Runtime.Caching.ReadThruOptions)">
            <summary>
            Returns instance of the counter specified with backing source Read Thru option.
            </summary>
            <param name="key">Name of counter</param>
            <param name="options"><see cref="T:Alachisoft.NCache.Runtime.Caching.ReadThruOptions"/> to read from data source. These can be either ReadThru, ReadThruForced or None</param>
            <returns>Interface for using counters</returns>
            <example>This example demonstrates how to get a distributed counter handler from <see cref="T:Alachisoft.NCache.Client.ICache"/>.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedCounter";
            
            ICounter counter = cache.DataTypeManager.GetCounter(dataTypeName);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.ICollectionService.CreateList``1(System.String)">
            <summary>
            Creates distributed list against the provided collection name.
            </summary>
            <typeparam name="T">Type of list items.</typeparam>
            <param name="key">Name of collection to be created.</param>
            <returns>Interface for using list.</returns>
            <example>The following code sample shows how to created a distributed list.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            string dataTypeName = "DistributedList";
            
            IDistributedLis&lt;Product> list = cache.DataTypeManager.CreateList&lt;Product>(dataTypeName);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.ICollectionService.CreateList``1(System.String,Alachisoft.NCache.Client.DataTypes.Collections.DataStructureAttributes,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Creates distributed list against the provided collection name and configures it according to the provided user configuration as attributes of collection.
            </summary>
            <typeparam name="T">Type of list items.</typeparam>
            <param name="key">Name of collection to be created.</param>
            <param name="attributes"><see cref="!:.DataTypes.Collections.DataTypeAttributes"/> for providing user configuration for this collection.</param>
            <param name = "options" ><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating data source.This can be WriteThru, WriteBehind or None.</param>
            <returns>Interface for using list</returns>
            <example>The following code sample shows how to created a distributed list with absolute expiration of 1 minutes.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedList";
            
            DataTypeAttributes attributes = new DataTypeAttributes();
            attributes.Expiration = new Expiration(ExpirationType.Absolute, new TimeSpan(0, 1, 0));
            
            IDistributedLis&lt;Product> list = cache.DataTypeManager.CreateList&lt;Product>(dataTypeName,attributes);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.ICollectionService.CreateQueue``1(System.String)">
            <summary>
            Creates distributed queue against the provided collection name.
            </summary>
            <typeparam name="T">Type of queue items.</typeparam>
            <param name="key">Name of collection to be created.</param>
            <returns>Interface for using queue.</returns>
            <example>The following code sample shows how to created a distributed queue.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedQueue";
            
            IDistributedQueue&lt;Product> queue = cache.DataTypeManager.CreateQueue&lt;Product>(dataTypeName);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.ICollectionService.CreateQueue``1(System.String,Alachisoft.NCache.Client.DataTypes.Collections.DataStructureAttributes,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Creates distributed queue against the provided collection name and configures it according to the provided user configuration as attributes of collection.
            </summary>
            <typeparam name="T">Type of queue items.</typeparam>
            <param name="key">Name of collection to be created</param>
            <param name="attributes"><see cref="T:Alachisoft.NCache.Client.DataTypes.Collections.DataStructureAttributes"/> for providing user configuration for this collection.</param>
            <param name="options"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating data source. This can be WriteThru, WriteBehind or None.</param>
            <returns>Interface for using queue.</returns>
            <example>The following code sample shows how to created a distributed queue with absoulte expiration of 1 minutes.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedQueue";
            
            DataTypeAttributes attributes = new DataTypeAttributes();
            attributes.Expiration = new Expiration(ExpirationType.Absolute, new TimeSpan(0, 1, 0));
            
            IDistributedQueue&lt;Product> queue = cache.DataTypeManager.CreateQueue&lt;Product>(dataTypeName, attributes);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.ICollectionService.CreateDictionary``2(System.String)">
            <summary>
            Creates distributed dictionary against the provided collection name.
            </summary>
            <typeparam name="String">Type of dictionary keys.</typeparam>
            <typeparam name="TValue">Type of dictionary values.</typeparam>
            <param name="key">Name of collection to be created.</param>
            <returns>Interface for using dictionary.</returns>
            <example>The following code sample shows how to created a distributed dictionary.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedDictionary";
            
            IDistributedDictionary&lt;string, Product> dictionary = cache.DataTypeManager.CreateDictionary&lt;string, Product>(dataTypeName);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.ICollectionService.CreateDictionary``2(System.String,Alachisoft.NCache.Client.DataTypes.Collections.DataStructureAttributes,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Creates distributed dictionary against the provided collection name and configures it according to the provided user configuration as attributes of collection.
            </summary>
            <typeparam name="String">Type of dictionary keys.</typeparam>
            <typeparam name="TValue">Type of dictionary values.</typeparam>
            <param name="key">Name of collection to be created.</param>
            <param name="attributes"><see cref="T:Alachisoft.NCache.Client.DataTypes.Collections.DataStructureAttributes"/> for providing user configuration for this collection.</param>
            <param name="options"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating data source. This can be WriteThru, WriteBehind or None.</param>
            <returns>Interface for using dictionary.</returns>
            <example>The following code sample shows how to created a distributed dictionary with absolute expiration of 1 minutes.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedDictionary";
            
            DataTypeAttributes attributes = new DataTypeAttributes();
            attributes.Expiration = new Expiration(ExpirationType.Absolute, new TimeSpan(0, 1, 0));
            
            IDistributedDictionary&lt;string, Product> dictionary = cache.DataTypeManager.CreateDictionary&lt;string, Product>(dataTypeName, attributes);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.ICollectionService.CreateHashSet``1(System.String)">
            <summary>
            Creates distributed set against the provided collection name.
            </summary>
            <typeparam name="T">Type of set items.</typeparam>
            <param name="key">Name of collection to be created.</param>
            <returns>Interface for using set.</returns>
            <example>The following code sample shows how to created a distributed set.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            string dataTypeName = "DistributedSet";
            
            IDistributedHashSet&lt;int> set = cache.DataTypeManager.CreateHashSet&lt;int>(dataTypeName);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.ICollectionService.CreateHashSet``1(System.String,Alachisoft.NCache.Client.DataTypes.Collections.DataStructureAttributes,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Creates distributed set against the provided collection name and configures it according to the provided user configuration as attributes of collection.
            </summary>
            <typeparam name="T">Type of set items.</typeparam>
            <param name="key">Name of collection to be created.</param>
            <param name="attributes"><see cref="T:Alachisoft.NCache.Client.DataTypes.Collections.DataStructureAttributes"/> for providing user configuration for this collection.</param>
            <param name="options"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating data source. This can be WriteThru, WriteBehind or None.</param>
            <returns>Interface for using set.</returns>
            <example>The following code sample shows how to created a distributed set with absolute expiration of 1 minutes.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedSet";
            
            DataTypeAttributes attributes = new DataTypeAttributes();
            attributes.Expiration = new Expiration(ExpirationType.Absolute, new TimeSpan(0, 1, 0));
            
            IDistributedHashSet&lt;int> set = cache.DataTypeManager.CreateHashSet&lt;int>(dataTypeName, attributes);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.ICollectionService.GetList``1(System.String,Alachisoft.NCache.Runtime.Caching.ReadThruOptions)">
            <summary>
            Gets distributed list interface against the provided collection name.
            </summary>
            <typeparam name="T">Type of list items.</typeparam>
            <param name="key">Name of collection.</param>
            <param name="options"><see cref="T:Alachisoft.NCache.Runtime.Caching.ReadThruOptions"/> to read from data source. These can be either ReadThru, ReadThruForced or None.</param>
            <returns>Interface for using list.</returns>
            <example>The following code sample shows how to get a distributed list handler from cache.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedList";
            
            IDistributedList&lt;Product> list = cache.DataTypeManager.GetList&lt;Product>(dataTypeName);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.ICollectionService.GetQueue``1(System.String,Alachisoft.NCache.Runtime.Caching.ReadThruOptions)">
            <summary>
            Gets distributed queue interface against the provided collection name.
            </summary>
            <typeparam name="T">Type of queue items.</typeparam>
            <param name="key">Name of collection to be created.</param>
            <param name="options"><see cref="T:Alachisoft.NCache.Runtime.Caching.ReadThruOptions"/> to read from data source. These can be either ReadThru, ReadThruForced or None.</param>
            <returns>Interface for using queue.</returns>
            <example>The following code sample shows how to get a distributed queue handler from cache.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            string dataTypeName = "DistributedQueue";
            
            IDistributedQueue&lt;Product> queue = cache.DataTypeManager.GetQueue&lt;Product>(dataTypeName);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.ICollectionService.GetDictionary``2(System.String,Alachisoft.NCache.Runtime.Caching.ReadThruOptions)">
            <summary>
            Gets distributed dictionary interface against the provided collection name.
            </summary>
            <typeparam name="String">Type of dictionary keys.</typeparam>
            <typeparam name="TValue">Type of dictionary values.</typeparam>
            <param name="key">Name of collection.</param>
            <param name="options"><see cref="T:Alachisoft.NCache.Runtime.Caching.ReadThruOptions"/> to read from data source. These can be either ReadThru, ReadThruForced or None.</param>
            <returns>Interface for using dictionary.</returns>
            <example>The following code sample shows how to get a distributed dictionary handler from cache.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedQueue";
            
            IDistributedDictionary&lt;string, Product> dictionary = cache.DataTypeManager.GetDictionary&lt;string, Product>(dataTypeName);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Services.ICollectionService.GetHashSet``1(System.String,Alachisoft.NCache.Runtime.Caching.ReadThruOptions)">
            <summary>
            Gets distributed set interface against the provided collection name.
            </summary>
            <typeparam name="T">Type of set items.</typeparam>
            <param name="key">Name of collection.</param>
            <param name="options"><see cref="T:Alachisoft.NCache.Runtime.Caching.ReadThruOptions"/> to read from data source. These can be either ReadThru, ReadThruForced or None.</param>
            <returns>Interface for using set.</returns>
            <example>The following code sample shows how to get a distributed set handler from cache.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            string dataTypeName = "DistributedSet";
            
            IDistributedHashSet&lt;int> set = cache.DataTypeManager.GetHashSet&lt;int>(dataTypeName);
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Client.Extensibility.Statistics.ModuleClientPerfInstaller">
            <summary>
            Summary description for PerfInstaller.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.Extensibility.Statistics.ModuleClientPerfInstaller.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.Extensibility.Statistics.ModuleClientPerfInstaller.#ctor">
            <summary>
            Installs perfmon counters related to NCache Client 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.Extensibility.Statistics.ModuleClientPerfInstaller.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.MapReduce.IMapReduceTaskManagement">
            <summary>
            This interface can be used for managing tasks.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.MapReduce.IMapReduceTaskManagement.GetTaskEnumerator(System.String,System.Int16)">
            <summary>
            Obtain the result in form of dictionary.
            </summary>
            <param name="taskId"></param>
            <param name="callbackId"></param>
            <returns>IDictionaryEnumerator</returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.MapReduce.MapReduceTaskListener">
            <summary>
            This delegate is triggered on completion of task.
            </summary>
            <param name="response"></param>
        </member>
        <member name="T:Alachisoft.NCache.Client.MapReduce.MapReduceTaskResult">
            <summary>
            Returns the blocking call of Map Reduce Task result form server.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.MapReduce.MapReduceTaskResult.GetEnumerator">
            <summary>
            Obtain the result in form of dictionary.
            </summary>
            <returns>dictionary containing the MapReduce result</returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.MapReduce.MapReduceTaskResult.TaskStatus">
            <summary>
             Return status of Task which can be failure, success or canceled.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.MapReduce.MapReduceTaskResult.TaskManagement">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.MapReduce.MapReduceTaskResult.TaskFailureReason">
            <summary>
            Returns reason behind the failure of task.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.MapReduce.MapReduceTrackableTask">
            <summary>
            Tracks the execution of MapReduce Task.
            <remarks><b>Note:</b>MapReduceCallback() and GetResult() cannot be executed together because GetResult is a blocking call and this combination will throw an exception.</remarks>
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.MapReduce.MapReduceTrackableTask.#ctor(Alachisoft.NCache.Client.MapReduce.IMapReduceTaskManagement,System.String)">
            <summary>
            Initialize a new instance of class.
            </summary>
            <param name="taskMgmt">instance of ITaskManagement.</param>
            <param name="taskId">task id of the Task.</param>
        </member>
        <member name="P:Alachisoft.NCache.Client.MapReduce.MapReduceTrackableTask.Name">
            <summary>
            Task name set by users implementation. 
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.MapReduce.MapReduceTrackableTask.Id">
            <summary>
            Unique GUID identification of MapReduce task. 
            </summary>
        </member>
        <member name="E:Alachisoft.NCache.Client.MapReduce.MapReduceTrackableTask.OnTrackableTaskComplete">
            <summary>
            Registered Async callback on completion, failure or cancellation of task. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.MapReduce.MapReduceTrackableTask.Cancel">
            <summary>
            Cancel the already running task.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.MapReduce.MapReduceTrackableTask.Status">
            <summary>
            Returns the status of task. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.MapReduce.MapReduceTrackableTask.GetResult">
            <summary>
            Blocking call that waits until server returns the result in form of completion, failure or cancellation of a task.
            </summary>
            <returns>Returns an IMapReduceTaskResult instance</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.MapReduce.MapReduceTrackableTask.GetResult(System.Int32)">
            <summary>
            If no result is obtained within the provided timeout, Operationfailedexception will be thrown. 
            </summary>
            <param name="timeout">Time in millisecond in which if result is not returned, thread will be terminated and exception or null will be given</param>
            <returns>Returns an IMapReduceTaskResult instance</returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.Processor.EntryProcessor">
            <summary>
            Entry processer base class to implement the cache item processing logic for server.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.Processor.EntryProcessor.Id">
            <summary>
            Id of the entry processor task. Can be used for identification purposes in your application.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.Processor.EntryProcessor.Name">
            <summary>
            Name of the entry processor task. Can be used for identification purposes in your application.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.Processor.EntryProcessor.Execute(Alachisoft.NCache.Client.Processor.EntryProcessorCacheContext,System.String[],System.Threading.CancellationToken)">
            <summary>
            This method contains the main processing logic that is to be executed over the cache via the provided cache context.
            </summary>
            <param name="cacheContext">Cache handle for performing client-side like operations on server-side.</param>
            <param name="locationAffinities">Location affinity information passed in by application.</param>
            <param name="cancellationToken">For tracking whether entry processor task was cancelled or not, this is to avoid cache data corruption.</param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Processor.EntryProcessor.Dispose">
            <summary>
            Perform tasks associated with freeing, releasing, or resetting resources.
            </summary>
            <example>
            Example disconnects from data source on dispose
            <code>
            public void Dispose()
            {
               _source.Disconnect();
            }
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Client.Processor.EntryProcessorCacheContext">
            <summary>
            A cache handle for performing a limited set of cache operations via entry processor task.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.Processor.EntryProcessorCacheContext.GetCacheItem(System.String,Alachisoft.NCache.Runtime.Caching.ReadThruOptions)">
            <summary>
            Retrieves the specified CacheItem from the Cache object. This overload also allows specifying the read-through option. If read-through is set and the object does not exist in the cache,
            the object will be fetched from the data source and added to the cache.
            </summary>
            <param name="key">Unique identifier for the cache item to be retrieved.</param>  
            <param name="readThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.ReadThruOptions"/> regarding reading from data source. It can be either ReadThru, ReadThruForced or None.</param>
            <returns>The specified CacheItem. If the key does not exist, it returns a null reference.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> contains a null reference.</exception>
            <example>Example demonstrates how to retrieve the cache item with read thru option and cache item version
            <code>
            string key = "Product0";
            ReadThruOptions readThruOptions = new ReadThruOptions(ReadMode.ReadThru);
            CacheItem cacheItem = cacheContext.GetCacheItem(key, readThruOptions);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Processor.EntryProcessorCacheContext.GetCacheItem(System.String,System.Boolean,System.TimeSpan,Alachisoft.NCache.Client.LockHandle@)">
            <summary>
            Get the cache item stored in cache. Lock handle can be given with this and a flag can be set if you want to acquire lock.
            </summary>
            <param name="key">Key used to reference the desired object.</param>
            <param name="acquireLock">A flag to determine whether to acquire a lock or not.</param>
            <param name="lockTimeout">The TimeSpan after which the lock is automatically released.</param>
            <param name="lockHandle">An instance of <see cref="T:Alachisoft.NCache.Client.LockHandle"/> to hold the lock information.</param>
            <returns>The retrieved cache item. If key is not found, a null reference.</returns>
            <example>Example demonstrates how to retrieve cache item with lock handle, timeout and flag
            for aquiring lock.
            <code>
            string key = "Product0";
            LockHandle lockHandle = new LockHandle();
            CacheItem item = cacheContext.GetCacheItem(key, true, TimeSpan.FromSeconds(30), ref lockHandle);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Processor.EntryProcessorCacheContext.GetCacheItem(System.String,Alachisoft.NCache.Client.CacheItemVersion@,Alachisoft.NCache.Runtime.Caching.ReadThruOptions)">
            <summary>
            Retrieves the specified CacheItem from the Cache object. This overload also allows specifying the read-through option. if read-through is set and the object does not exist in the cache, the object will be fetched from the data source and added to the cache.
            It accepts the <see cref="T:Alachisoft.NCache.Client.CacheItemVersion"/> by reference.
            <para>
            If null is passed for CacheItemVersion, then the version of the object from the cache is returned. If non-null
            CacheItemVersion is passed, then object is returned from the cache only if that is the current version of the object
            in the cache.
            </para>
            </summary>
            <param name="key">Unique identifier for the cache item to be retrieved.</param>  
            <param name="version">The <see cref="T:Alachisoft.NCache.Client.CacheItemVersion"/> of the object.</param>
            <param name="readThruOptions">Options regarding reading from data source. It can be either ReadThru or None.</param>
            <returns>The specified CacheItem. If the key does not exist, it returns a null reference.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> contains a null reference.</exception>
            <example>Example demonstrates how to retrieve the cache item with read thru option and cache item version
            <code>
            Product product = new Product();
            product.Id = 1;
            product.Name = "Chai";
            
            string key = "Product0";
            
            CacheItemVersion version = cache.Add(key, product);
            
            ReadThruOptions readThruOptions = new ReadThruOptions(ReadMode.ReadThru);
            
            CacheItem item = cacheContext.GetCacheItem(key, ref version, readThruOptions);
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Processor.EntryProcessorCacheContext.Remove(System.String,Alachisoft.NCache.Client.LockHandle,Alachisoft.NCache.Client.CacheItemVersion,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Removes the specified item from the cache. You can also specify the write option such that the item may be removed from both cache and data source.
            If version is specified then item will only be removed if the specified version is still the most recent version in the cache.
            </summary>
            <param name="key">Unique key of the item to be removed.</param>
            <param name="lockHandle">If the item is locked, it can be removed only if the correct lockHandle is specified. lockHandle should be the same which was used initially to lock the item, otherwise you will get the 'OperationFailedException'.</param>
            <param name="version">The version of the item to be removed. The item is removed from the cache
            only if this is still the most recent version in the cache.</param>
            <param name="writeThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating the data source. This can be either WriteThru, WriteBehind or None.</param>
            <example>Example demonstrates how to remove a locked item in the cache with write through options.
            <code>
            Product product = new Product();
            product.Id = 1;
            product.Name = "Chai";
            
            string key = "Product0";
            
            CacheItemVersion version = cache.Insert(key, new CacheItem(product));
            
            LockHandle lockHandle = new LockHandle();
            
            object item = cacheContext.Get&lt;Product&gt;(key, true, TimeSpan.Zero, ref lockHandle);
            
            if (item != null)
            {
                try
                {
                    WriteThruOptions writeThruOptions = new WriteThruOptions(WriteMode.WriteThru, "ProdDataSource1");
            
                    cache.Remove(key, lockHandle, version, writeThruOptions);
                }
                catch (OperationFailedException ex) { }
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Processor.EntryProcessorCacheContext.Contains(System.String)">
            <summary>
            Determines whether the cache contains a specific key.
            </summary>
            <param name="key">The key to locate in the cache.</param>
            <returns><b>true</b> if the cache contains an element 
            with the specified key; otherwise, <b>false</b>.</returns>
            <remarks>In most of the cases this method's implementation is close to O(1).
            <para><b>Note:</b> In a partitioned cluster this operation is an expensive one as it might 
            result in network calls. It is therefore advised to use this property only when required.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> contains a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is not serializable.</exception>
            <example>The following example demonstrates how to check for containment of an item in the cache/>
            <code>
            if (cacheContext.Contains("Product0"))
            {
                // Perform operations
            }
            </code>        
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Processor.EntryProcessorCacheContext.Unlock(System.String,Alachisoft.NCache.Client.LockHandle)">
            <summary>
            Unlocks a locked cached item if the correct LockHandle is specified.
            If LockHandle is null Forcefully unlocks a locked cached item.
            </summary>
            <param name="key">Key of the cached item to be unlocked.</param>
            <param name="lockHandle">An instance of <see cref="T:Alachisoft.NCache.Client.LockHandle"/> that is generated when the lock is acquired.</param>
            <example>
            Following example demonstrates how to unlock a cached item.
            <code>
            string key = "Product0";
            
            cacheContext.Unlock(key, lockHandle);
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Processor.EntryProcessorCacheContext.Lock(System.String,System.TimeSpan,Alachisoft.NCache.Client.LockHandle@)">
             <summary>
             Acquires a lock on an item in the cache.
             </summary>
             <param name="key">key of cached item to be locked.</param>
             <param name="lockTimeout">An instance of <see cref="T:System.TimeSpan"/> after which the lock is automatically released.</param>
             <param name="lockHandle">An instance of <see cref="T:Alachisoft.NCache.Client.LockHandle"/> that will be filled in with the lock information if lock is acquired successfully.</param>
             <returns>Whether or not lock was acquired successfully.</returns>
             <example>
             Example demonstrates how to lock a cached item.
             <code>
             string key = "Product0";
             
             LockHandle lockHandle = new LockHandle();
            
             bool locked = cacheContext.Lock(key, new TimeSpan(0,0,10), out lockHandle);
             
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Processor.EntryProcessorCacheContext.GetEnumerator">
            <summary>
            Returns an enumerator for the current nodes data.
            </summary>
            <returns>Instance of IDictionaryEnumerator.</returns>
            <example>
            <code>
            
            var localData = cacheContext.GetEnumerator();
            
            while (localData.MoveNext())
            {
                var item = (CacheItem)localData.Value;
                var key = (string)localData.Key;
                
                // Perform operations
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Processor.EntryProcessorCacheContext.GetEnumerator(System.String)">
            <summary>
            Returns an enumerator for data part of a certain location affinity, if that location affinity belongs to the current node.
            </summary>
            <returns>Instance of IDictionaryEnumerator.</returns>
            <example>
            <code>
            
            string personAffinityKey = "Person";
            var localData = cacheContext.GetEnumerator(personAffinityKey);
            
            while (localData.MoveNext())
            {
                var item = (CacheItem)localData.Value;
                var key = (string)localData.Key;
                
                // Perform operations
            }
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Client.Processor.EntryProcessorProviderBase">
            <summary>
            Entry processer provider base class to implement the entry processor creation logic for server.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.Processor.EntryProcessorProviderBase.Init(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Initializes the EntryProcessorProviderBase instance with parameters provided at the time of cache configuration.
            </summary>
            <param name="parameters">Collection of parameters provided at the time of cache configuration</param>
            <param name="cacheName">Name of the cache that initiated this instance</param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Processor.EntryProcessorProviderBase.Create(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            This method is called on server side to create the instance of EntryProcessor<see cref="T:Alachisoft.NCache.Client.Processor.EntryProcessor"/>.
            Provider can create instance of any class derived from EntryProcessor<see cref="T:Alachisoft.NCache.Client.Processor.EntryProcessor"/>.
            </summary>
            <param name="args">Collection of parameters in key/value pair passed by application to create the instance of entry processor</param>
            <returns>Instance of EntryProcessor<see cref="T:Alachisoft.NCache.Client.Processor.EntryProcessor"/> </returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Processor.EntryProcessorProviderBase.Dispose">
            <summary>
            Perform tasks associated with freeing, releasing, or resetting resources.
            </summary>
            <example>
            Example disconnects from data source on dispose
            <code>
            public void Dispose()
            {
               _source.Disconnect();
            }
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Client.Processor.EntryProcessorQueryService">
            <summary>
            This class contains methods for Search Service for Entry Processor task.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.Processor.EntryProcessorQueryService.GetByTag``1(Alachisoft.NCache.Runtime.Caching.Tag)">
            <summary>
            Gets all the cached items with the specified tag.
            </summary>
            <typeparam name="T">Specifies the type of value obtained from the cache.</typeparam>
            <param name="tag">Name of tag to search the cache items with.</param>
            <returns>Returns a dictionary containing the cache keys and associated objects with the type specified.</returns>
            <example>The following example demonstrates how to get the objects with the specified tag.
            <code>
            Tag tag = new Tag("Sports");
            IDictionary&lt;string,Product&gt; result = cacheContext.QueryService.GetByTag&lt;Product&gt;(tag);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Processor.EntryProcessorQueryService.GetByTag``1(System.String)">
            <summary>
            Gets all the cached objects with the wild card supported tag.
            </summary>
            <typeparam name="T">Specifies the type of value obtained from the cache.</typeparam>
            <param name="wildCardExpression">The wild card Expression to search with.</param>
            <returns>Returns a dictionary containing the cache keys and associated objects with the type specified.</returns>
            <remarks>
            The special characters supported in wild search by NCache are:
            
            1) "*" : Used as a substitute for zero or more characters in the string.
            2) "?" : Used as a substitute for a single character in the string.
            </remarks>
            <example>The following example demonstrates how to get the objects with the specified tag using wildcard.
            <code>
            </code>
            Following tags are created and items are added in the cache with these tags
            <code>
            Tag[] tags = new Tag[3];
            tags[0] = new Tag("Important Customers");
            tags[1] = new Tag("East Coast Customers");
            tags[2] = new Tag("West Coast Customers");
            
            IDictionary&lt;string, Customer&gt; result = cacheContext.QueryService.GetByTag&lt;Customer&gt;("*Customers");
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Processor.EntryProcessorQueryService.GetByTags``1(System.Collections.Generic.IEnumerable{Alachisoft.NCache.Runtime.Caching.Tag},Alachisoft.NCache.Client.TagSearchOptions)">
            <summary>
            Returns the cached objects that have tags with specified <see cref="T:Alachisoft.NCache.Client.TagSearchOptions"/>.
            </summary>
            <typeparam name="T">Specifies the type of value obtained from the cache.</typeparam>
            <param name="tags">IEnumerable collection of tags to search cache with.</param>
            <param name="type"><see cref="T:Alachisoft.NCache.Client.TagSearchOptions"/> specifies the search type for the tags.</param>
            <returns>A dictionary containing cache keys and associated objects with the specified type.</returns>
            <example>The following example demonstrates how to get the objects that have the specified tags
            with <see cref="T:Alachisoft.NCache.Client.TagSearchOptions"/>.
            <code>
            
            Tag[] tags = new Tag[2];
            tags[0] = new Tag("Alpha");
            tags[1] = new Tag("Beta");
            
            IDictionary&lt;string, Product&gt; result = cacheContext.QueryService.GetByTags&lt;Product&gt;(tags,TagSearchOptions.ByAllTags);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Processor.EntryProcessorQueryService.GetKeysByTag(Alachisoft.NCache.Runtime.Caching.Tag)">
            <summary>
            Gets all keys of the objects with the specified tag.
            </summary>
            <param name="tag">The tag to search the cache with.</param>
            <returns>Returns collection containing the cache keys.</returns>
            <example>The following example demonstrates how to get the keys with the specified tag.
            <code>
            Tag tag = new Tag("Sports");
            ICollection&lt;string&gt; keys = cacheContext.QueryService.GetKeysByTag(tag);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Processor.EntryProcessorQueryService.GetKeysByTag(System.String)">
            <summary>
            Gets all the keys with the wild card supported tag.
            </summary>
            <param name="wildCardExpression">The wild card Expression to search with.</param>
            <returns>Returns collection containing the cache keys.</returns>
             <remarks>
            The special characters supported in wild search by NCache are:
            
            1) "*" : Used as a substitute for zero or more characters in the string.
            2) "?" : Used as a substitute for a single character in the string.
            </remarks>
            <example>The following example demonstrates how to get the keys with the specified tag using wildcard.
            <code>
            </code>
            Following tags are created and items are added in the cache with these tags
            <code>
            Tag[] tags = new Tag[3];
            tags[0] = new Tag("Important Customers");
            tags[1] = new Tag("East Coast Customers");
            tags[2] = new Tag("West Coast Customers");
            
            ICollection&lt;string&gt; keys = cacheContext.QueryService.GetKeysByTag("*Customers");
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Processor.EntryProcessorQueryService.GetKeysByTags(System.Collections.Generic.IEnumerable{Alachisoft.NCache.Runtime.Caching.Tag},Alachisoft.NCache.Client.TagSearchOptions)">
            <summary>
            Returns keys of the cached items that have tags with specified <see cref="T:Alachisoft.NCache.Client.TagSearchOptions"/>.
            </summary>
            <param name="tags">IEnumerable collection of tags to search cache with.</param>
            <param name="type"><see cref="T:Alachisoft.NCache.Client.TagSearchOptions"/> specifies the search type for the tags.</param>
            <returns>Returns collection containing the cache keys.</returns>
            <example>The following example demonstrates how to get the keys that have the specified tags
            with <see cref="T:Alachisoft.NCache.Client.TagSearchOptions"/>.
            <code>
            
            Tag[] tags = new Tag[2];
            tags[0] = new Tag("Alpha");
            tags[1] = new Tag("Beta");
            
            ICollection&lt;string&gt; result = cacheContext.QueryService.GetKeysByTags(tags, TagSearchOptions.ByAllTags);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.Processor.EntryProcessorQueryService.ExecuteReader(Alachisoft.NCache.Client.QueryCommand,System.Boolean,System.Int32)">
            <summary>
            Performs search on the cache based on the query specified. Returns list of key-value pairs in
            a data reader which fulfills the query criteria. This key-value pair has cache key and its respective value.
            You can specify the flag for specifying if you want data with keys.
            </summary>
            <param name="queryCommand"><see cref="T:Alachisoft.NCache.Client.QueryCommand"/> containing query text and values.</param>
            <param name="getData">Flag to indicate whether the resulting values have to be returned with keys or not.</param>
            <param name="chunkSize">Size of data/keys packets received after search, default value is 512*1024 KB.</param>
            <returns>Reads forward-only stream of result sets of the query executed on cache.</returns>
            <remarks>
            These operators are supported by NCache Queries.
            1. Comparison Operators = , == , != , &lt;> , &lt; , > , &lt;=, >=, IN 
            2. Logical Operators AND , OR , NOT 
            3. Miscellaneous () , DateTime.Now , DateTime("any date time compatible string")
            </remarks>
            <example>
            
            Instead of Product, specify fully qualified name of your custom class.
            
            <code>
            string query = "SELECT Product where this.ProductName = ?";
            
            QueryCommand queryCommand = new QueryCommand(query);
            queryCommand.Parameters.Add("ProductName", "Chai");
            queryCommand.Parameters.Add("UnitsInStock", 250);
            
            try
            {
            	ICacheReader reader = cacheContext.SearchService.ExecuteReader(queryCommand, true, 50);
            	if (reader.FieldCount > 0)
            	{
            		while (reader.Read())
            		{
            			object category = reader.GetValue&lt;object&gt;(0);
            			//perform operations
            		}
            	}
            	else
            	{
            		//perform operations
            	}
            	reader.Close();
            }
            
            catch
            {
            	//handle exception
            }
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Client.Processor.EntryProcessorTaskListener">
            <summary>
            This delegate is triggered on completion of task.
            </summary>
            <param name="response"></param>
        </member>
        <member name="T:Alachisoft.NCache.Client.Processor.EntryProcessorTrackableTask">
            <summary>
            Tracks the execution of Entry Processor Task.
            <remarks><b>Note:</b>EntryProcessorCallback() and GetResult() cannot be executed together because GetResult is a blocking call and this combination will throw an exception.</remarks>
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.Processor.EntryProcessorTrackableTask.#ctor(Alachisoft.NCache.Client.Processor.IEntryProcessorTaskManagement,System.String)">
            <summary>
            Initialize a new instance of class.
            </summary>
            <param name="taskMgmt">instance of ITaskManagement.</param>
            <param name="taskId">task id of the Task.</param>
        </member>
        <member name="P:Alachisoft.NCache.Client.Processor.EntryProcessorTrackableTask.Name">
            <summary>
            Task name set by users implementation. 
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.Processor.EntryProcessorTrackableTask.Id">
            <summary>
            Unique GUID identification of MapReduce task. 
            </summary>
        </member>
        <member name="E:Alachisoft.NCache.Client.Processor.EntryProcessorTrackableTask.OnTrackableTaskComplete">
            <summary>
            Registered Async callback on completion, failure or cancellation of task. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.Processor.EntryProcessorTrackableTask.Cancel">
            <summary>
            Cancel the already running task.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.Processor.EntryProcessorTrackableTask.Status">
            <summary>
            Returns the status of task. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.Processor.EntryProcessorTrackableTask.GetResult">
            <summary>
            Blocking call that waits until server returns the result in form of completion, failure or cancellation of a task.
            </summary>
            <returns>Returns an IEntryProcessorTaskResult instance</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Processor.EntryProcessorTrackableTask.GetResult(System.Int32)">
            <summary>
            If no result is obtained within the provided timeout, OperationFailedException will be thrown. 
            </summary>
            <param name="timeout">Time in millisecond in which if result is not returned, thread will be terminated and exception or null will be given</param>
            <returns>Returns an IEntryProcessorTaskResult instance</returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.Processor.IEntryProcessorTaskManagement">
            <summary>
            This interface can be used for managing tasks.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Client.Processor.IEntryProcessorTaskManagement.GetCollection(System.String,System.Int16)" -->
        <member name="M:Alachisoft.NCache.Client.Processor.IEntryProcessorTaskManagement.GetTaskName(System.String)">
            <summary>
            Fetches the entry processors task name set by users implementation.
            </summary>
            <param name="taskId"></param>
            <returns>string</returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.QueryCommand">
            <summary>
            Class to hold query text and values.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.QueryCommand.Query">
            <summary>
            This property is used to get query text.
            </summary>
            <returns>
            Provides query text.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.QueryCommand.Parameters">
            <summary>
            Query values.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.QueryCommand.ExecuteSelectQueryOnClientCache">
            <summary>
            This property allows select queries to be optionally executed on client cache if the client cache type is Full-Data, and the data type for which the query is being executed is defined as a reference dataset.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.QueryCommand.#ctor(System.String)">
            <summary>
            Initialized new instance of QueryCommand.
            </summary>
            <param name="query">SQL-like query text.</param>
        </member>
        <member name="T:Alachisoft.NCache.Client.QueryExecutionOptions">
            <summary>
            Represents advanced options for executing a cache query.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.QueryExecutionOptions.WriteThruOptions">
            <summary>
            Gets or sets the write-through options for the cache query execution.
            Default value is null.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.QueryExecutionOptions.ReturnFailedOperations">
            <summary>
            Gets or sets a value indicating whether failed operations should be returned in the query result.
            Default value is false
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.QueryExecutionOptions.Timeout">
            <summary>
            Gets or sets the maximum time to wait for the cache query to execute before timing out.
            If not set explicitly, the default timeout value will be used.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.QueryResult">
            <summary>
            Represents the result of a cache query operation.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.QueryResult.AffectedRows">
            <summary>
            The number of rows affected by the query operation.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.QueryResult.FailedOperations">
            <summary>
            A dictionary containing failed operations along with corresponding exceptions.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.TagSearchOptions">
            <summary>
            Enumeration that defines the tag search options.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.TagSearchOptions.ByAllTags">
            <summary>
            Search objects that have all of the tags in common.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.TagSearchOptions.ByAnyTag">
            <summary>
            Search objects that have any of the specified tags in common.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.SearchStore.SearchManager.GetSearchStore(System.String,Alachisoft.NCache.Client.SearchStore.SearchStoreConnectionOptions)">
            <summary>
            Returns an instance of <see cref="T:Alachisoft.NCache.Client.ISearchStore"/> for this application.
            </summary>
            <param name="storeName">The identifier for the <see cref="T:Alachisoft.NCache.Client.ISearchStore"/>.</param>
            <param name="ConnectionOptionsOptions"><see cref="T:Alachisoft.NCache.Client.SearchStore.SearchStoreConnectionOptions"/> parameters for <see cref="T:Alachisoft.NCache.Client.ISearchStore"/> connection.</param>
            <param name="clientCacheName">The identifier for the ClientCache.</param>
            <param name="clientCacheConnectionOptions"><see cref="T:Alachisoft.NCache.Client.SearchStore.SearchStoreConnectionOptions"/> parameters for ClientCache connection.</param>
            <returns>Instance of <see cref="T:Alachisoft.NCache.Client.ISearchStore"/>.</returns>
            <remarks>
            The <paramref name="clientCacheName"/> parameter represents the registration/config name of the Client Cache (L1 Cache). 
            Depending upon the configuration the <see cref="T:Alachisoft.NCache.Client.ISearchStore"/> object is 
            created inproc or outproc.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="storeName"/> is a null reference.</exception>
            <code>
            SearchStoreConnectionOptions searchStoreConnectionOptions = new SearchStoreConnectionOptions();
            
            searchStoreConnectionOptions.LoadBalance = true;
            searchStoreConnectionOptions.ConnectionRetries = 5;
            searchStoreConnectionOptions.Mode = IsolationLevel.OutProc;
            searchStoreConnectionOptions.ClientRequestTimeOut = TimeSpan.FromSeconds(30);
            searchStoreConnectionOptions.UserCredentials = new Credentials("domain\\user-id", "password");
            searchStoreConnectionOptions.RetryInterval = TimeSpan.FromSeconds(5);
            searchStoreConnectionOptions.ServerList = new List&lt;ServerInfo&gt;();
            {
            	new ServerInfo("remoteServer",9800)
            };
            
            SearchStoreConnectionOptions clientConnectionOptions = new SearchStoreConnectionOptions();
            clientConnectionOptions.Mode = IsolationLevel.InProc;
            
            ISearchStore cache = SearchMananger.GetSearchStore("demoStore", searchStoreConnectionOptions,"clientCache",clientConnectionOptions);
            </code>
        </member>
        <member name="M:Alachisoft.NCache.Client.SearchStore.SearchManager.GetStoreClients(System.String,Alachisoft.NCache.Client.CacheConnection)">
            <summary>
            Get information of clients connected to each server node in a cache.
            </summary>
            <param name="storeName">The identifier for the <see cref="T:Alachisoft.NCache.Client.ISearchStore"/>.</param>
            <param name="connection"><see cref="T:Alachisoft.NCache.Client.CacheConnection"/> parameters for connection to Cache.</param>
            <returns>Key value pair of <see cref="T:Alachisoft.NCache.Runtime.CacheManagement.ServerNode"/> and list of <see cref="T:Alachisoft.NCache.Runtime.Caching.ClientInfo"/> in a cache. </returns>
            <example>
            The following example shows how to get connected clients to each server node in a cache.
            <code>
            CacheConnection cacheConnection = new CacheConnection("remoteServer", 8250);
            cacheConnection.UserCredentials = new Credentials("domain\\user-id", "password");
            
            Dictionary&lt;ServerNode, List&lt;Alachisoft.NCache.Runtime.Caching.ClientInfo&gt; info = CacheManager.GetCacheClients("demoCache", cacheConnection);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.SearchStore.SearchManager.StartStore(System.String,Alachisoft.NCache.Client.ConnectionOptions)">
            <summary>
            Starts an out-proc cache. The end result is the same as that of starting the 
            cache using NCache Manager. It starts the cache on the specified cache server.
            If the Cache Server could not be contacted then it throws a <see cref="T:Alachisoft.NCache.Runtime.Exceptions.ManagementException"/> exception.
            It tries to get the Security Parameters from the Client.ncconf.
            </summary>
            <param name="storeName">The identifier for the <see cref="T:Alachisoft.NCache.Client.ISearchStore"/>.</param>
            <param name="connection"><see cref="T:Alachisoft.NCache.Client.CacheConnection"/> parameters for connection to Cache.</param>
            <example>
            The following example show to to start cache from application.
            <code>
            CacheConnection cacheConnection = new CacheConnection("remoteServer", 8250);
            cacheConnection.UserCredentials = new Credentials("domain\\user-id", "password");
            
            CacheManager.StartStore("demoCache", cacheConnection);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.SearchStore.SearchManager.StopStore(System.String,Alachisoft.NCache.Client.ConnectionOptions,System.Boolean)">
            <summary>
            Stops an out-proc cache. The end result is the same as that of stoping the 
            cache using NCache Manager. It stops the cache only on the same server where the 
            client application is running.
            If the Cache Server could not be contacted then it throws a <see cref="!:ManagementException"/> exception.
            It tries to get the Security Parameters from the Client.ncconf.
            </summary>
            <param name="storeName">The identifier for the <see cref="T:Alachisoft.NCache.Client.ISearchStore"/>.</param>
            <param name="connection"><see cref="T:Alachisoft.NCache.Client.CacheConnection"/> parameters for connection to Cache.</param>
            <param name="gracefullyShutDownNode">The identifier for graceful node shutdown.</param>
            <example>
            The following example show to to stop cache from application.
            <code>
            ConnectionOptions sonnectionOptions = new ConnectionOptions("remoteServer", 8250);
            sonnectionOptions.UserCredentials = new Credentials("domain\\user-id", "password");
            
            SearchManager.StopStore("demoCache", sonnectionOptions, true);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.SearchStore.SearchManager.GetStoreHealth(System.String,Alachisoft.NCache.Client.ConnectionOptions)">
            <summary>
            Get Health status of a cache.
            </summary>
            <param name="storeName">The identifier for the <see cref="T:Alachisoft.NCache.Client.ISearchStore"/>.</param>
            <param name="connection"><see cref="T:Alachisoft.NCache.Client.ConnectionOptions"/> parameters for connection to Store.</param>
            <returns><see cref="T:Alachisoft.NCache.Runtime.CacheManagement.CacheHealth"/> containing information store including <see cref="T:Alachisoft.NCache.Runtime.CacheManagement.NodeStatus"/> for each node in store.</returns>
            <example>
            The following example shows the to Health status of a store.
            <code>
            ConnectionOptions connectionOptions = new ConnectionOptions("remoteServer", 8250);
            connectionOptions.UserCredentials = new Credentials("domain\\user-id", "password");
            
            CacheHealth cacheHealth = SearchManager.GetStoreHealth("demoCache",connectionOptions);
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Client.SearchStore.SearchStoreCollection">
            <summary>
            Represents a collection of the caches initialized within the same application domain. 
            </summary>
            <remarks>An instance of this class can not be created. The class implements the IEnumerable 
            interface.
            </remarks>
        </member>
        <member name="P:Alachisoft.NCache.Client.SearchStore.SearchStoreCollection.Item(System.String)">
            <summary>
            Gets the Store instance at the specified key.
            </summary>
            <param name="storeId">The store id that uniquely identifies each store instance</param>
            <returns>Alachisoft.NCache.Client.Caching.Cache instance</returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.SearchStore.SearchStoreCollection.Count">
            <summary>
            The count of the stores contained in the collection.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.SearchStore.SearchStoreCollection.GetEnumerator">
            <summary>
            Returns an <seealso cref="T:System.Collections.IEnumerator"/> which iterates over existent stores
            </summary>
            <returns>An System.Collections.IDictionaryEnumerator for the Alachisoft.NCache.Client.CacheCollection</returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.Caching.Statistics.PerfInstaller">
            <summary>
            Summary description for PerfInstaller.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.Caching.Statistics.PerfInstaller.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.Caching.Statistics.PerfInstaller.#ctor">
            <summary>
            Installs perfmon counters related to NCache Client 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.Caching.Statistics.PerfInstaller.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.Messaging.Statistics.PerfInstaller">
            <summary>
            Summary description for PerfInstaller.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.Messaging.Statistics.PerfInstaller.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.Messaging.Statistics.PerfInstaller.#ctor">
            <summary>
            Installs perfmon counters related to NCache Client 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.Messaging.Statistics.PerfInstaller.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.BridgeStore">
            <exclude/>
        </member>
        <member name="T:Alachisoft.NCache.Client.SyncCache">
            <exclude/>
        </member>
        <member name="M:Alachisoft.NCache.Client.SyncCache.#ctor(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Given CacheID, server and port creates an instance of SyncCache.
            </summary>
            <param name="cacheId">Cache ID to sync with.</param>
            <param name="server">server to connect.</param>
            <param name="port">server port.</param>
        </member>
        <member name="P:Alachisoft.NCache.Client.SyncCache.IsModeInProc">
            <summary>
            Cache Inproc status in boolean
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.SyncCache.OnCacheClear">
            <summary>
            Raises CacheCleared event when SyncCache is cleared.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.SyncCache.OnNodeLeave(Alachisoft.NCache.Client.NodeInfo)">
            <summary>
            Raises NodeLeft event when a node of SyncCache leaves.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.SyncCache.OnCacheStopped(System.String)">
            <summary>
            Raises CacheStopped event when Cache Stops.
            </summary>
            <param name="caheId">CacheId of the cache stopped.</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.SyncCache.OnItemChangedCallback(System.String,Alachisoft.NCache.Client.CacheEventArg)">
            <summary>
            Raises SyncItemUpdated event when item is updated in the cache.
            </summary>
            <param name="key">updated key</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.SyncCache.OnItemRemovedCallback(System.String,Alachisoft.NCache.Client.CacheEventArg)">
            <summary>
            Raises SyncItemRemoved event when item is removed.
            </summary>
            <param name="key">key of the item removed.</param>
            <param name="value">value of the item removed.</param>
            <param name="reason">reason for the item removed.</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.SyncCache.Get(System.String,System.UInt64@,Alachisoft.NCache.Common.BitSet@,System.DateTime@,System.TimeSpan@,System.Int64@,System.String@,System.String@,System.Collections.Hashtable@,Alachisoft.NCache.Runtime.Dependencies.CacheDependency@,Alachisoft.NCache.Runtime.Caching.ResyncOptions@,Alachisoft.NCache.Runtime.CacheItemPriority@,System.String@)">
            <summary>
            Gets the item for the given key.
            </summary>
            <param name="key">the key to fetch from cache.</param>
            <returns>Value of the item. null if item does not exist in the cache.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.SyncCache.RegisterSyncKeyNotifications(System.String,Alachisoft.NCache.Caching.CacheSynchronization.ISyncCacheEventsListener,Alachisoft.NCache.Runtime.Events.CallbackType)">
            <summary>
            Registers the Sync Key notification with the cache.
            </summary>
            <param name="key">key</param>
            <param name="eventListener">event listener to be notified.</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.SyncCache.UnRegisterSyncKeyNotifications(System.String,Alachisoft.NCache.Caching.CacheSynchronization.ISyncCacheEventsListener)">
            <summary>
            Unregister the snckey notifications.
            </summary>
            <param name="key">key</param>
            <param name="eventListener">eventlistener to unregister.</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.SyncCache.UnRegisterBulkSyncKeyNotifications(System.String[],Alachisoft.NCache.Caching.CacheSynchronization.ISyncCacheEventsListener)">
            <summary>
            Unregister key based notification in bulk
            </summary>
            <param name="keys"></param>
            <param name="eventListener"></param>
        </member>
        <member name="P:Alachisoft.NCache.Client.SyncCache.CacheId">
            <summary>
            CacheId
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.SyncCache.Initialize(System.String,System.String)">
            <summary>
            Initializes the SyncCache.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.SyncCache.Dispose">
            <summary>
            Disposes this SyncCache Instance.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.AddressUtil">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheHelper.GetObjectOrDataTypeForCacheItem(System.String,Alachisoft.NCache.Common.Caching.EntryType,System.Object)">
            <summary>
            Get object for GetCacheItem call and get handler for the Distributed Data type.
            </summary>
            <param name="name">Key of the object</param>
            <param name="entryType">Enum that tells the type of the object</param>
            <param name="obj">value agianst that key</param>
            <param name="cache">RemoteCache instance</param>
            <returns>object</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheHelper.GetObjectOrInitializedCollection(System.String,Alachisoft.NCache.Common.Caching.EntryType,System.Object,Alachisoft.NCache.Client.Cache)">
            <summary>
            Get object for simple cache item and Get handler for the Distributed Data type.
            </summary>
            <param name="name">Key of the object</param>
            <param name="entryType">Enum that tells the type of the object</param>
            <param name="obj">value agianst that key</param>
            <param name="cache">RemoteCache instance</param>
            <returns>object</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheHelper.GetObjectOrInitializedCollection``1(System.String,Alachisoft.NCache.Common.Caching.EntryType,System.Object,Alachisoft.NCache.Client.Cache)">
            <summary>
            Get object for simple cache item and Get handler for the Distributed Data type.
            </summary>
            <param name="name">Key of the object</param>
            <param name="entryType">Enum that tells the type of the object</param>
            <param name="obj">value agianst that key</param>
            <param name="cache">RemoteCache instance</param>
            <typeparam name="T"></typeparam>
            <returns>object</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheHelper.BulkGetObjectOrInitializedCollection(System.Collections.Hashtable,Alachisoft.NCache.Client.Cache)">
            <summary>
            Get object for simple cache item and Get handler for the Distributed Data type for provided Bulk.
            </summary>
            <param name="keyValueDic">KeyValue Pair of Keys and CompressedValueEntries agaianst them</param>
            <param name="cache">RemoteCache instance</param>
            <returns>Hashtable</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheHelper.BulkGetObjectOrInitializedCollection``1(System.Collections.Hashtable,Alachisoft.NCache.Client.StoreBase)">
            <summary>
            Get object for simple cache item and Get handler for the Distributed Data type for provided Bulk.
            </summary>
            <param name="keyValueDic">KeyValue Pair of Keys and CompressedValueEntries agaianst them</param>
            <param name="cache">RemoteCache instance</param>
            <typeparam name="T"></typeparam>
            <returns>Hashtable</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.DirectoryUtil.GetFileLocalPath(System.String)">
            <summary>
            search for the specified file in the executing assembly's working folder
            if the file is found, then a path string is returned back. otherwise it returns null.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.DirectoryUtil.GetFileGlobalPath(System.String,System.String)">
            <summary>
            search for the specified file in NCache install directory. if the file is found
            then returns the path string from where the file can be loaded. otherwise it returns 
            null.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.HashtableUtil">
            <summary>
            Provide methods to convert hashtable into a string form, and repopulating
            hashtable from string. The conversion do not save type information and assumes
            that keys are of int type, while values are of string type
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.HashtableUtil.ToString(System.Collections.Hashtable)">
            <summary>
            Convert hashtable to a string form
            </summary>
            <param name="table">Hashtable containing int key and string value</param>
            <returns>String representation of hashtable</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.HashtableUtil.ToString(System.Collections.ArrayList)">
            <summary>
            Converts to string.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.HashtableUtil.FromString(System.String)">
            <summary>
            Populate a hashtable from its string representation
            </summary>
            <param name="rep">String representation of hashtable</param>
            <returns>Hashtable formed from string representation</returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.Logs">
            <summary>
            Create logs
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.Logs.NCacheLog">
            <summary>
            Creates NCache logs
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.Logs.IsErrorLogsEnabled">
            <summary>
            Enables/disables error logs.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.Logs.IsDetailedLogsEnabled">
            <summary>
            Enables/disables detailed logs.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.Search">
            <summary>
            Enumeration that specifies the search location for the file.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.Search.LocalSearch">
            <summary>
            Search in local directory.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.Search.LocalConfigSearch">
            <summary>
            Search in local config directory.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.Search.GlobalSearch">
            <summary>
            Search in NCache installed config directory.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.AggregatorCombiner">
            <summary>
             Interface that implements Combiner for Aggregator.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.AggregatorCombiner.#ctor(Alachisoft.NCache.Runtime.Aggregation.IAggregator,System.Type)">
            <summary>
            Constructor to initialize instance of class.
            </summary>
            <param name="aggregator">instance of IAggregator</param>
            <param name="classType">Class data type</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.AggregatorCombiner.Combine(System.Object)">
            <summary>
            Reduces the task results locally so Reducer is not burdened with excessive processing.
            </summary>
            <param name="value"> Value for making grouped data for reducer. </param>
        </member>
        <member name="M:Alachisoft.NCache.Client.AggregatorCombiner.FinishChunk">
            <summary>
            When some specified chunk size is reached, combiners marks the functionality end on that chunk and send it to Reducer for further processing. 
            And resets its internal state for next chunk.
            </summary>
            <returns>Sends the chunk to Reducer.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.AggregatorCombiner.BeginCombine">
            <summary>
            Any Initialization for the parameters before actual combining begins.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.AggregatorCombinerFactory">
            <summary>
            Assigns a unique Combiner for each provided key.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.AggregatorCombinerFactory.#ctor(Alachisoft.NCache.Runtime.Aggregation.IAggregator,System.Type)">
            <summary>
            Constructor to initialize instance of class.
            </summary>
            <param name="aggregator">instance of IAggregator</param>
            <param name="classType">Class data type</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.AggregatorCombinerFactory.Create(System.Object)">
            <summary>
             Provides incoming element with a new instance of Combiner to merge intermediate key-value pairs from Mapper.
            </summary>
            <param name="key">Key for new Combiner</param>
            <returns>New instance of ICombiner.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.AggregatorMapper">
            <summary>
            Aggregator mapper interface generates a set of intermediate key-value pairs for further refining and extraction of the data.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.AggregatorMapper.#ctor(Alachisoft.NCache.Runtime.Aggregation.IValueExtractor)">
            <summary>
             Constructor to initialize instance of class.
            </summary>
            <param name="valueExtractor">instance of IValue Extractor</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.AggregatorMapper.Map(System.Object,System.Object,Alachisoft.NCache.Runtime.MapReduce.IOutputMap)">
            <summary>
            For every key-value pair input, Map method is executed, to get a more specific and meaningful data. 
            </summary>
            <param name="key">Key value of cache Entry.</param>
            <param name="value">Value for the key</param>
            <param name="context">Emitted output value for each key-value pair</param>
            
        </member>
        <member name="M:Alachisoft.NCache.Client.AggregatorMapper.Dispose">
            <summary>
            Disposes the instance
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.AggregatorReducer">
            <summary>
            Apply aggregation and compilation on final result. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.AggregatorReducer.#ctor(System.Object,Alachisoft.NCache.Runtime.Aggregation.IAggregator,System.Type)">
            <summary>
            Constructor to initialize instance of class. 
            </summary>
            <param name="key">key value</param>
            <param name="aggregator">IAggregator instance</param>
            <param name="classType">Class data type.</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.AggregatorReducer.Reduce(System.Object)">
            <summary>
            Reduces the key-value pair to further meaning full pairs.
            </summary>
            <param name="value">Value for the specified key.</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.AggregatorReducer.FinishReduce">
            <summary>
            Provides final result of map reduce task. 
            </summary>
            <returns>Return key-value pair.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.AggregatorReducer.BeginReduce">
            <summary>
            Starting point for initialization of reducer.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.AggregatorReducerFactory">
            <summary>
            Assigns a unique Reducer for each provided key.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.AggregatorReducerFactory.#ctor(Alachisoft.NCache.Runtime.Aggregation.IAggregator,System.Type)">
            <summary>
            Constructor to initialize instance of class.
            </summary>
            <param name="aggregator">instance of IAggregator</param>
            <param name="classType">Class data type</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.AggregatorReducerFactory.Create(System.Object)">
            <summary>
            Provides incoming element with a new instance of Reducer to merge intermediate key-value pairs from Combiner.
            </summary>
            <param name="key">Key for new Reducer</param>
            <returns>New instance of IReducer.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.AggregatorTask">
            <summary>
            Provides basic implementation of Aggregator. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.AggregatorTask.#ctor(Alachisoft.NCache.Runtime.Aggregation.IValueExtractor,Alachisoft.NCache.Runtime.Aggregation.IAggregator)">
            <summary>
            Initialize an instance of the class.
            </summary>
            <param name="valueExtractor">instance of IValueExtractor</param>
            <param name="aggregator">instance ofIAggregator</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.AggregatorTask.CreateMapReduceTask">
            <summary>
            Create Map Reduce Task using given Mapper, Combiner and Reducer for current aggregator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.AggregatorTask.BuiltInAggregatorType">
            <summary>
            Returns current Built in Aggregator type. 
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.AggregatorTask.AggregatorType">
            <summary>
            Returns instance of built in Aggregator 
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.BuiltInAggregator">
            <summary>
            Sets current Built in aggregator instance.
            Performs actual grouping and analytical operations on data.
            IAggregator can perform following operations
            Average, Sum, Min, Max, Count and Distinct.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.IntegerSum">
            <summary>
            Constructor to initialize instance of class with Integer Sum type aggregator.
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.Count">
            <summary>
            Constructor to initialize instance of class with Count type aggregator.
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.Distinct">
            <summary>
            Constructor to initialize instance of class with Distinct type aggregator.
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.DoubleSum">
            <summary>
            Constructor to initialize instance of class with Double Sum type aggregator.
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.FloatSum">
            <summary>
            Constructor to initialize instance of class with Float Sum type aggregator.
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.DecimalSum">
            <summary>
            Constructor to initialize instance of class with Decimal Sum type aggregator.
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.BigIntegerSum">
            <summary>
            Constructor to initialize instance of class with Big Integer Sum type aggregator.
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.LongSum">
            <summary>
            Constructor to initialize instance of class with Long Integer Sum type aggregator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.ShortSum">
            <summary>
            Constructor to initialize instance of class with Short Integer Sum type aggregator.
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.IntegerAvg">
            <summary>
            Constructor to initialize instance of class with Integer Average type aggregator.
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.DoubleAvg">
            <summary>
            Provides instance of class with Integer Sum type aggregator.
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.FloatAvg">
            <summary>
            Provides instance of class with Float Average type aggregator.
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.DecimalAvg">
            <summary>
            Provides instance of class with Decimal Average type aggregator.
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.BigIntegerAvg">
            <summary>
            Provides instance of class with Big Integer Average type aggregator.
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.LongAvg">
            <summary>
            Provides instance of class with Long Integer Average type aggregator.
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.ShortAvg">
            <summary>
            Provides instance of class with Short Average type aggregator.
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.IntegerMin">
            <summary>
            Provides instance of class with Integer Min type aggregator.
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.DoubleMin">
            <summary>
            Provides instance of class with Double Min type aggregator.
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.FloatMin">
            <summary>
            Provides instance of class with Float Min type aggregator
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.DecimalMin">
            <summary>
            Provides instance of class with Decimal Min type aggregator
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.BigIntegerMin">
            <summary>
            Provides instance of class with Big Integer Min type aggregator
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.LongMin">
            <summary>
            Provides instance of class with Long Integer Min type aggregator
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.ShortMin">
            <summary>
            Provides instance of class with Short Integer Min type aggregator
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.IntegerMax">
            <summary>
            Provides instance of class with Integer Maximum type aggregator
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.DoubleMax">
            <summary>
            Provides instance of class with Double Maximum type aggregator
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.FloatMax">
            <summary>
            Provides instance of class with Float Maximum type aggregator
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.DecimalMax">
            <summary>
            Provides instance of class with Double Max type aggregator
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.BigIntegerMax">
            <summary>
            Provides instance of class with Maximum Big Integer type aggregator
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.LongMax">
            <summary>
             Provides instance of class with Maximum Long type aggregator
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.ShortMax">
            <summary>
            Provides instance of class with Maximum Short type aggregator
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.StringMax">
            <summary>
            Provides instance of class with Maximum String type aggregator
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.StringMin">
            <summary>
            Provides instance of class with Minimum string type aggregator
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.DateTimeMin">
            <summary>
            Provides instance of class with Minimum date time type aggregator
            </summary>
            <returns>IAggregator instance.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.DateTimeMax">
             <summary>
            Provides instance of class with Maximum date time type aggregator
             </summary>
             <returns>IAggregator instance.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.BuiltInAggregator.IntegerAggregator">
            <summary>
            Implements built in Integer type aggregator. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.IntegerAggregator.#ctor(Alachisoft.NCache.Common.Enum.AggregateFunctionType)">
            <summary>
            Constructor for Integer Aggregator
            </summary>
            <param name="type">AggregateFunctionType</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.IntegerAggregator.Aggregate(System.Object)">
            <summary>
            Performs given logic of aggregate on local node like combiner. 
            </summary>
            <param name="value">object</param>
            <returns>Returns aggregated result.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.IntegerAggregator.AggregateAll(System.Object)">
            <summary>
            Performs given logic of aggregate on all server nodes like Reduce phase operation. 
            </summary>
            <param name="value">object</param>
            <returns>Returns aggregated result.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.BuiltInAggregator.DoubleAggregator">
            <summary>
            Implements built in Double type aggregator. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.DoubleAggregator.#ctor(Alachisoft.NCache.Common.Enum.AggregateFunctionType)">
            <summary>
            Constructor for DoubleAggregator class
            </summary>
            <param name="type">AggregateFunctionType</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.DoubleAggregator.Aggregate(System.Object)">
            <summary>
            Performs given logic of aggregate on local node like combiner. 
            </summary>
            <param name="value">object</param>
            <returns>Returns aggregated result.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.DoubleAggregator.AggregateAll(System.Object)">
            <summary>
            Performs given logic of aggregate on all server nodes like Reduce phase operation. 
            </summary>
            <param name="value">object</param>
            <returns>Returns aggregated result.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.BuiltInAggregator.FloatAggregator">
            <summary>
            Implements built in Float type aggregator. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.FloatAggregator.#ctor(Alachisoft.NCache.Common.Enum.AggregateFunctionType)">
            <summary>
            Constructor for FloatAggregator class
            </summary>
            <param name="type">AggregatorFunctionType</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.FloatAggregator.Aggregate(System.Object)">
            <summary>
            Performs given logic of aggregate on local node like combiner. 
            </summary>
            <param name="value">object</param>
            <returns>Returns aggregated result.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.FloatAggregator.AggregateAll(System.Object)">
            <summary>
            Performs given logic of aggregate on all server nodes like Reduce phase operation. 
            </summary>
            <param name="value">object</param>
            <returns>Returns aggregated result.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.BuiltInAggregator.DecimalAggregator">
            <summary>
            Implements built in Decimal type aggregator. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.DecimalAggregator.#ctor(Alachisoft.NCache.Common.Enum.AggregateFunctionType)">
            <summary>
            Constructor for DecimalAggregator class
            </summary>
            <param name="type">AggregatorFunctionType</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.DecimalAggregator.Aggregate(System.Object)">
            <summary>
            Performs given logic of aggregate on local node like combiner. 
            </summary>
            <param name="value">object</param>
            <returns>Returns aggregated result.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.DecimalAggregator.AggregateAll(System.Object)">
            <summary>
            Performs given logic of aggregate on all server nodes like Reduce phase operation. 
            </summary>
            <param name="value">object</param>
            <returns>Returns aggregated result.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.BuiltInAggregator.BigIntegerAggregator">
            <summary>
            Implements built in BigInteger type aggregator. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.BigIntegerAggregator.#ctor(Alachisoft.NCache.Common.Enum.AggregateFunctionType)">
            <summary>
            Constructor for BigIntegerAggregator class
            </summary>
            <param name="type">AggregatorFunctionType</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.BigIntegerAggregator.Aggregate(System.Object)">
            <summary>
            Performs given logic of aggregate on local node like combiner. 
            </summary>
            <param name="value">object</param>
            <returns>Returns aggregated result.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.BigIntegerAggregator.AggregateAll(System.Object)">
            <summary>
            Performs given logic of aggregate on all server nodes like Reduce phase operation. 
            </summary>
            <param name="value">object</param>
            <returns>Returns aggregated result.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.BuiltInAggregator.LongAggregator">
            <summary>
            Implements built in LongInteger type aggregator. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.LongAggregator.#ctor(Alachisoft.NCache.Common.Enum.AggregateFunctionType)">
            <summary>
            Constructor for LongAggregator class
            </summary>
            <param name="type">AggregatorFunctionType</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.LongAggregator.Aggregate(System.Object)">
            <summary>
            Performs given logic of aggregate on local node like combiner. 
            </summary>
            <param name="value">object</param>
            <returns>Returns aggregated result.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.LongAggregator.AggregateAll(System.Object)">
            <summary>
            Performs given logic of aggregate on all server nodes like Reduce phase operation. 
            </summary>
            <param name="value">object</param>
            <returns>Returns aggregated result.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.BuiltInAggregator.ShortAggregator">
            <summary>
            Implements built in ShortInteger type aggregator. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.ShortAggregator.#ctor(Alachisoft.NCache.Common.Enum.AggregateFunctionType)">
            <summary>
            Constructor for ShortAggregator class
            </summary>
            <param name="type">AggregatorFunctionType</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.ShortAggregator.Aggregate(System.Object)">
            <summary>
            Performs given logic of aggregate on local node like combiner. 
            </summary>
            <param name="value">object</param>
            <returns>Returns aggregated result.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.ShortAggregator.AggregateAll(System.Object)">
            <summary>
            Performs given logic of aggregate on all server nodes like Reduce phase operation. 
            </summary>
            <param name="value">object</param>
            <returns>Returns aggregated result.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.BuiltInAggregator.StringAggregator">
            <summary>
            Implements built in String type aggregator. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.StringAggregator.#ctor(Alachisoft.NCache.Common.Enum.AggregateFunctionType)">
            <summary>
            Constructor for StringAggregator class
            </summary>
            <param name="type">AggregatorFunctionType</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.StringAggregator.Aggregate(System.Object)">
            <summary>
            Performs given logic of aggregate on local node like combiner. 
            </summary>
            <param name="value">object</param>
            <returns>Returns aggregated result.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.StringAggregator.AggregateAll(System.Object)">
            <summary>
            Performs given logic of aggregate on all server nodes like Reduce phase operation. 
            </summary>
            <param name="value">object</param>
            <returns>Returns aggregated result.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.BuiltInAggregator.DateAggregator">
            <summary>
            Implements built in Date type aggregator. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.DateAggregator.#ctor(Alachisoft.NCache.Common.Enum.AggregateFunctionType)">
            <summary>
            Constructor for DateAggregator class
            </summary>
            <param name="type">AggregatorFunctionType</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.DateAggregator.Aggregate(System.Object)">
            <summary>
            Performs given logic of aggregate on local node like combiner. 
            </summary>
            <param name="value">object</param>
            <returns>Returns aggregated result.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.DateAggregator.AggregateAll(System.Object)">
            <summary>
            Performs given logic of aggregate on all server nodes like Reduce phase operation. 
            </summary>
            <param name="value">object</param>
            <returns>Returns aggregated result.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.BuiltInAggregator.CountAggregator">
            <summary>
            Implements built in Count aggregator. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.CountAggregator.Aggregate(System.Object)">
            <summary>
            Performs given logic of aggregate on local node like combiner. 
            </summary>
            <param name="value">object</param>
            <returns>Returns aggregated result.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.CountAggregator.AggregateAll(System.Object)">
            <summary>
            Performs given logic of aggregate on all server nodes like Reduce phase operation. 
            </summary>
            <param name="value">object</param>
            <returns>Returns aggregated result.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.BuiltInAggregator.DistinctAggregator">
            <summary>
            Implements built in Distinct aggregator i.e gives unique occurrence of item in data set. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.DistinctAggregator.Aggregate(System.Object)">
            <summary>
            Performs given logic of aggregate on local node like combiner. 
            </summary>
            <param name="value">object</param>
            <returns>Returns aggregated result.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.BuiltInAggregator.DistinctAggregator.AggregateAll(System.Object)">
            <summary>
            Performs given logic of aggregate on all server nodes like Reduce phase operation. 
            </summary>
            <param name="value">object</param>
            <returns>Returns aggregated result.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.CacheClearedCallback">
            <summary>
            Defines a callback method for notifying applications when the <see cref="T:Alachisoft.NCache.Client.ICache"/> is cleared.
            </summary>
            <remarks>Since, this handler is invoked every time the <see cref="T:Alachisoft.NCache.Client.ICache"/> is cleared, doing a lot
            of processing inside the handler might have an impact on the performance of the cache and cluster. It
            is, therefore, advisable to do minimal processing inside the handler.
            </remarks>
            <example>The following example demonstrates how to use the <see cref="T:Alachisoft.NCache.Client.CacheClearedCallback"/> class to notify 
            an application when the application's <see cref="T:Alachisoft.NCache.Client.ICache"/> object is cleared.
            <code>
            
            public void OnCacheCleared()
            {
            	// ...
            }
            
            protected void Application_Start(object sender, EventArgs e)
            {
            	try
            	{
            		ICache cache = CacheManager.GetCache("demoClusteredCache");
            		cache.NotificationService.CacheCleared += new CacheClearedCallback(this.OnCacheCleared);
            	}
            	catch (Exception ex)
            	{
            
            	}
            }
            
            </code>
            </example>
            <requirements>
            <constraint>This member is not available in SessionState edition.</constraint> 
            </requirements>
        </member>
        <member name="T:Alachisoft.NCache.Client.CacheDataNotificationCallback">
             <summary>
             Defines a callback method for notifying applications when an item 
             is updated in the <see cref="T:Alachisoft.NCache.Client.Cache"/>.
             </summary>
             <param name="key">The cache key used to reference the item.</param>
             <param name="cacheEventArgs">The cache event arguments.</param>
             <remarks>Since this handler is invoked every time an item is removed from the <see cref="T:Alachisoft.NCache.Client.Cache"/>, doing a lot
             of processing inside the handler might have an impact on the performance of the cache and cluster. It
             is, therefore, advisable to do minimal processing inside the handler.
             </remarks>
             <example>The following example demonstrates how to use the <see cref="T:Alachisoft.NCache.Client.CacheDataNotificationCallback"/> class to notify 
             an application when an item is updated to the application's <see cref="T:Alachisoft.NCache.Client.Cache"/> object. You can include this 
             code in a code declaration block in the Web Forms page, or in a page code-behind file.
             <code>
             
            	public static void OnCacheDataModification(string key, CacheEventArg args)
            {
                     //
            }
            
            	protected void Application_Start(object sender, EventArgs e)
            	{
            		try
            		{
            			ICache cache = CacheManager.GetCache("demoClusteredCache");
            			CacheDataNotificationCallback dataNotificationCallback = new CacheDataNotificationCallback(OnCacheDataModification);
            		}
            		catch(Exception e)
            		{
            		}
            	}
            	
             </code>
             </example>
        </member>
        <member name="T:Alachisoft.NCache.Client.CacheDataReader">
            <summary>
            To read query results contained in RecordSet. Suppresses hidden columns.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheDataReader.FieldCount">
            <summary>
            Gets number of visible columns in RecordSet 
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.CacheItemAddedCallback">
             <summary>
             Defines a callback method for notifying applications when an item 
             is added to the <see cref="T:Alachisoft.NCache.Client.Cache"/>.
             </summary>
             <param name="key">The cache key used to reference the item.</param>
             <remarks>Since this handler is invoked every time an item is removed from the <see cref="T:Alachisoft.NCache.Client.Cache"/>, doing a lot
             of processing inside the handler might have an impact on the performance of the cache and cluster. It
             is therefore advisable to do minimal processing inside the handler.
             </remarks>
             <example>The following example demonstrates how to use the <see cref="T:Alachisoft.NCache.Client.CacheItemAddedCallback"/> class to notify 
             an application when an item is added to the application's <see cref="T:Alachisoft.NCache.Client.Cache"/> object. You could include this 
             code in a code declaration block in the Web Forms page, or in a page code-behind file.
             <code>
             
            	public void OnItemAdded(string k)
            	{
            		// ...
            	}
            
            	protected void Application_Start(object sender, EventArgs e)
            	{
            		try
            		{
            			NCache.InitializeCache("demoClusteredCache");
            			NCache.Cache.ItemAdded += new CacheItemAddedCallback(this.OnItemAdded);
            		}
            		catch(Exception e)
            		{
            		}
            	}
            	
             </code>
             </example>
             <requirements>
             <constraint>This member is not available in SessionState edition.</constraint> 
             </requirements>
        </member>
        <member name="T:Alachisoft.NCache.Client.CacheItemRemovedCallback">
             <summary>
             Defines a callback method for notifying applications when a cached item 
             is removed from the <see cref="T:Alachisoft.NCache.Client.Cache"/>.
             </summary>
             <param name="key">The index location for the item removed from the cache.</param>
             <param name="value">The object item removed from the cache.</param>
             <param name="reason">The reason the item was removed from the cache, as specified by 
             the <see cref="T:Alachisoft.NCache.Client.CacheItemRemovedReason"/> enumeration.</param>
             <remarks>Since this handler is invoked every time an item is removed from the <see cref="T:Alachisoft.NCache.Client.Cache"/>, doing a lot
             of processing inside the handler might have an impact on the performance of the cache and cluster. It
             is therefore advisable to do minimal processing inside the handler.
             </remarks>
             <example>The following example demonstrates how to use the <see cref="T:Alachisoft.NCache.Client.CacheItemRemovedCallback"/> class to notify 
             an application when an item is removed from the application's <see cref="T:Alachisoft.NCache.Client.Cache"/> object. You could include this 
             code in a code declaration block in the Web Forms page, or in a page code-behind file.
             <code>
             
             static bool itemRemoved = false;
             static CacheItemRemovedReason reason;
             
             CacheItemRemovedCallback onRemove = null;
            
            	public void RemovedCallback(string k, object v, CacheItemRemovedReason r)
            	{
            		itemRemoved = true;
            		reason = r;
            	}
            
            	public void AddItemToCache(object sender, EventArgs e) 
            	{
            		itemRemoved = false;
            		onRemove = new CacheItemRemovedCallback(this.RemovedCallback);
            		if (Cache["Key1"] == null)
            			NCache.Cache.Insert("Key1", "Value 1", null, DateTime.Now.AddMinutes(60), TimeSpan.Zero, CacheItemPriority.High, onRemove);
            	}
            	
             </code>
             </example>
             <requirements>
             <constraint>This member is not available in SessionState edition.</constraint> 
             </requirements>
        </member>
        <member name="T:Alachisoft.NCache.Client.CacheItemRemovedReason">
             <summary>
             Specifies the reason an item was removed from the cache.
             </summary>
             <remarks>
             This enumeration works in coordination with the <see cref="T:Alachisoft.NCache.Client.CacheItemRemovedCallback"/> delegate to 
             notify your applications when and why an object was removed from the <see cref="T:Alachisoft.NCache.Client.Cache"/>.</remarks>
            <requirements>
             <constraint>This member is not available in SessionState edition.</constraint> 
             </requirements>
        </member>
        <member name="F:Alachisoft.NCache.Client.CacheItemRemovedReason.DependencyChanged">
            <summary>
            The item is removed from the cache because a file or key dependency changed.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.CacheItemRemovedReason.Expired">
            <summary>
            The item is removed from the cache because it expired.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.CacheItemRemovedReason.Removed">
            <summary>
            The item is removed from the cache by a <see cref="M:Alachisoft.NCache.Client.Cache.Remove(System.String,Alachisoft.NCache.Client.LockHandle,Alachisoft.NCache.Client.CacheItemVersion,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)"/> method call or by 
            <see cref="o:Cache.Insert"/> method call that specified the same key.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.CacheItemRemovedReason.Underused">
            <summary>
            The item is removed from the cache because the system removed it to free memory.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.CacheItemUpdatedCallback">
             <summary>
             Defines a callback method for notifying applications when an item 
             is updated in the <see cref="T:Alachisoft.NCache.Client.Cache"/>.
             </summary>
             <param name="key">The cache key used to reference the item.</param>
             <remarks>Since this handler is invoked every time an item is removed from the <see cref="T:Alachisoft.NCache.Client.Cache"/>, doing a lot
             of processing inside the handler might have an impact on the performance of the cache and cluster. It
             is therefore advisable to do minimal processing inside the handler.
             </remarks>
             <example>The following example demonstrates how to use the <see cref="T:Alachisoft.NCache.Client.CacheItemUpdatedCallback"/> class to notify 
             an application when an item is updated in the application's <see cref="T:Alachisoft.NCache.Client.Cache"/> object. You could include this 
             code in a code declaration block in the Web Forms page, or in a page code-behind file.
             <code>
             
            	public void OnItemUpdated(string k)
            	{
            		// ...
            	}
            
            	protected void Application_Start(object sender, EventArgs e)
            	{
            		try
            		{
            			NCache.InitializeCache("demoClusteredCache");
            			NCache.Cache.ItemUpdated += new CacheItemUpdatedCallback(this.OnItemUpdated);
            		}
            		catch(Exception e)
            		{
            		}
            	}
            	
             </code>
             </example>
             <requirements>
             <constraint>This member is not available in SessionState edition.</constraint> 
             </requirements>
        </member>
        <member name="T:Alachisoft.NCache.Client.CacheItemVersion">
            <summary>
            Represents the version of each cache item. An instance of this class is used 
            in the optimistic concurrency model to ensure the data integrity.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheItemVersion.Version">
            <summary>
            Gets/Sets the version.
            </summary>
            <returns>
            Gets/Sets the version.
            </returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheItemVersion.CompareTo(System.Object)">
            <summary>
            Compares an object with this instance of CacheItemVersion.
            </summary>
            <param name="obj">An object to compare with this instance of CacheItemVersion.</param>
            <returns>0 if two instances are equal. An integer greater than 0, if this instance is greater.
            An integer less than 0, if this instance is smaller.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheItemVersion.Equals(System.Object)">
            <summary>
            Identifies if two instances of this class are equal.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>True if two instances of this class are equal.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheItemVersion.ToString">
            <summary>
            The string representation of this class.
            </summary>
            <returns>
            The string representation of this class.
            </returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.CacheStoppedCallback">
             <summary>
             Defines a callback method for notifying applications when the <see cref="T:Alachisoft.NCache.Client.Cache"/> stops.
             </summary>
             <param name="cacheId">The identification of the cache being stopped. It is helpful, as multiple cache instances 
             can exist within the same application.</param>
             <remarks>This handler is invoked when a <see cref="T:Alachisoft.NCache.Client.Cache"/> stops.</remarks>
             <example>The following example demonstrates how to use the <see cref="T:Alachisoft.NCache.Client.CacheStoppedCallback"/> class to notify 
             an application when a cache stops. 
             <code>
             
            	public void OnCacheStopped(string cacheId)
            	{
            		// ...
            	}
            
            	protected void Application_Start(object sender, EventArgs e)
            	{
            		try
            		{
            			ICache cache = CacheManager.GetCache("demoClusteredCache");
            			cache.NotificationService.CacheStopped += new CacheStoppedCallback(this.OnCacheStopped);
            		}
            		catch(Exception ex)
            		{
            		}
            	}
            	
             </code>
             </example>
        </member>
        <member name="T:Alachisoft.NCache.Client.CacheStream">
            <summary>
            CacheStream is derived from System.IO.Stream. It is designed to serve/fetch BLOB (Binary Large Object) using the standard
            stream interface. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheStream.GetBufferedStream(System.Int32)">
            <summary>
            Gets System.IO.BufferedStream of given buffer size.
            </summary>
            <param name="bufferSize">Buffer size in bytes.</param>
            <returns>An instance of System.IO.BufferedStream.</returns>
            <remarks>CacheStream does not buffer the data. Each read/write operation performed on the stream is
            propagated to cache. However, this can cause performance issues if small chunks of data are being
            read/written from/to stream. System.IO.BufferedStream supports buffering of data. This method
            returns an instance of System.IO.BufferedStream which encapsulates CacheStream.</remarks>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheStream.GetBufferedStream">
            <summary>
            Gets System.IO.BufferedStream of given buffer size.
            </summary>
            <returns>An instance of System.IO.BufferedStream with buffer size of 4 Kb.</returns>
            <remarks>CacheStream does not buffer the data. Each read/write operation performed on the stream is
            propagated to cache. However, this can cause performance issues if small chunks of data are being
            read/written from/to stream. System.IO.BufferedStream supports buffering of data. This method
            returns an instance of System.IO.BufferedStream which encapsulates CacheStream.</remarks>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheStream.CanRead">
            <summary>
            Gets a value indicating whether the current
            stream supports reading.
            </summary>
            <returns>
            It specifies a boolean value, either true or false.
            </returns>
            <remarks>Returns true, if stream is opened with either StreamMode.Read or StreamMode.ReadWithoutLock. </remarks>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking. 
            </summary>
            <returns>
            It specifies a boolean value, either true or false.
            </returns>
            <remarks>Always returns false, because CacheStream does not support seek operation.</remarks>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheStream.CanWrite">
            <summary>
            Gets a value indicating whether the current
            stream supports writing.
            </summary>
            <returns>
            It specifies a boolean value, either true or false.
            </returns>
            <remarks>Returns true, if stream is opened with StreamMode.Write. </remarks>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheStream.Closed">
            <summary>
            Gets a value indicating whether stream is closed.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any
            buffered data to be written to the underlying device.
            </summary>
            <remarks>CacheStream does not buffer the data. Each read/write operations is performed on
            the cache.</remarks>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheStream.Length">
            <summary>
            Gets the length of the stream.
            </summary>
            <returns>
            This property specifies the length of the stream.
            </returns>
            <exception cref="T:System.ObjectDisposedException">Stream is closed.</exception>
            <exception cref="T:Alachisoft.NCache.Runtime.Exceptions.StreamAlreadyLockedException">Stream is already locked.</exception>
            <exception cref="T:Alachisoft.NCache.Runtime.Exceptions.StreamInvalidLockException">Lock acquired by current stream has become invalid.</exception>
            <exception cref="T:Alachisoft.NCache.Runtime.Exceptions.StreamNotFoundException">Stream is not found in the cache.</exception>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheStream.Position">
             <summary>
             Gets/Sets the position within current stream.
             </summary>
             <returns>
             Gets/Sets the position within current stream.
             </returns>
            <exception cref="T:System.NotSupportedException">Stream does not support seeking.</exception>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current
            stream and advances the position within the stream by the number of bytes
            read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified
            byte array with the values between offset and (offset + count - 1) replaced
            by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer that determines when to begin storing the data being read
            from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the
            number of bytes requested if that many bytes are not currently available,
            or zero (0) if the end of the stream has been reached.</returns>
            <remarks>This method is not thread-safe.</remarks>
            <exception cref="T:Alachisoft.NCache.Runtime.Exceptions.StreamAlreadyLockedException">Stream is already locked.</exception>
            <exception cref="T:Alachisoft.NCache.Runtime.Exceptions.StreamInvalidLockException">Lock acquired by current stream has become invalid.</exception>
            <exception cref="T:Alachisoft.NCache.Runtime.Exceptions.StreamNotFoundException">Stream is not found in the cache.</exception>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.</summary>
            <returns>
            Position of the byte(s) within the current stream.
            </returns>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position. </param>
            <remarks>CacheStream does not support seeking. </remarks>
            <exception cref="T:System.NotSupportedException">Stream does not support seeking.</exception>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.NotSupportedException">Stream does not support both writing and seeking.</exception>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and 
            advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer 
            to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer that determine when to begin copying 
            bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <remarks>This method is not thread-safe.</remarks>
            <exception cref="T:Alachisoft.NCache.Runtime.Exceptions.StreamAlreadyLockedException">Stream is already locked.</exception>
            <exception cref="T:Alachisoft.NCache.Runtime.Exceptions.StreamInvalidLockException">Lock acquired by current stream has become invalid.</exception>
            <exception cref="T:Alachisoft.NCache.Runtime.Exceptions.StreamNotFoundException">Stream is not found in the cache.</exception>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheStream.Close">
            <summary>
            Closes the current stream and releases any resources 
            associated with the current stream.
            </summary>
            <remarks>A call to close is required if stream is opened with StreamMode.Read or StreamMode.Write
            to release locks.</remarks>
            <exception cref="T:Alachisoft.NCache.Runtime.Exceptions.StreamAlreadyLockedException">Stream is already locked.</exception>
            <exception cref="T:Alachisoft.NCache.Runtime.Exceptions.StreamInvalidLockException">Lock acquired by current stream has become invalid.</exception>
            <exception cref="T:Alachisoft.NCache.Runtime.Exceptions.StreamNotFoundException">Stream is not found in the cache.</exception>
        </member>
        <member name="T:Alachisoft.NCache.Client.CacheStreamAttributes">
            <summary>
            CacheStreamAttributes Class contains information about the <see cref="T:Alachisoft.NCache.Client.CacheStream"/> attributes.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheStreamAttributes.#ctor(Alachisoft.NCache.Client.StreamMode)">
            <summary>
            Creates new instance of CacheStreamAttributes.
            </summary>
            <param name="streamMode">Specifies <see cref="T:Alachisoft.NCache.Client.StreamMode"/> of the <see cref="T:Alachisoft.NCache.Client.CacheStream"/>.</param>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheStreamAttributes.CacheItemPriority">
            <summary>
            Specifies the <see cref="T:Alachisoft.NCache.Runtime.CacheItemPriority"/> of the <see cref="T:Alachisoft.NCache.Client.CacheStream"/>.
            </summary>
            <returns>
            This property specifies the relative priority of items stored in the cache.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheStreamAttributes.Group">
            <summary>
            Specifies group for the <see cref="T:Alachisoft.NCache.Client.CacheStream"/>.
            </summary>
            <returns>
            Specifies group for the <see cref="T:Alachisoft.NCache.Client.CacheStream"/>.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheStreamAttributes.CacheDependency">
            <summary>
            Specifies <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/>, which can be files, 
            directories, or keys to other objects in application's cache. This class cannot be inherited.
            </summary>
            <returns>
            Specifies <see cref="T:Alachisoft.NCache.Runtime.Dependencies.CacheDependency"/>, which can be files, 
            directories, or keys to other objects in application's cache.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheStreamAttributes.Expiration">
            <summary>
            Specifies <see cref="T:Alachisoft.NCache.Runtime.Caching.Expiration"/> for the <see cref="T:Alachisoft.NCache.Client.CacheStream"/>. After the specified timespan,
            the item expires from cache.
            </summary>
            <returns>
            It specifies the time after which the item is expired from the cache.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheStreamAttributes.StreamMode">
            <summary>
            Specifies <see cref="T:Alachisoft.NCache.Client.StreamMode"/> of the <see cref="T:Alachisoft.NCache.Client.CacheStream"/>.
            </summary>
            <returns>
            It specifies modes of the CacheStream.
            </returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.CacheSyncDependency">
            <summary>
            A client application can have more than one cache instances initialized.
            CacheSyncDependency keeps the items present in one cache synchronized with 
            the items present in another cache. 
            </summary>
            <remarks>
            You can add items with the <see cref="T:Alachisoft.NCache.Client.CacheSyncDependency"/> to your application's cache using the <see cref="T:Alachisoft.NCache.Client.ICache"/> interface 
            and the Insert method.
            <para>When you add an item to an application's ICache object with 
            CacheSyncDependency, it monitors the remote cache (the cache you want your local cache
            to be synchronized with) for changes. As soon as an item is updated in or removed from the remote cache this change is automatically updated in the local cache if the CacheSyncDependency was provided with the cache items.
            This helps you keep your local cache synchronized with the remote cache all the time. 
            </para>
            </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheSyncDependency.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alachisoft.NCache.Client.CacheSyncDependency"/> with the 
            specified parameters. Internally it tries to initialize the remote cache.
            If the cache can not be initialized, it throws the exception describing the cause of
            failure.
            <para>
            The remote cache must be running as OutProc, even if it is on the same machine.
            The information to connect to the remote cache instance (like server-name and server-port)
            are picked from the client.ncconf file.
            </para>
            </summary>
            <param name="remoteCacheId">The unique ID of the remote cache.</param>
            <param name="key">The key of the item in the remote cache with which the 
            local cache item will be kept synchronized.</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheSyncDependency.#ctor(System.String,System.String,Alachisoft.NCache.Client.ServerInfo)">
            <summary>
            Initializes a new instance of the CacheSyncDependency with the 
            specified parameters. Internally, it tries to initialize the remote cache.
            If the cache can not be initialized, it throws the exception describing the cause of
            failure. The remote cache must be running as OutProc, even if it is on the same machine.
            </summary>
            <param name="remoteCacheId">The unique ID of the remote cache.</param>
            <param name="key">The key of the item in the remote cache with which the 
            local cache item will be kept synchronized.</param>
            <param name="serverInfo"><see cref="T:Alachisoft.NCache.Client.ServerInfo"/> containing information of the server where the remote cache is running.</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheSyncDependency.#ctor(System.String,System.String,System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the CacheSyncDependency with the 
            specified parameters. Internally it tries to initialize the remote cache.
            If the cache can not be initialized, it throws the exception describing the cause of
            failure. The remote cache must be running as OutProc, even if it is on the same machine.
            </summary>
            <param name="remoteCacheId">The unique ID of the remote cache.</param>
            <param name="key">The key of the item in the remote cache with which the 
            local cache item will be kept synchronized.</param>
            <param name="userId">The User ID of the remote cache.</param>
            <param name="password">The Security password of the remote cache.</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheSyncDependency.#ctor(System.String,System.String,Alachisoft.NCache.Client.ServerInfo,Alachisoft.NCache.Client.Credentials)">
            <summary>
            Initializes a new instance of the CacheSyncDependency with the 
            specified parameters. Internally it tries to initialize the remote cache.
            If the cache can not be initialized, it throws the exception describing the cause of
            failure. The remote cache must be running as OutProc, even if it is on the same machine.
            </summary>
            <param name="remoteCacheId">The unique ID of the remote cache.</param>
            <param name="key">The key of the item in the remote cache with which the 
            local cache item will be kept synchronized.</param>
            <param name="serverInfo"><see cref="T:Alachisoft.NCache.Client.ServerInfo"/> containing information of server where remote cache is running.</param>
            <param name="credentials"><see cref="T:Alachisoft.NCache.Client.Credentials"/> containing the User ID and password of ther server where remote cache is running.</param>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheSyncDependency.CacheId">
            <summary>
            The unique ID of the remote cache.
            </summary>
            <returns>
            The unique ID of the remote cache.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheSyncDependency.Key">
            <summary>
            The key of the item in the remote cache with which the local
            cache item needs to be synchronized.
            </summary>
            <returns>
            The key of the item in the remote cache with which the local
            cache item needs to be synchronized.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheSyncDependency.Server">
            <summary>
            The name of the server where the remote cache is running.
            </summary>
            <returns>
            Specifies the name of server on which the cache is running.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheSyncDependency.Port">
            <summary>
            The server port that is used by the clients to connect to 
            the server.
            </summary>
            <returns>
            Specifies the port of server on which the cache is running.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheSyncDependency.UserId">
            <summary>
            Specifies the User ID for user authorization.
            </summary>
            <returns>
            Specifies the User ID for user authorization.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheSyncDependency.Password">
            <summary>
            Specifies the user authorization password.
            </summary>
            <returns>
            Specifies the user authorization password.
            </returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheSyncDependency.Deserialize(Alachisoft.NCache.Runtime.Serialization.IO.CompactReader)">
            <summary>
            Loads the state from the passed reader object.
            </summary>
            <param name="reader">Base class for the CompactBinaryReader.</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.CacheSyncDependency.Serialize(Alachisoft.NCache.Runtime.Serialization.IO.CompactWriter)">
            <summary>
            Saves the state to the passed reader object.
            </summary>
            <param name="writer">Base class for the CompactBinaryWriter.</param>
        </member>
        <member name="F:Alachisoft.NCache.Client.ClientCache._nearCache">
            <summary>level 1 cache</summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.ClientCache._farCache">
            <summary>level 2 cache</summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.ClientCacheSyncMode">
            <summary>
            Gets/Sets enumeration to specify how the client cache is synchronized with the cluster caches through events. 
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.ClientCacheSyncMode.Pessimistic">
            <summary>
            In the "Pessimistic" mode of synchronization, the client cache always checks for the "version" of the cached item before returning it to the application.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.ClientCacheSyncMode.Optimistic">
            <summary>
            It is possible that the client cache is not synchronized with the clustered cache for a small period of time. If during this time users gets an item from the client cache, they may get an old version. This is the "Optimistic" mode of synchronization.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.ClientDataReader">
            <summary>
            To used for reader on client side and read query results.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.ContinuousQuery">
            <summary>
            Class to hold Object query and values, intended for notifications.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.ContinuousQuery.Command">
            <summary>
            Property to set Query Command for ContinuousQuery.
            </summary>
            <returns>
            It holds query text and values.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.ContinuousQuery.Query">
            <summary>
            Query text.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.ContinuousQuery.Values">
            <summary>
            Query values.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.ContinuousQuery.#ctor(Alachisoft.NCache.Client.QueryCommand)">
            <summary>
            Initializes a new instance of the ContinuousQuery class.
            </summary>
            <param name="command"><see cref="T:Alachisoft.NCache.Client.QueryCommand"/> containing query text and values.</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.ContinuousQuery.RegisterClearNotification(Alachisoft.NCache.Client.ContinuousQueryClearCallback)">
            <summary>
            This method registers a custom callback that is fired if dataset of a Continuous Query is cleared.
            </summary>
            <param name="callback">A delegate to register your custom method with</param>
            <example> The following example shows how to register the notification callback. First, create an CacheClearedCallback.
            <code>
             public static void CacheCleared()
              {
                ...
              }  
            </code>
            Then, declare your Continuous Query.
            <code>
            ContinuousQuery cQ=new ContinuousQuery(query);
            </code>
            Then, register your Notification Callback.
            <code>
            cQ.RegisterClearNotification(new ContinuousQueryClearCallback(CacheCleared));
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ContinuousQuery.UnRegisterClearNotification(Alachisoft.NCache.Client.ContinuousQueryClearCallback)">
            <summary>
            This method Unregisters the clear callback.
            </summary>
            <param name="callback">A delegate to register your custom method with.</param>
            <example>
            The following example shows how to register a ClearNotification.
            <code>
             public static void CacheCleared()
              {
                ...
              }
            </code>
            Next, you can unregister your Notification Callback as shown.
            <code>
            cQ.UnRegisterClearNotification(new ContinuousQueryClearCallback(CacheCleared));
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ContinuousQuery.RegisterAddNotification(Alachisoft.NCache.Client.ContinuousQueryItemAddedCallback)">
            <summary>
            Registers notification for item added in ContinuousQuery resultset.
            </summary>
            <param name="itemAddedCallback"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.ContinuousQuery.RegisterUpdateNotification(Alachisoft.NCache.Client.ContinuousQueryItemUpdatedCallback)">
            <summary>
            Registers notification for item updated in ContinuousQuery resultset.
            </summary>
            <param name="itemUpdatedCallback"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.ContinuousQuery.RegisterRemoveNotification(Alachisoft.NCache.Client.ContinuousQueryItemRemovedCallback)">
            <summary>
            Registers notification for item removed from ContinuousQuery resultset.
            </summary>
            <param name="itemRemovedCallback"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.ContinuousQuery.RegisterNotification(Alachisoft.NCache.Client.QueryDataNotificationCallback,Alachisoft.NCache.Runtime.Events.EventType,Alachisoft.NCache.Runtime.Events.EventDataFilter)">
            <summary>
            This method registers a custom callback that is fired on change in dataset of a Continuous Query.
            </summary>
            <param name="callback">A delegate to register your custom method with.</param>
            <param name="eventType">Describes whether the event is to be raised when an item is added, updated, or removed.</param>
            <param name="datafilter">This enum is to describe when registering an event, upon raise how much data is 
            retrieved from cache when the event is raised.</param>
            <example> The following example shows how to register the notification callback. First, create an ItemCallback.
            <code>
            ItemCallback(string key, CacheEventArg e)
            {
               ...
            }
            </code>
            Then declare your Continuous Query.
            <code>
            ContinuousQuery cQ=new ContinuousQuery(query,Hashtable vals);
            </code>
            Then register your Notification Callback.
            <code>
            cQ.RegisterNotification(new QueryDataNotificationCallback(ItemCallback),EventType.ItemAdded, EventDataFilter.None);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ContinuousQuery.UnRegisterNotification(Alachisoft.NCache.Client.QueryDataNotificationCallback,Alachisoft.NCache.Runtime.Events.EventType)">
            <summary>
            This method Unregisters a custom callback that is fired on change in dataset of a Continuous Query.
            </summary>
            <param name="callback">A delegate to register your custom method with.</param>
            <param name="eventType">Describes whether the event is to be raised when an item is added, updated, or removed.</param>
            <example>
            Lets consider we created an ItemCallback.
            <code>
            ItemCallback(string key, CacheEventArg e)
            {
               ...
            }
            </code>
            Unregister your notification callback.
            <code>
            cQ.RegisterNotification(new QueryDataNotificationCallback(ItemCallback),EventType.ItemAdded);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ContinuousQuery.Equals(System.Object)">
            <summary>
            Compares two instances of ContinuousQuery for equality.
            </summary>
            <param name="obj">An instance of ContinuousQuery.</param>
            <returns> True, if both ContinuousQuery instances are the same. Otherwise false. </returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.ContinuousQuery.GetHashCode">
            <summary>
            Computes the hash code for the current object.
            </summary>
            <returns> Hash code for the current object. </returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.ContinuousQueryClearCallback">
            <summary>
            Defines a callback method for notifying application when Continuous Query result set is cleared.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.ContinuousQueryItemAddedCallback">
            <summary>
            Defines a callback method for notifying application when item is added to the Continuous Query result.
            </summary>
            <param name="key">A key added in the result
            </param>
            <remarks></remarks>
        </member>
        <member name="T:Alachisoft.NCache.Client.ContinuousQueryItemRemovedCallback">
            <summary>
            Defines a callback method for notifying application when item is removed from the Continuous Query result.
            </summary>
            <param name="key">A key removed from the result
            </param>
            <remarks></remarks>
        </member>
        <member name="T:Alachisoft.NCache.Client.ContinuousQueryItemUpdatedCallback">
            <summary>
            Defines a callback method for notifying application when item is updated in the Continuous Query result.
            </summary>
            <param name="key">A key updated in the result
            </param>
            <remarks></remarks>
        </member>
        <member name="M:Alachisoft.NCache.Client.ContinuousQueryManager.OnCQEventMessageReceived(System.Object,Alachisoft.NCache.Runtime.Caching.MessageEventArgs)">
            <summary>
            Handles what to do when a CQ event message is received
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:Alachisoft.NCache.Client.CustomEventCallback">
             <summary>
             Defines a callback method for custom application defined events.
             </summary>
             <remarks>Doing a lot of processing inside the handler might have an impact on the performance 
             of the cache and cluster. It is therefore advisable to do minimal processing inside the handler.
             </remarks>
             <example>The following example demonstrates how to use the <see cref="T:Alachisoft.NCache.Client.CustomEventCallback"/> 
             class to notify a consumer application when a producer raises an event using
             <see cref="!:Cache.RaiseCustomEvent"/>. You could include this 
             code in a code declaration block in the Web Forms page, or in a page code-behind file.
             <code>
             
            	public void OnApplicationEvent(object notifId, object data)
            	{
            		// ...
            	}
            
            	protected void Application_Start(object sender, EventArgs e)
            	{
            		try
            		{
            			NCache.InitializeCache("myPartitionedCache");
            			NCache.Cache.CustomEvent += new CustomEventCallback(this.OnApplicationEvent);
            		}
            		catch(Exception e)
            		{
            		}
            	}
            	
             </code>
             </example>
             <requirements>
             <constraint>This member is not available in SessionState edition.</constraint> 
             </requirements>
        </member>
        <member name="F:Alachisoft.NCache.Client.DisconnectedClientCache._nearCache">
            <summary>level 1 cache</summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.DisconnectedClientCache._farCache">
            <summary>level 2 cache</summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.ICacheReader">
            <summary>
            Reads one or more than forward-only stream of result sets by executing OQ commands on the cache source. 
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.ICacheReader.FieldCount">
            <summary>
            Gets number of columns.
            </summary>
            <returns>
            Number of columns.
            </returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICacheReader.Close">
            <summary>
            It closes IDataReader.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.ICacheReader.IsClosed">
            <summary>
            True, if reader is closed, else false. 
            </summary>
            <returns>
            Specifies a boolean value, either true or false.
            </returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICacheReader.Read">
            <summary>
            Advances ICacheReader to the next record.
            </summary>
            <returns>True, if there are more rows; else false. </returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICacheReader.GetBoolean(System.Int32)">
            <summary>
            Gets value of a specified index as bool.
            </summary>
            <param name="index">Index of a column.</param>
            <returns>Bool value on a specified index.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICacheReader.GetString(System.Int32)">
            <summary>
            Gets value of specified index as string.
            </summary>
            <param name="index">Index of a column.</param>
            <returns>String value on a specified column.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICacheReader.GetDecimal(System.Int32)">
            <summary>
            Gets value of a specified index as decimal.
            </summary>
            <param name="index">Index of a column.</param>
            <returns>Decimal value on a specified index.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICacheReader.GetDouble(System.Int32)">
            <summary>
            Gets value of specified index as double.
            </summary>
            <param name="index">Index of a column.</param>
            <returns>Double value on a specified index.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICacheReader.GetInt16(System.Int32)">
            <summary>
            Gets value of a specified index as 16 bit integer.
            </summary>
            <param name="index">Index of a column.</param>
            <returns>Int16 value on a specified index.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICacheReader.GetInt32(System.Int32)">
            <summary>
            Gets value of a specified index as 32 bit integer.
            </summary>
            <param name="index">Index of a column.</param>
            <returns>Int32 value on a specified index.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICacheReader.GetInt64(System.Int32)">
            <summary>
            Gets value of specified index as 64 bit integer.
            </summary>
            <param name="index">Index of a column.</param>
            <returns>Int64 value on a specified index.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICacheReader.GetValue``1(System.Int32)">
            <summary>
            Gets value at specified column index.
            </summary>
            <param name="index">Index of a column.</param>
            <returns>Object value on a specified index.</returns>
            <typeparam name="T">
            Object value on a specified index.
            </typeparam> 
        </member>
        <member name="M:Alachisoft.NCache.Client.ICacheReader.GetValue``1(System.String)">
            <summary>
            Gets value of specified column name.
            </summary>
            <param name="columnName">Name of a column.</param>
            <returns>Object value of a specified column.</returns>
            <typeparam name="T">
            Object value of a specified column.
            </typeparam>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICacheReader.GetValues(System.Object[])">
            <summary>
            Populates array of objects with values in current row.
            </summary>
            <param name="objects">Array of objects to be populated.</param>
            <returns>Number of objects copied in a specified array.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICacheReader.GetName(System.Int32)">
            <summary>
            Returns name of a specified column index.
            </summary>
            <param name="index">Index of a column.</param>
            <returns>Name of column.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICacheReader.GetOrdinal(System.String)">
            <summary>
            Returns index of a specified column name.
            </summary>
            <param name="columnName">Name of a column.</param>
            <returns>Index of a column.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.ICacheReader.GetDateTime(System.Int32)">
            <summary>
            Returns DateTime at specified column index.
            </summary>
            <param name="index">Index of Column.</param>
            <returns>DateTime value at specified index.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.IClientRecordSetEnumerator.Current">
            <summary>
            Gets the current KeyValue Pair in the RecordSet.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.IClientRecordSetEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next <see cref="!:Alachisoft.NCache.Common.DataStructures.RecordRow"/> in the RecordSet.
            </summary>
            <returns> true if the enumerator was successfully advanced to the next RecordRow; false 
            if the enumerator has passed the end of the RecordSet.</returns>
        </member>
        <member name="F:Alachisoft.NCache.Client.InprocCache._nCache">
            <summary> Underlying implementation of NCache. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.InprocCache._refCount">
            <summary> Reference count of the cache. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.InprocCache._entry">
            <summary> </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.InprocCache._serializationContext">
            <summary>Serialization context (actually name of the cache.)used for Compact Framework </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.InprocCache._listener">
            <summary> Cache event listener object. Implements all events.</summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.InprocCache._callbackIDsMap">
            <summary> Contains callback ids and associated callbacks</summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.InprocCache._rcbInitialVal">
            <summary> Initial values for CustomRemovedCallback and CustomUpdateCallback ids. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.InprocCache.NoAbsoluteExpiration">
            <summary>
            Used in the <paramref name="absoluteExpiration"/> parameter in an Insert method call to 
            indicate the item should never expire. This field is read-only.
            </summary>
            <remarks>When used, this field sets the <paramref name="absoluteExpiration"/> parameter equal 
            to <see cref="F:System.DateTime.MaxValue"/>, which is a constant representing the largest possible 
            <see cref="T:System.DateTime"/> value, 12/31/9999 11:59:59 PM.</remarks>
            <example>The following example demonstrates how to use the <see cref="F:Alachisoft.NCache.Client.InprocCache.NoAbsoluteExpiration"/> field to disable 
            absolute expirations when inserting an item in the <see cref="T:Alachisoft.NCache.Client.Cache"/>.
            <code>
            
            NCache.Cache.Insert("DSN", connectionString, null, Cache.NoAbsoluteExpiration, TimeSpan.FromSeconds(10));
            
            </code>
            </example>
        </member>
        <member name="F:Alachisoft.NCache.Client.InprocCache.NoSlidingExpiration">
            <summary>
            Used as the <paramref name="slidingExpiration"/> parameter in an Insert method call 
            to disable sliding expirations. This field is read-only.
            </summary>
            <remarks>When used, this field sets the <paramref name="slidingExpiration"/> parameter equal to the <see cref="F:System.TimeSpan.Zero"/>
            field, which has a constant value of zero. The cached item then expires 
            in accordance with the <paramref name="absoluteExpiration"/> parameter.</remarks>
            <example>The following example demonstrates how to use the Insert method to add an item to the 
            <see cref="T:Alachisoft.NCache.Client.Cache"/> object using the <see cref="F:Alachisoft.NCache.Client.InprocCache.NoSlidingExpiration"/> field.
            <code>
            
            NCache.Cache.Insert("DSN", connectionString, null, DateTime.Now.AddMinutes(2), Cache.NoSlidingExpiration);
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.#ctor(Alachisoft.NCache.Caching.Cache,Alachisoft.NCache.Management.CacheConfig,Alachisoft.NCache.Client.StoreBase,System.String,System.String)">
            <summary>
            Initializes a new instance of the Cache class.
            </summary>
            <param name="objectCache"></param>
            <param name="config"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.Finalize">
            <summary>
            Finalizer for this object.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.DisposeInternal(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or 
            resetting unmanaged resources.
            </summary>
            <param name="disposing"></param>
            <remarks>The behavior of this method depends upon the cache's sharing mode (inproc/outproc) 
            specified in the configuration.
            <para>If the application uses the cache in <b>inproc</b> mode, calling Dispose closes the cache 
            and releases the resources used by it. If in a cluster the calling node leaves the 
            cluster as well. 
            </para>
            <para>If the application uses the cache in <b>outproc</b> mode, calling Dispose releases the 
            reference to the cache object. The cache itself remains operational and cluster remains intact. 
            </para>
            </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.Dispose(System.Boolean)">
            <summary>
            Decerements the reference count of the cache and performs application-defined tasks 
            associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            The behavior of this method depends upon the cache's sharing mode (inproc/outproc) 
            specified in the configuration.
            <para>If the application uses the cache in <b>inproc</b> mode, calling Dispose closes the cache 
            and releases the resources used by it. If in a cluster the calling node leaves the 
            cluster as well. 
            </para>
            <para>If the application uses the cache in <b>outproc</b> mode, calling Dispose releases the 
            reference to the cache object. The cache itself remains operational and cluster remains intact. 
            </para>
            </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.Lock(System.String,System.TimeSpan,Alachisoft.NCache.Client.LockHandle@)">
            <summary>
            Acquire a lock on an item in cache.
            </summary>
            <param name="key">key of cached item to be locked.</param>
            <param name="lockTimeout">TimeSpan after which the lock is automatically released.</param>
            <param name="lockHandle">An instance of <see cref="!:Lockhandle"/> that will be filled in with the lock information if lock is acquired successfully.</param>
            <returns>Whether or not lock was acquired successfully.</returns>
            <example>
            Following example demonstrates how to lock a cached item.
            <code>
            ...
            LockHandle lockHandle = new LockHandle();
            bool locked = theCache.lock("cachedItemKey", new TimeSpan(0,0,10), out lockHandle);
            ...
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.Unlock(System.String)">
            <summary>
            Forcefully unlocks a locked cached item.
            </summary>
            <param name="key">key of a cached item to be unlocked</param>
            <example>
            Following example demonstrates how to unlock a cached item.
            <code>
            ...
            theCache.Unlock("cachedItemKey");
            ...
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.Unlock(System.String,System.Object)">
            <summary>
            Unlocks a locked cached item if the correct lock-id is specified.
            </summary>
            <param name="key">key of a cached item to be unlocked</param>
            <param name="lockHandle">An instance of <see cref="T:Alachisoft.NCache.Client.LockHandle"/> that was generated when lock was acquired.</param>
            <example>
            Following example demonstrates how to unlock a cached item.
            <code>
            ...
            theCache.Unlock("cachedItemKey", lockHandle);
            ...
            </code>
            </example>
        </member>
        <member name="P:Alachisoft.NCache.Client.InprocCache.Count">
            <summary>
            Gets the number of items stored in the cache.
            </summary>
            <remarks>This property can be useful when monitoring your application's performance 
            or when using ASP.NET tracing functionality.
            <para><b>Note:</b> In a partitioned cluster this operation is an expensive one as it might 
            result in network calls. It is therefore advised to use this property only when required.
            </para>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception in case of failure.</para>
            </remarks>
            <value>The number of items stored in the cache.</value>
        </member>
        <member name="P:Alachisoft.NCache.Client.InprocCache.Name">
            <summary>
            Gets the name of the cache.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.Clear(Alachisoft.NCache.Common.BitSet,System.Int16,System.String)">
            <summary>
            Removes all elements from the <see cref="T:Alachisoft.NCache.Client.Cache"/>.
            </summary>
            <remarks>In most of the cases this method's implementation is close to O(1).
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception in case of failure.</para>
            </remarks>
            <example>The following example demonstrates how to check for containment of an item in the <see cref="T:Alachisoft.NCache.Client.Cache"/>.
            <code>
            
            NCache.Cache.Clear();
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
            <code>
            
            Cache.Clear();
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.ClearAsync(Alachisoft.NCache.Common.BitSet,System.Int16,System.String)">
            <summary>
            Removes all elements from the <see cref="T:Alachisoft.NCache.Client.Cache"/> asynchronously.
            </summary>
            <remarks>
            This is similar to <see cref="M:Alachisoft.NCache.Client.InprocCache.Clear(Alachisoft.NCache.Common.BitSet,System.Int16,System.String)"/> except that the operation is performed asynchronously.
            A <see cref="!:CacheCleared"/> event is fired upon successful completion of this method.It is not 
            possible to determine if the actual operation has failed, therefore 
            use this operation for the cases when it does not matter much.
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception in case of failure.</para>
            </remarks>
            <example>The following example demonstrates how to clear the <see cref="T:Alachisoft.NCache.Client.Cache"/>.
            <code>
            
            NCache.Cache.ClearAsync();
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
            <code>
            
            Cache.ClearAsync();
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.ClearAsync(Alachisoft.NCache.Common.BitSet,System.Int16,System.Int16,System.String)">
            <summary>
            Removes all elements from the <see cref="T:Alachisoft.NCache.Client.Cache"/> asynchronously.
            </summary>
            <remarks>
            This is similar to <see cref="M:Alachisoft.NCache.Client.InprocCache.Clear(Alachisoft.NCache.Common.BitSet,System.Int16,System.String)"/> except that the operation is performed asynchronously.
            A <see cref="!:CacheCleared"/> event is fired upon successful completion of this method.It is not 
            possible to determine if the actual operation has failed, therefore 
            use this operation for the cases when it does not matter much.
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception in case of failure.</para>
            <param name="onAsyncCacheClearedCallback">A delegate that, that can be used to get the result of 
            the Asynchronous Clear operation.</param>
            </remarks>
            <example>The following example demonstrates how to clear the <see cref="T:Alachisoft.NCache.Client.Cache"/>.
            <code>
            
            void OnAsyncCacheCleared(object result)
            {
            ...
            }
            
            NCache.Cache.ClearAsync(new AsyncCacheClearedCallback(OnAsyncCacheCleared));
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
            <code>
            
            Cache.ClearAsync(new AsyncCacheClearedCallback(OnAsyncCacheCleared));
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.Contains(System.String)">
            <summary>
            Determines whether the cache contains a specific key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Alachisoft.NCache.Client.Cache"/>.</param>
            <returns><b>true</b> if the <see cref="T:Alachisoft.NCache.Client.Cache"/> contains an element 
            with the specified key; otherwise, <b>false</b>.</returns>
            <remarks>In most of the cases this method's implementation is close to O(1).
            <para><b>Note:</b> In a partitioned cluster this operation is an expensive one as it might 
            result in network calls. It is therefore advised to use this property only when required.
            </para>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception in case of failure.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is not serializable.</exception>
            <example>The following example demonstrates how to check for containment of an item in the <see cref="T:Alachisoft.NCache.Client.Cache"/>.
            <code>
            
            if(NCache.Cache.Contains("MyTextBox.Value"))
            {
            	Response.Write("Item found!");
            }
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
            <code>
            
            if(Cache.Contains("MyTextBox.Value"))
            {
            	Response.Write("Item found!");
            }
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.RaiseCustomEvent(System.Object,System.Object)">
            <summary>
            Broadcasts a custom application defined event.
            </summary>
            <param name="notifId">Application specific notification code/id</param>
            <param name="data">Application specific data</param>
            <remarks>In most of the cases this method's implementation is close to O(1).
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception in case of failure.</para>
            <para><b>Note:</b> Custom event notifications can not be disabled through configuration.</para>
            </remarks>
            <example>The following example demonstrates how to raise a custom application defined event.
            <code>
            
            NCache.Cache.RaiseCustomEvent(MyNotificationCodes.ConsumeItem,
                  new ItemData(DateTime.Now));
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
            <code>
            
            Cache.RaiseCustomEvent(MyNotificationCodes.ConsumeItem,
                  new ItemData(DateTime.Now)); 
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.ValidateKeyValue(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.MakeCompactEntry(System.String,System.Object,Alachisoft.NCache.Caching.AutoExpiration.ExpirationHint,Alachisoft.NCache.Client.CacheSyncDependency,System.DateTime,System.TimeSpan,Alachisoft.NCache.Runtime.CacheItemPriority,System.Int16,System.Int16,System.Int16,System.Int16,System.Boolean,System.String,System.String,System.Collections.Hashtable,Alachisoft.NCache.Common.BitSet,System.Object,System.UInt64,Alachisoft.NCache.Common.Locking.LockAccessType,System.String,System.String,System.String,Alachisoft.NCache.Runtime.Events.EventDataFilter,Alachisoft.NCache.Runtime.Events.EventDataFilter,System.String,System.String)">
            <summary>
            Create a CompactEntry object
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="dependency"></param>
            <param name="absoluteExpiration"></param>
            <param name="slidingExpiration"></param>
            <param name="priority"></param>
            <param name="onRemoveCallback"></param>
            <param name="isResyncExpiredItems"></param>
            <param name="group"></param>
            <param name="subGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.AddDependency(System.String,Alachisoft.NCache.Runtime.Dependencies.CacheDependency,System.Boolean)">
            <summary>
            Add dependency to the cache item.
            </summary>
            <param name="key">key used to reference the required object</param>
            <param name="dependency">CacheDependency to be added</param>
            <param name="isResyncRequired">Boolean value indicating whether Resync is required or not</param>
            <returns>True if operations succeeded else false</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.Add(System.String,System.Object,Alachisoft.NCache.Runtime.Dependencies.CacheDependency,Alachisoft.NCache.Client.CacheSyncDependency,System.DateTime,System.TimeSpan,Alachisoft.NCache.Runtime.CacheItemPriority,System.Int16,System.Int16,System.Int16,System.Boolean,System.String,System.String,System.Collections.Hashtable,Alachisoft.NCache.Common.BitSet,System.String,System.String,Alachisoft.NCache.Runtime.Events.EventDataFilter,Alachisoft.NCache.Runtime.Events.EventDataFilter,System.Int64,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Function that choose the appropriate function of NCache's Cache, that need to be called
            according to the data provided to it.</summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.Add(System.String[],Alachisoft.NCache.Client.CacheItem[],System.Int16,System.String,System.Int64[],System.Boolean,System.String,System.Int16,System.Int16,Alachisoft.NCache.Runtime.Events.EventDataFilter,Alachisoft.NCache.Runtime.Events.EventDataFilter,System.Boolean,System.Collections.IDictionary@,Alachisoft.NCache.Runtime.Events.CallbackType,System.String)">
             <summary>
             Add array of <see cref="T:Alachisoft.NCache.Client.CacheItem"/> to the cache.
             </summary>
             <param name="keys">The cache keys used to reference the items.</param>
             <param name="items">The items that are to be stored</param>
             <param name="group">The data group of the item</param>
             <param name="subGroup">Sub group of the group</param>
             <returns>keys that are added or that already exists in the cache and their status.</returns>
             <remarks> If CacheItem contains invalid values the related exception is thrown. 
             See <see cref="T:Alachisoft.NCache.Client.CacheItem"/> for invalid property values and related exceptions</remarks>		
             <example>The following example demonstrates how to add items to the cache with an absolute 
             expiration 2 minutes from now, a priority of 
             high, and that notifies the application when the item is removed from the cache.
             
             First create a CacheItems.
             <code>
             string keys = {"ORD_23", "ORD_67"};
             CacheItem items = new CacheItem[2]
             items[0] = new CacheItem(new Order());
             items[0].AbsoluteExpiration = DateTime.Now.AddMinutes(2);
             items[0].Priority = CacheItemPriority.High;
             items[0].ItemRemoveCallback = onRemove;
            
             items[1] = new CacheItem(new Order());
             items[1].AbsoluteExpiration = DateTime.Now.AddMinutes(2);
             items[1].Priority = CacheItemPriority.Low;
             items[1].ItemRemoveCallback = onRemove;
             </code>
             
             Then add CacheItem to the cache
             <code>
             
            	NCache.Cache.Add(keys, items, "Customer", "Orders");
            
             </code>
             Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
             <code>
             
            	Cache.Add(keys, items, "Customer", "Orders");
             
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.Get``1(System.String,Alachisoft.NCache.Common.BitSet,System.String,System.String,Alachisoft.NCache.Client.CacheItemVersion@,Alachisoft.NCache.Client.LockHandle@,System.TimeSpan,Alachisoft.NCache.Common.Locking.LockAccessType,Alachisoft.NCache.Runtime.Caching.ReadThruOptions)">
            <summary>
            Retrieves the specified item from the Cache object. If the object is read thru the data source,
            put is against the given group and sub group.
            </summary>
            <param name="key">The identifier for the cache item to retrieve.</param>
            <param name="group">Group of the object.</param>
            <param name="subGroup">Sub group of the group.</param>
            <returns>The retrieved cache item, or a null reference (Nothing 
            in Visual Basic) if the key is not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is not serializable.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="group"/>  contains a null reference (Nothing in Visual Basic).</exception>
            <remarks>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception in case of failure.</para>
            <para>
            Note: The group and subGroup parameters are used only if the object is read thru the data source. 
            Otherwise the object will be returned from the cache whether it belongs to the given group and sub group or not.
            </para>
            </remarks>
            <example>The following example demonstrates how to retrieve the value cached for an ASP.NET text 
            box server control.
            <code>
            
            NCache.Cache.Get("MyTextBox.Value", "Customer", null);
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
            <code>
            
            Cache.Get("MyTextBox.Value", "Customer", null);
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.GetGroupKeys(System.String,System.String)">
            <summary>
            Retrieves the keys of items in a group or sub group.
            </summary>
            <param name="group">The group whose keys are to be returned.</param>
            <param name="subGroup">The sub group of the group foe which keys are to be returned.</param>
            <returns>The list of keys of a group or a sub group.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="group"/> contains a null reference (Nothing in Visual Basic).</exception>
            <remarks>
            <para>
            If only group is specified, keys for the group and all the sub groups of the group are returned.
            If both the group and sub group are specified. Only the keys related to the sub group are returned.
            </para>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception in case of failure.</para>
            </remarks>
            <example>The following example demonstrates how to retrieve the value cached for an ASP.NET text 
            box server control.
            <code>
            
            ArrayList list = NCache.Cache.Get("Customer", "Orders");
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
            <code>
            
            ArrayList list = Cache.Get("Customer", "Orders");
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.GetGroupData``1(System.String,System.String)">
            <summary>
            Retrieves the key and value pairs in a group or sub group.
            </summary>
            <param name="group">The group whose data is to be returned.</param>
            <param name="subGroup">The sub group of the group for which data is to be returned.</param>
            <returns>The list of key and value pairs of a group or a sub group.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="group"/> contains a null reference (Nothing in Visual Basic).</exception>
            <remarks>
            <para>
            If only group is specified, data for the group and all the sub groups of the group are returned.
            If both the group and sub group are specified. Only the data related to the sub group are returned.
            </para>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception in case of failure.</para>
            </remarks>
            <example>The following example demonstrates how to retrieve the value cached for an ASP.NET text 
            box server control.
            <code>
            
            Hashtable table = NCache.Cache.Get("Customer", "Orders");
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
            <code>
            
            Hashtable table = Cache.Get("Customer", "Orders");
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.Get``1(System.String[],Alachisoft.NCache.Common.BitSet,Alachisoft.NCache.Runtime.Caching.ReadThruOptions)">
            <summary>
            Retrieves the object from the cache for the given keys as key value pairs
            </summary>
            <param name="keys">The keys against which items are to be fetched.</param>
            <returns>The retrieved cache items.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keys"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keys"/> is not serializable.</exception>
            <remarks>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception in case of failure.</para>
            </remarks>
            <example>The following example demonstrates how to retrieve the value cached for an ASP.NET text 
            box server control.
            <code>
            
            NCache.Cache.Get(keys);
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
            <code>
            
            Cache.Get(keys);
            
            </code> 
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.Insert(System.String,System.Object,Alachisoft.NCache.Runtime.Dependencies.CacheDependency,Alachisoft.NCache.Client.CacheSyncDependency,System.DateTime,System.TimeSpan,Alachisoft.NCache.Runtime.CacheItemPriority,System.Int16,System.Int16,System.Int16,System.Boolean,System.String,System.String,System.Collections.Hashtable,Alachisoft.NCache.Common.BitSet,System.Object,Alachisoft.NCache.Client.CacheItemVersion,Alachisoft.NCache.Common.Locking.LockAccessType,System.String,System.String,Alachisoft.NCache.Runtime.Events.EventDataFilter,Alachisoft.NCache.Runtime.Events.EventDataFilter,System.Int64,System.Boolean,System.String,System.String,Alachisoft.NCache.Runtime.Events.CallbackType,System.String)">
            <summary>
            Function that choose the appropriate function of NCache's Cache, that need to be called
            according to the data provided to it.</summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.Insert(System.String[],Alachisoft.NCache.Client.CacheItem[],System.Int16,System.String,System.Int64[],System.Boolean,System.String,System.Int16,System.Int16,Alachisoft.NCache.Runtime.Events.EventDataFilter,Alachisoft.NCache.Runtime.Events.EventDataFilter,System.Boolean,System.Collections.IDictionary@,Alachisoft.NCache.Runtime.Events.CallbackType,System.String)">
             <summary> Insert list of <see cref="T:Alachisoft.NCache.Client.CacheItem"/> to the cache </summary>
             <param name="keys">The cache keys used to reference the items.</param>
             <param name="items">The items that are to be stored</param>
             <param name="group">The group with which this object is associated</param>
             <param name="subGroup">The subGroup of the group</param>
             <returns>returns keys that are added or updated successfully and their status.</returns>
             <remarks> If CacheItem contains invalid values the related exception is thrown. 
             See <see cref="T:Alachisoft.NCache.Client.CacheItem"/> for invalid property values and related exceptions</remarks>
             <example>The following example demonstrates how to assign an item high priority when you insert 
             it into your application's <see cref="T:Alachisoft.NCache.Client.Cache"/> object.
            	<para><b>Note: </b>For more information about how to use this method with the <see cref="T:Alachisoft.NCache.Client.CacheItemRemovedCallback"/> 
            	delegate, see <see cref="T:Alachisoft.NCache.Client.CacheItemRemovedCallback"/>.
            	</para>
             First create CacheItems.
             <code>
             string[] keys = {"SQLDSN", "ORADSN"};
             CacheItem items[] = new CacheItem[2];
             items[0] = new CacheItem(sqlConnectionString);
             item.AbsoluteExpiration = DateTime.Now.AddMinutes(2);
             item.SlidingExpiration = TimeSpan.Zero;
             item.Priority = CacheItemPriority.High;
             item.ItemRemoveCallback = onRemove;
             
             items[1] = new CacheItem(oraConnectionString);
             item.AbsoluteExpiration = DateTime.Now.AddMinutes(1);
             item.SlidingExpiration = TimeSpan.Zero;
             item.Priority = CacheItemPriority.Low;
             item.ItemRemoveCallback = onRemove;
             </code>
             
             Then insert CacheItems to the cache
             <code>
            
            	NCache.Cache.Insert(keys, items, "Connection", null);
             
             </code>
             Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
             <code>
             
            	Cache.Insert(keys, items, "Connection", null);
             
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.Remove``1(System.String,Alachisoft.NCache.Common.BitSet,System.Int16,System.Object,Alachisoft.NCache.Client.CacheItemVersion,Alachisoft.NCache.Common.Locking.LockAccessType,System.String,System.String)">
            <summary>
            Removes the object from the <see cref="T:Alachisoft.NCache.Client.Cache"/>.
            </summary>
            <param name="key">The cache key used to reference the item.</param>
            <returns>The item removed from the Cache. If the value in the key parameter 
            is not found, returns a null reference (Nothing in Visual Basic).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is not serializable.</exception>
            <remarks>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception in case of failure.</para>
            </remarks>
            <example>The following example demonstrates how you can remove an item from your application's 
            <see cref="T:Alachisoft.NCache.Client.Cache"/> object.
            <code>
            
            NCache.Cache.Remove("timestamp");
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
            <code>
            
            Cache.Remove("timestamp");
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.Delete(System.String,Alachisoft.NCache.Common.BitSet,System.Int16,System.Object,Alachisoft.NCache.Client.CacheItemVersion,Alachisoft.NCache.Common.Locking.LockAccessType,System.String,System.String)">
            <summary>
            Removes the object from the <see cref="T:Alachisoft.NCache.Client.Cache"/>.
            </summary>
            <param name="key">The cache key used to reference the item.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is not serializable.</exception>
            <remarks>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception in case of failure.</para>
            </remarks>
            <example>The following example demonstrates how you can remove an item from your application's 
            <see cref="T:Alachisoft.NCache.Client.Cache"/> object.
            <code>
            
            NCache.Cache.Remove("timestamp");
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
            <code>
            
            Cache.Remove("timestamp");
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.Remove``1(System.String[],Alachisoft.NCache.Common.BitSet,System.String,System.Int16,System.String)">
            <summary>
            Removes the objects from the <see cref="T:Alachisoft.NCache.Client.Cache"/>.
            </summary>
            <param name="keys">The cache keys used to reference the item.</param>
            <returns>The items removed from the Cache. If the value in the keys parameter 
            is not found, returns a null reference (Nothing in Visual Basic).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keys"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keys"/> is not serializable.</exception>
            <remarks>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception in case of failure.</para>
            </remarks>
            <example>The following example demonstrates how you can remove an item from your application's 
            <see cref="T:Alachisoft.NCache.Client.Cache"/> object.
            <code>
            
            NCache.Cache.Remove(keys);
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
            <code>
            
            Cache.Remove(keys);
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.Remove(System.String,System.String,Alachisoft.NCache.Caching.WriteThruInfo)">
            <summary>
            Remove the group from cache.
            </summary>
            <param name="group">group to be removed.</param>
            <param name="subGroup">subGroup to be removed.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Client.InprocCache.Search(System.String,System.Collections.IDictionary)" -->
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Client.InprocCache.SearchEntries(System.String,System.Collections.IDictionary)" -->
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Client.InprocCache.ExecuteNonQuery(System.String,System.Collections.IDictionary,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Exception}@,Alachisoft.NCache.Caching.WriteThruInfo,System.Int32)" -->
        <member name="M:Alachisoft.NCache.Client.InprocCache.GetEnumerator">
            <summary>
            Retrieves a dictionary enumerator used to iterate
            through the key settings and their values 
            contained in the cache.
            </summary>
            <remarks>
            If items are added or removed from the cache while enumerating through the items
            the behavior is not predictable. It is therefore advised not to update the cache keys
            while enumerating.
            <para><b>Note:</b> Just like <see cref="P:Alachisoft.NCache.Client.Cache.Count"/> in a cluster especially partitioned 
            this operation is an expensive one and may require network calls. It is therefore advised to use 
            this method only when required.
            </para>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception in case of failure.</para>
            </remarks>
            <returns>An enumerator to iterate through the <see cref="T:Alachisoft.NCache.Client.Cache"/> object.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.RegisterKeyNotificationCallback(System.String,System.Int16,System.Int16,System.Boolean)">
            <summary>
            Registers the CacheItemUpdatedCallback and/or CacheItemRemovedCallback for the specified key.
            </summary>
            <remarks>
            <see cref="T:Alachisoft.NCache.Client.CacheItemUpdatedCallback"/> and/or <see cref="T:Alachisoft.NCache.Client.CacheItemRemovedCallback"/> provided
            this way are very useful because a client application can show interest in any item already present
            in the cache. As soon as the item is updated or removed from the cache, the client application is notified
            and actions can be taken accordingly.
            </remarks>
            <param name="key">The cache key used to reference the cache item.</param>
            <param name="updateCallback">The CacheItemUpdatedCallback that is invoked if the item
            with the specified key is updated in the cache.</param>
            <param name="removeCallback">The CacheItemRemovedCallback is invoked when the item with
            the specified key is removed from the cache.</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.UnRegisterKeyNotificationCallback(System.String,System.Int16,System.Int16)">
            <summary>
            Unregisters the <see cref="T:Alachisoft.NCache.Client.CacheItemUpdatedCallback"/> and/or <see cref="T:Alachisoft.NCache.Client.CacheItemRemovedCallback"/> already registered
            for the specified key.
            </summary>
            <param name="key">The cache key used to reference the cache item.</param>
            <param name="updateCallback">CacheItemUpdatedCallback that is invoked when the item 
            with the specified key is updated in the cache.</param>
            <param name="removeCallback">CacheItemRemovedCallback that is invoked when the item
            with the key is removed from the cache.</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.RegisterKeyNotificationCallback(System.String[],System.Int16,System.Int16,System.String,Alachisoft.NCache.Runtime.Events.CallbackType)">
            <summary>
            Registers the CacheItemUpdatedCallback and/or CacheItemRemovedCallback for the list of specified keys.
            </summary>
            <remarks>
            <see cref="T:Alachisoft.NCache.Client.CacheItemUpdatedCallback"/> and/or <see cref="T:Alachisoft.NCache.Client.CacheItemRemovedCallback"/> provided
            this way are very useful because a client application can show interest in any item already present
            in the cache. As soon as the item is updated or removed from the cache, the client application is notified
            and actions can be taken accordingly.
            </remarks>
            <param name="keys">The list of the cache keys used to reference the cache items.</param>
            <param name="updateCallback">The CacheItemUpdatedCallback that is invoked if the item
            with the specified key is updated in the cache.</param>
            <param name="removeCallback">The CacheItemRemovedCallback is invoked when the item with
            the specified key is removed from the cache.</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.UnRegisterKeyNotificationCallback(System.String[],System.Int16,System.Int16)">
            <summary>
            Unregisters the <see cref="T:Alachisoft.NCache.Client.CacheItemUpdatedCallback"/> and/or <see cref="T:Alachisoft.NCache.Client.CacheItemRemovedCallback"/> already registered
            for the specified list of keys.
            </summary>
            <param name="keys">The cache key used to reference the cache item.</param>
            <param name="updateCallback">CacheItemUpdatedCallback that is invoked when the item 
            with the specified key is updated in the cache.</param>
            <param name="removeCallback">CacheItemRemovedCallback that is invoked when the item
            with the key is removed from the cache.</param>
        </member>
        <member name="T:Alachisoft.NCache.Client.InprocCache.ClusterEventsListener">
            <summary>
            Providers hanlders for <see cref="T:Alachisoft.NCache.Caching.Cache"/> events. This is an 
            internal class and must not be used from outside
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.InprocCache.ClusterEventsListener._listener">
            <summary> Underlying implementation of NCache. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.InprocCache.ClusterEventsListener._nCache">
            <summary> Underlying implementation of NCache. </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.ClusterEventsListener.#ctor(Alachisoft.NCache.Client.Cache.ClusterEventsListener,Alachisoft.NCache.Caching.Cache)">
            <summary>
            Constructor.
            </summary>
            <param name="parent"></param>
            <param name="nCache"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.ClusterEventsListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or 
            resetting unmanaged resources.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:Alachisoft.NCache.Client.InprocCache.CacheAsyncEventsListener._parent">
            <summary> Underlying implementation of NCache. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.InprocCache.CacheAsyncEventsListener._nCache">
            <summary> Underlying implementation of NCache. </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.CacheAsyncEventsListener.#ctor(Alachisoft.NCache.Client.Cache.CacheAsyncEventsListener,Alachisoft.NCache.Caching.Cache)">
            <summary>
            Constructor.
            </summary>
            <param name="parent"></param>
            <param name="nCache"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.CacheAsyncEventsListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or 
            resetting unmanaged resources.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Alachisoft.NCache.Client.InprocCache.CacheEventsListener">
            <summary>
            Providers hanlders for <see cref="T:Alachisoft.NCache.Caching.Cache"/> events. This is an 
            internal class and must not be used from outside
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.InprocCache.CacheEventsListener._listener">
            <summary> Underlying implementation of NCache. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.InprocCache.CacheEventsListener._nCache">
            <summary> Underlying implementation of NCache. </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.CacheEventsListener.#ctor(Alachisoft.NCache.Client.Cache.CacheEventsListener,Alachisoft.NCache.Caching.Cache)">
            <summary>
            Constructor.
            </summary>
            <param name="parent"></param>
            <param name="nCache"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.InprocCache.CacheEventsListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or 
            resetting unmanaged resources.
            </summary>
            <remarks>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Client.InprocCache.ExecuteReader(System.String,System.Collections.IDictionary,System.Boolean,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Client.InprocCache.DisposeReader(System.String,System.String)" -->
        <member name="M:Alachisoft.NCache.Client.InprocCache.PublishMessage(System.String,System.Collections.Generic.IList{Alachisoft.NCache.Client.Web.Messaging.Schema.MessageObject},Alachisoft.NCache.Common.BitSet)">
            <summary>
            This overload handles bulk publish calls
            </summary>
            <param name="topicName">name of topic at API</param>
            <param name="keyMessageBulk">keys and messages to publish</param>
            <param name="notifyDeliveryFailure">set true to get notification for undelivered messages</param>
        </member>
        <member name="T:Alachisoft.NCache.Client.LockHandle">
            <summary>
            An instance of this class is used to lock and unlock cache items in pessimistic concurrency model.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.LockHandle.#ctor">
            <summary>It is the constructor.</summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.LockHandle.#ctor(System.String,System.DateTime)">
            <summary>
            An overloaded constructor.
            </summary>
            <param name="lockId">The LockId of the specific LockHandle.</param>
            <param name="lockDate">The allocation date of the LockHandle.</param>
        </member>
        <member name="P:Alachisoft.NCache.Client.LockHandle.LockId">
            <summary>
            Gets and sets the LockId.
            </summary>
            <returns>
            It specifies the LockId.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.LockHandle.LockDate">
            <summary>
            Gets and sets the LockDate.
            </summary>
            <returns>
            It specifies the LockDate.
            </returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.MemberJoinedCallback">
             <summary>
             Defines a callback method for notifying applications when a new node joins the cluster.
             </summary>
             <param name="nodeInfo">The information of the newly joined member. It describes the member in terms of the IP Address
             and server port. The server port is required when a client wants to connect to this server node for using a cache in OutProc manner.</param>
             <remarks>This handler is invoked every time a new node joins the cluster.</remarks>
             <example>The following example demonstrates how to use the <see cref="T:Alachisoft.NCache.Client.MemberJoinedCallback"/> class to notify 
             an application when a new node joins the cluster.
             <code>
             
            	public void OnMemberJoined(NodeInfo nodeInfo)
            	{
            		// ...
            	}
            
            	protected void Application_Start(object sender, EventArgs e)
            	{
            		try
            		{
            			ICache cache = CacheManager.GetCache("demoClusteredCache");
            			cache.NotificationService.MemberJoined += new MemberJoinedCallback(this.OnMemberJoined);
            		}
            		catch(Exception ex)
            		{
            		}
            	}
            	
             </code>
             </example>
             <requirements>
             <constraint>This member is only available in Enterprise edition.</constraint> 
             </requirements>
        </member>
        <member name="T:Alachisoft.NCache.Client.MemberLeftCallback">
             <summary>
             Defines a callback method for notifying applications when a node leaves the cluster.
             </summary>
             <param name="nodeInfo">The information of the member that has left the cluster. It describes the member in terms of the IP Address
             and server port.</param>
             <remarks>This handler is invoked every time a node leaves the cluster.
             </remarks>
             <example>The following example demonstrates how to use the <see cref="T:Alachisoft.NCache.Client.MemberLeftCallback"/> class to notify 
             an application when a node leaves the cluster. You could include this 
             code in a code declaration block in the Web Forms page, or in a page code-behind file.
             <code>
             
            	public void OnMemberLeft(NodeInfo nodeInfo)
            	{
            		// ...
            	}
            
            	protected void Application_Start(object sender, EventArgs e)
            	{
            		try
            		{
            			ICache cache = CacheManager.GetCache("demoClusteredCache");
            			cache.NotificationService.MemberLeft += new MemberLeftCallback(this.OnMemberLeft);
            		}
            		catch(Exception ex)
            		{
            		}
            	}
            	
             </code>
             </example>
             <requirements>
             <constraint>This member is only available in Enterprise edition.</constraint> 
             </requirements>
        </member>
        <member name="T:Alachisoft.NCache.Client.PollNotificationCallback">
            <summary>
            Defines a callback for polling based notifications.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.QueryDataNotificationCallback">
            <summary>
            Defines a callback method for notifying application when an item is added, updated or removed from the Continuous Query result.
            </summary>
            <param name="key">Key removed, added, or updated.</param>
            <param name="arg">Information about Continuous Query Event arguments.</param>
        </member>
        <member name="T:Alachisoft.NCache.Client.RemoteCache">
            <summary>
            Implements the clustered cache for an application. This class cannot be inherited.
            </summary>
            <remarks>
            One instance of this class is created per application domain, and it remains 
            valid as long as the application domain remains active. This object is accessible through the 
            <see cref="!:CacheManager.Cache"/> property of the <see cref="T:Alachisoft.NCache.Client.CacheManager"/> object
            </remarks>
            <requirements>
            </requirements>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.EncryptionEnabled">
            <summary>
            Method to determine whether encryption is enabled or disabled
            </summary>
            <returns></returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.RemoteCache.CacheId">
            <summary>
            Get the name of this cache
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.RemoteCache.CompactTypes">
            <summary>
            Set the CompactTypes that are read from configuration
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.RemoteCache.Encryption">
            <summary>
            Set the Encryption information that are read from configuration 
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.RemoteCache.EventListener">
            <summary>
            Gets the event listener for the remote cache.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.RemoteCache.AsyncEventHandler">
            <summary>
            Gets the Asynchronous event listener for the remote cache.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.RemoteCache.NoAbsoluteExpiration">
            <summary>
            Used in the <paramref name="_absoluteExpiration"/> parameter in an Insert method call to 
            indicate the item should never expire. This field is read-only.
            </summary>
            <remarks>When used, this field sets the <paramref name="_absoluteExpiration"/> parameter equal 
            to <see cref="F:System.DateTime.MaxValue"/>, which is a constant representing the largest possible 
            <see cref="T:System.DateTime"/> value, 12/31/9999 11:59:59 PM.</remarks>
            <example>The following example demonstrates how to use the <see cref="F:Alachisoft.NCache.Client.RemoteCache.NoAbsoluteExpiration"/> field to disable 
            absolute expirations when inserting an item in the <see cref="N:Alachisoft.NCache.Client.Web"/>.
            <code>
            
            NCache.Web.Insert("DSN", connectionString, null, Web.NoAbsoluteExpiration, TimeSpan.FromSeconds(10));
            
            </code>
            </example>
        </member>
        <member name="F:Alachisoft.NCache.Client.RemoteCache.NoSlidingExpiration">
            <summary>
            Used as the <paramref name="_slidingExpiration"/> parameter in an Insert method call 
            to disable sliding expirations. This field is read-only.
            </summary>
            <remarks>When used, this field sets the <paramref name="_slidingExpiration"/> parameter equal to the <see cref="F:System.TimeSpan.Zero"/>
            field, which has a constant value of zero. The cached item then expires 
            in accordance with the <paramref name="_absoluteExpiration"/> parameter.</remarks>
            <example>The following example demonstrates how to use the Insert method to add an item to the 
            <see cref="N:Alachisoft.NCache.Client.Web"/> object using the <see cref="F:Alachisoft.NCache.Client.RemoteCache.NoSlidingExpiration"/> field.
            <code>
            
            NCache.Web.Insert("DSN", connectionString, null, DateTime.Now.AddMinutes(2), Web.NoSlidingExpiration);
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.RegisterAddEvent(Alachisoft.NCache.Client.Connection)">
            <summary>
            Will be called by broker incase of multiple connection
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.RegisterRemoveEvent(Alachisoft.NCache.Client.Connection)">
            <summary>
            Will be called by broker incase of multiple connection
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.RegisterUpdateEvent(Alachisoft.NCache.Client.Connection)">
            <summary>
            Will be called by broker incase of multiple connection
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.RegisterClearEvent(Alachisoft.NCache.Client.Connection)">
            <summary>
            Will be called by broker incase of multiple connection
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.RegisterCustomEvent(Alachisoft.NCache.Client.Connection)">
            <summary>
            Will be called by broker incase of multiple connection
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.RegisterNodeJoinedEvent(Alachisoft.NCache.Client.Connection)">
            <summary>
            Will be called by broker incase of multiple connection
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.RegisterNodeLeftEvent(Alachisoft.NCache.Client.Connection)">
            <summary>
            Will be called by broker incase of multiple connection
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.ReRegisterGeneralNotification(Alachisoft.NCache.Client.Connection)">
            <summary>
            Re- register the general nofication when reconnects to some other node.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.Add(System.String[],Alachisoft.NCache.Client.CacheItem[],System.Int16,System.String,System.Int64[],System.Boolean,System.String,System.Int16,System.Int16,Alachisoft.NCache.Runtime.Events.EventDataFilter,Alachisoft.NCache.Runtime.Events.EventDataFilter,System.Boolean,System.Collections.IDictionary@,Alachisoft.NCache.Runtime.Events.CallbackType,System.String)">
             <summary>
             Add array of <see cref="T:Alachisoft.NCache.Client.CacheItem"/> to the cache.
             </summary>
             <param name="keys">The cache keys used to reference the items.</param>
             <param name="items">The items that are to be stored</param>
             <param name="group">The data group of the item</param>
             <param name="subGroup">Sub group of the group</param>
             <returns>keys that are added or that alredy exists in the cache and their status.</returns>
             <remarks> If CacheItem contains invalid values the related exception is thrown. 
             See <see cref="T:Alachisoft.NCache.Client.CacheItem"/> for invalid property values and related exceptions</remarks>		
             <example>The following example demonstrates how to add items to the cache with an absolute 
             expiration 2 minutes from now, a priority of 
             high, and that notifies the application when the item is removed from the cache.
             
             First create a CacheItems.
             <code>
             string keys = {"ORD_23", "ORD_67"};
             CacheItem items = new CacheItem[2]
             items[0] = new CacheItem(new Order());
             items[0].AbsoluteExpiration = DateTime.Now.AddMinutes(2);
             items[0].Priority = CacheItemPriority.High;
             items[0].ItemRemoveCallback = onRemove;
            
             items[1] = new CacheItem(new Order());
             items[1].AbsoluteExpiration = DateTime.Now.AddMinutes(2);
             items[1].Priority = CacheItemPriority.Low;
             items[1].ItemRemoveCallback = onRemove;
             </code>
             
             Then add CacheItem to the cache
             <code>
             
            	NCache.Cache.Add(keys, items, "Customer", "Orders");
            
             </code>
             Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
             <code>
             
            	Cache.Add(keys, items, "Customer", "Orders");
             
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.AddDependency(System.String,Alachisoft.NCache.Runtime.Dependencies.CacheDependency,System.Boolean)">
            <summary>
            Add dependency to the cache item.
            </summary>
            <param name="key">key used to reference the required object</param>
            <param name="dependency">CacheDependency to be added</param>
            <param name="isResyncRequired">If set, then at the time of expiration, a fresh copy of the 
            item is fetched from the master datasource provided that the read-thru is enabled. Otherwise it is 
            expired as normal.</param>
            <returns>True if operations successeded else false</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.AddDependency(System.String,Alachisoft.NCache.Client.CacheSyncDependency)">
            <summary>
            Add dependency to the cache item.
            </summary>
            <param name="key">key used to reference the required object</param>
            <param name="dependency">CacheDependency to be added</param>
            <param name="isResyncRequired">If set, then at the time of expiration, a fresh copy of the 
            item is fetched from the master datasource provided that the read-thru is enabled. Otherwise it is 
            expired as normal.</param>
            <returns>True if operations successeded else false</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.Insert(System.String[],Alachisoft.NCache.Client.CacheItem[],System.Int16,System.String,System.Int64[],System.Boolean,System.String,System.Int16,System.Int16,Alachisoft.NCache.Runtime.Events.EventDataFilter,Alachisoft.NCache.Runtime.Events.EventDataFilter,System.Boolean,System.Collections.IDictionary@,Alachisoft.NCache.Runtime.Events.CallbackType,System.String)">
             <summary> Insert list of <see cref="T:Alachisoft.NCache.Client.CacheItem"/> to the cache </summary>
             <param name="keys">The cache keys used to reference the items.</param>
             <param name="items">The items that are to be stored</param>
             <param name="group">The group with which this object is associated</param>
             <param name="subGroup">The subGroup of the group</param>
             <returns>returns keys that are added or updated successfully and their status.</returns>
             <remarks> If CacheItem contains invalid values the related exception is thrown. 
             See <see cref="T:Alachisoft.NCache.Client.CacheItem"/> for invalid property values and related exceptions</remarks>
             <example>The following example demonstrates how to assign an item high priority when you insert 
             it into your application's <see cref="T:Alachisoft.NCache.Client.Cache"/> object.
            	<para><b>Note: </b>For more information about how to use this method with the <see cref="T:Alachisoft.NCache.Client.CacheItemRemovedCallback"/> 
            	delegate, see <see cref="T:Alachisoft.NCache.Client.CacheItemRemovedCallback"/>.
            	</para>
             First create CacheItems.
             <code>
             string[] keys = {"SQLDSN", "ORADSN"};
             CacheItem items[] = new CacheItem[2];
             items[0] = new CacheItem(sqlConnectionString);
             item.AbsoluteExpiration = DateTime.Now.AddMinutes(2);
             item.SlidingExpiration = TimeSpan.Zero;
             item.Priority = CacheItemPriority.High;
             item.ItemRemoveCallback = onRemove;
             
             items[1] = new CacheItem(oraConnectionString);
             item.AbsoluteExpiration = DateTime.Now.AddMinutes(1);
             item.SlidingExpiration = TimeSpan.Zero;
             item.Priority = CacheItemPriority.Low;
             item.ItemRemoveCallback = onRemove;
             </code>
             
             Then insert CacheItems to the cache
             <code>
            
            	NCache.Cache.Insert(keys, items, "Connection", null);
             
             </code>
             Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
             <code>
             
            	Cache.Insert(keys, items, "Connection", null);
             
             </code>
             </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Client.RemoteCache.ExecuteReader(System.String,System.Collections.IDictionary,System.Boolean,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Client.RemoteCache.DisposeReader(System.String,System.String)" -->
        <member name="M:Alachisoft.NCache.Client.RemoteCache.Get``1(System.String,Alachisoft.NCache.Common.BitSet,System.String,System.String,Alachisoft.NCache.Client.CacheItemVersion@,Alachisoft.NCache.Client.LockHandle@,System.TimeSpan,Alachisoft.NCache.Common.Locking.LockAccessType,Alachisoft.NCache.Runtime.Caching.ReadThruOptions)">
            <summary>
            Retrieves the specified item from the Cache object. If the object is read thru the data source,
            put is against the given group and sub group.
            </summary>
            <param name="key">The identifier for the cache item to retrieve.</param>
            <param name="group">Group of the object.</param>
            <param name="subGroup">Sub group of the group.</param>
            <returns>The retrieved cache item, or a null reference (Nothing 
            in Visual Basic) if the key is not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is not serializable.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="group"/>  contains a null reference (Nothing in Visual Basic).</exception>
            <remarks>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            <para>
            Note: The group and subGroup parameters are used only if the object is read thru the data source. 
            Otherwise the object will be returned from the cache whether it belongs to the given group and sub group or not.
            </para>
            </remarks>
            <example>The following example demonstrates how to retrieve the value cached for an ASP.NET text 
            box server control.
            <code>
            
            NCache.Cache.Get("MyTextBox.Value", "Customer", null);
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
            <code>
            
            Cache.Get("MyTextBox.Value", "Customer", null);
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.Get``1(System.String[],Alachisoft.NCache.Common.BitSet,Alachisoft.NCache.Runtime.Caching.ReadThruOptions)">
            <summary>
            Retrieves the object from the cache for the given keys as key value pairs
            </summary>
            <param name="keys">The keys against which items are to be fetched.</param>
            <returns>The retrieved cache items.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keys"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keys"/> is not serializable.</exception>
            <remarks>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how to retrieve the value cached for an ASP.NET text 
            box server control.
            <code>
            
            NCache.Cache.Get(keys);
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
            <code>
            
            Cache.Get(keys);
            
            </code> 
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.GetGroupKeys(System.String,System.String)">
            <summary>
            Retrieves the keys of items in a group or sub group.
            </summary>
            <param name="group">The group whose keys are to be returned.</param>
            <param name="subGroup">The sub group of the group foe which keys are to be returned.</param>
            <returns>The list of keys of a group or a sub group.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="group"/> contains a null reference (Nothing in Visual Basic).</exception>
            <remarks>
            <para>
            If only group is specified, keys for the group and all the sub groups of the group are returned.
            If both the group and sub group are specified. Only the keys related to the sub group are returned.
            </para>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how to retrieve the value cached for an ASP.NET text 
            box server control.
            <code>
            
            ArrayList list = NCache.Cache.Get("Customer", "Orders");
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
            <code>
            
            ArrayList list = Cache.Get("Customer", "Orders");
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.GetGroupData``1(System.String,System.String)">
            <summary>
            Retrieves the key and value pairs in a group or sub group.
            </summary>
            <param name="group">The group whose data is to be returned.</param>
            <param name="subGroup">The sub group of the group for which data is to be returned.</param>
            <returns>The list of key and value pairs of a group or a sub group.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="group"/> contains a null reference (Nothing in Visual Basic).</exception>
            <remarks>
            <para>
            If only group is specified, data for the group and all the sub groups of the group are returned.
            If both the group and sub group are specified. Only the data related to the sub group are returned.
            </para>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how to retrieve the value cached for an ASP.NET text 
            box server control.
            <code>
            
            Hashtable table = NCache.Cache.Get("Customer", "Orders");
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
            <code>
            
            Hashtable table = Cache.Get("Customer", "Orders");
            
            </code>
            </example>
        </member>
        <member name="P:Alachisoft.NCache.Client.RemoteCache.Count">
            <summary>
            Gets the number of items stored in the cache.
            </summary>
            <remarks>This property can be useful when monitoring your application's performance 
            or when using ASP.NET tracing functionality.
            <para><b>Note:</b> In a partitioned cluster this operation is an expensive one as it might 
            result in network calls. It is therefore advised to use this property only when required.
            </para>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <value>The number of items stored in the cache.</value>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.Contains(System.String)">
            <summary>
            Determines whether the cache contains a specific key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Alachisoft.NCache.Client.Cache"/>.</param>
            <returns><b>true</b> if the <see cref="T:Alachisoft.NCache.Client.Cache"/> contains an element 
            with the specified key; otherwise, <b>false</b>.</returns>
            <remarks>In most of the cases this method's implementation is close to O(1).
            <para><b>Note:</b> In a partitioned cluster this operation is an expensive one as it might 
            result in network calls. It is therefore advised to use this property only when required.
            </para>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is not serializable.</exception>
            <example>The following example demonstrates how to check for containment of an item in the <see cref="T:Alachisoft.NCache.Client.Cache"/>.
            <code>
            
            if(NCache.Cache.Contains("MyTextBox.Value"))
            {
            	Response.Write("Item found!");
            }
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
            <code>
            
            if(Cache.Contains("MyTextBox.Value"))
            {
            	Response.Write("Item found!");
            }
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.Remove``1(System.String,Alachisoft.NCache.Common.BitSet,System.Int16,System.Object,Alachisoft.NCache.Client.CacheItemVersion,Alachisoft.NCache.Common.Locking.LockAccessType,System.String,System.String)">
            <summary>
            Removes the object from the <see cref="T:Alachisoft.NCache.Client.Cache"/>.
            </summary>
            <param name="key">The cache key used to reference the item.</param>
            <returns>The item removed from the Cache. If the value in the key parameter 
            is not found, returns a null reference (Nothing in Visual Basic).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is not serializable.</exception>
            <remarks>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how you can remove an item from your application's 
            <see cref="T:Alachisoft.NCache.Client.Cache"/> object.
            <code>
            
            NCache.Cache.Remove("timestamp");
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
            <code>
            
            Cache.Remove("timestamp");
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.Delete(System.String,Alachisoft.NCache.Common.BitSet,System.Int16,System.Object,Alachisoft.NCache.Client.CacheItemVersion,Alachisoft.NCache.Common.Locking.LockAccessType,System.String,System.String)">
            <summary>
            Removes the object from the <see cref="T:Alachisoft.NCache.Client.Cache"/>.
            </summary>
            <param name="key">The cache key used to reference the item.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is not serializable.</exception>
            <remarks>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how you can remove an item from your application's 
            <see cref="T:Alachisoft.NCache.Client.Cache"/> object.
            <code>
            
            NCache.Cache.Remove("timestamp");
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
            <code>
            
            Cache.Remove("timestamp");
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.Remove``1(System.String[],Alachisoft.NCache.Common.BitSet,System.String,System.Int16,System.String)">
            <summary>
            Removes the objects from the <see cref="T:Alachisoft.NCache.Client.Cache"/>.
            </summary>
            <param name="keys">The cache keys used to reference the item.</param>
            <returns>The items removed from the Cache. If the value in the keys parameter 
            is not found, returns a null reference (Nothing in Visual Basic).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keys"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keys"/> is not serializable.</exception>
            <remarks>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how you can remove an item from your application's 
            <see cref="T:Alachisoft.NCache.Client.Cache"/> object.
            <code>
            
            NCache.Cache.Remove(keys);
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
            <code>
            
            Cache.Remove(keys);
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.Delete(System.String[],Alachisoft.NCache.Common.BitSet,System.String,System.Int16,System.String)">
            <summary>
            Removes the objects from the <see cref="T:Alachisoft.NCache.Client.Cache"/>.
            </summary>
            <param name="keys">The cache keys used to reference the item.</param>
            <returns>The items removed from the Cache. If the value in the keys parameter 
            is not found, returns a null reference (Nothing in Visual Basic).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keys"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keys"/> is not serializable.</exception>
            <remarks>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how you can remove an item from your application's 
            <see cref="T:Alachisoft.NCache.Client.Cache"/> object.
            <code>
            
            NCache.Cache.Remove(keys);
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
            <code>
            
            Cache.Remove(keys);
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.Remove(System.String,System.String,Alachisoft.NCache.Caching.WriteThruInfo)">
            <summary>
            Remove the group from cache.
            </summary>
            <param name="group">group to be removed.</param>
            <param name="subGroup">subGroup to be removed.</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.Clear(Alachisoft.NCache.Common.BitSet,System.Int16,System.String)">
            <summary>
            Removes all elements from the <see cref="T:Alachisoft.NCache.Client.Cache"/>.
            </summary>
            <remarks>In most of the cases this method's implementation is close to O(1).
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how to check for containment of an item in the <see cref="T:Alachisoft.NCache.Client.Cache"/>.
            <code>
            
            NCache.Cache.Clear();
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
            <code>
            
            Cache.Clear();
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.ClearAsync(Alachisoft.NCache.Common.BitSet,System.Int16,System.String)">
            <summary>
            Removes all elements from the <see cref="T:Alachisoft.NCache.Client.Cache"/> asynchronously.
            </summary>
            <remarks>
            This is similar to <see cref="M:Alachisoft.NCache.Client.RemoteCache.Clear(Alachisoft.NCache.Common.BitSet,System.Int16,System.String)"/> except that the operation is performed asynchronously.
            A <see cref="!:CacheCleared"/> event is fired upon successful completion of this method.It is not 
            possible to determine if the actual operation has failed, therefore 
            use this operation for the cases when it does not matter much.
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how to clear the <see cref="T:Alachisoft.NCache.Client.Cache"/>.
            <code>
            
            NCache.Cache.ClearAsync();
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
            <code>
            
            Cache.ClearAsync();
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.ClearAsync(Alachisoft.NCache.Common.BitSet,System.Int16,System.Int16,System.String)">
            <summary>
            Removes all elements from the <see cref="T:Alachisoft.NCache.Client.Cache"/> asynchronously.
            </summary>
            <remarks>
            This is similar to <see cref="M:Alachisoft.NCache.Client.RemoteCache.Clear(Alachisoft.NCache.Common.BitSet,System.Int16,System.String)"/> except that the operation is performed asynchronously.
            A <see cref="!:CacheCleared"/> event is fired upon successful completion of this method.It is not 
            possible to determine if the actual operation has failed, therefore 
            use this operation for the cases when it does not matter much.
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            <param name="onAsyncCacheClearedCallback">A delegate that, that can be used to get the result of 
            the Asynchronous Clear operation.</param>
            </remarks>
            <example>The following example demonstrates how to clear the <see cref="T:Alachisoft.NCache.Client.Cache"/>.
            <code>
            
            void OnAsyncCacheCleared(object result)
            {
            ...
            }
            
            NCache.Cache.ClearAsync(new AsyncCacheClearedCallback(OnAsyncCacheCleared));
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Client.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Client.UI.NUserControl"/>.
            <code>
            
            Cache.ClearAsync(new AsyncCacheClearedCallback(OnAsyncCacheCleared));
            
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Client.RemoteCache.Search(System.String,System.Collections.IDictionary)" -->
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Client.RemoteCache.SearchCQ(Alachisoft.NCache.Client.ContinuousQuery,System.String,System.Boolean,System.Boolean,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Client.RemoteCache.SearchEntries(System.String,System.Collections.IDictionary)" -->
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Client.RemoteCache.SearchEntriesCQ(Alachisoft.NCache.Client.ContinuousQuery,System.String,System.Boolean,System.Boolean,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Client.RemoteCache.ExecuteNonQuery(System.String,System.Collections.IDictionary,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Exception}@,Alachisoft.NCache.Caching.WriteThruInfo,System.Int32)" -->
        <member name="M:Alachisoft.NCache.Client.RemoteCache.RaiseCustomEvent(System.Object,System.Object)">
            <summary>
            Broadcasts a custom application defined event.
            </summary>
            <param name="notifId">Application specific notification code/id</param>
            <param name="data">Application specific data</param>
            <remarks>In most of the cases this method's implementation is close to O(1).
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            <para><b>Note:</b> Custom event notifications can not be disabled through configuration.</para>
            </remarks>
            <example>The following example demonstrates how to raise a custom application defined event.
            <code>
            
            NCache.Cache.RaiseCustomEvent(MyNotificationCodes.ConsumeItem,
                  new ItemData(DateTime.Now));
            
            Cache.RaiseCustomEvent(MyNotificationCodes.ConsumeItem,
                  new ItemData(DateTime.Now)); 
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.Dispose(System.Boolean)">
            <summary>
            Decerements the reference count of the cache and performs application-defined tasks 
            associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            The behavior of this method depends upon the cache's sharing mode (inproc/outproc) 
            specified in the configuration.
            <para>If the application uses the cache in <b>inproc</b> mode, calling Dispose closes the cache 
            and releases the resources used by it. If in a cluster the calling node leaves the 
            cluster as well. 
            </para>
            <para>If the application uses the cache in <b>outproc</b> mode, calling Dispose releases the 
            reference to the cache object. The cache itself remains operational and cluster remains intact. 
            </para>
            </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.GetEnumerator">
            <summary>
            Retrieves a dictionary enumerator used to iterate
            through the key settings and their values 
            contained in the cache.
            </summary>
            <remarks>
            If items are added or removed from the cache while enumerating through the items
            the behavior is not predictable. It is therefore advised not to update the cache keys
            while enumerating.
            <para><b>Note:</b> Just like <see cref="P:Alachisoft.NCache.Client.Cache.Count"/> in a cluster especially partitioned 
            this operation is an expensive one and may require network calls. It is therefore advised to use 
            this method only when required.
            </para>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="!:CacheManager.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <returns>An enumerator to iterate through the <see cref="T:Alachisoft.NCache.Client.Cache"/> object.</returns>
        </member>
        <member name="F:Alachisoft.NCache.Client.RemoteCache.CacheAsyncEventsListener._parent">
            <summary> Underlying implementation of NCache. </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.CacheAsyncEventsListener.#ctor(Alachisoft.NCache.Client.Cache.CacheAsyncEventsListener)">
            <summary>
            Constructor.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.CacheAsyncEventsListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or 
            resetting unmanaged resources.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Alachisoft.NCache.Client.RemoteCache.CacheEventsListener">
            <summary>
            Providers hanlders for <see cref="T:Alachisoft.NCache.Caching.Cache"/> events. This is an 
            internal class and must not be used from outside
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.CacheEventsListener.#ctor(Alachisoft.NCache.Client.Cache.CacheEventsListener)">
            <summary>
            Constructor.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.CacheEventsListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or 
            resetting unmanaged resources.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Alachisoft.NCache.Client.RemoteCache.ClusterEventsListener">
            <summary>
            Providers hanlders for <see cref="T:Alachisoft.NCache.Caching.Cache"/> events. This is an 
            internal class and must not be used from outside
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.RemoteCache.ClusterEventsListener._listener">
            <summary> Underlying implementation of NCache. </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.ClusterEventsListener.#ctor(Alachisoft.NCache.Client.Cache.ClusterEventsListener)">
            <summary>
            Constructor.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.ClusterEventsListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or 
            resetting unmanaged resources.
            </summary>
            <remarks>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Client.RemoteCache.GetRegisteredSchemas(System.String)" -->
        <member name="M:Alachisoft.NCache.Client.RemoteCache.GetBridgeMap(Alachisoft.NCache.Common.DataStructures.BridgeOperation[])">
            <summary>
            Method is used to obtained key value paired of bridge-key and its corresponding bridge operation
            </summary>
            <param name="bridgeOperations"></param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCache.PublishMessage(System.String,System.Collections.Generic.IList{Alachisoft.NCache.Client.Web.Messaging.Schema.MessageObject},Alachisoft.NCache.Common.BitSet)">
            <summary>
            This overload handles bulk publish calls
            </summary>
            <param name="topicName">name of topic at API</param>
            <param name="keyMessageBulk">keys and messages to publish</param>
            <param name="notifyDeliveryFailure">set true to get notification for undelivered messages</param>
        </member>
        <member name="T:Alachisoft.NCache.Client.RemoteCacheKeyDependency">
            <summary>
            This class allows to form a key based dependency in a remote cache.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.RemoteCacheKeyDependency.RemoteCacheKey">
            <summary>
            Unique key to identify item in a remote cache.
            </summary>
            <returns>
            Unique key to identify item in a remote cache.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.RemoteCacheKeyDependency.RemoteCacheID">
            <summary>
            ID of the remote cache.
            </summary>
            <returns>
            ID of the remote cache.
            </returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCacheKeyDependency.#ctor(System.String,System.String)">
            <summary>
            Creates instance of RemoteCacheKeyDependency.
            </summary>
            <param name="remoteCacheKey">Unique key to identify item in remote cache.</param>
            <param name="remoteCacheID">ID of the remote cache.</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCacheKeyDependency.Initialize">
            <summary>
            Initializes the RegisterRemoteCacheDependency.
            </summary>
            <returns>Flag representing the status of initialize operation.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.RemoteCacheKeyDependency.HasChanged">
            <summary>
            Returns flag determining a change in the RemoteCacheKeyDependency.
            </summary>
            <returns>
            Specifies a boolean value, either true or false.
            </returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.RemoteCacheKeyDependency.DependencyDispose">
            <summary>
            Disposes RemoteCacheKeyDependency.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.StoreCollection">
            <summary>
            Represents a collection of the caches initialized within the same application domain. 
            </summary>
            <remarks>An instance of this class can not be created. The class implements the IEnumerable 
            interface.
            </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Client.StoreCollection.#ctor(System.StringComparer)">
            <summary>
            Creates a CacheCollection instance with the provided StringComparer.
            </summary>
            <param name="invariantCultureIgnoreCase">String comparer to be used by the cache collection for GetHashCode implementations</param>
        </member>
        <member name="P:Alachisoft.NCache.Client.StoreCollection.Item(System.String)">
            <summary>
            Gets the cache instance from the collection for the specified key.
            </summary>
            <param name="cacheId">The cache id that uniquely identifies each cache instance</param>
            <returns>Alachisoft.NCache.Client.Caching.Cache instance</returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.StoreCollection.Count">
            <summary>
            The count of the caches contained in the collection.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.StoreCollection.GetEnumerator">
            <summary>
            Returns an <seealso cref="T:System.Collections.IEnumerator"/> which iterates over existent caches
            </summary>
            <returns>An System.Collections.IDictionaryEnumerator for the Alachisoft.NCache.Client.CacheCollection</returns>
        </member>
        <member name="E:Alachisoft.NCache.Client.StoreImplBase.CustomEvent">
            <summary>
            Occurs in response to a <see cref="!:Cache.RaiseCustomEvent"/> method call.
            </summary>
            <remarks>
            You can use this event to handle custom application defined event notifications.
            <para>Doing a lot of processing inside the handler might have an impact on the performance 
            of the cache and cluster. It is therefore advisable to do minimal processing inside the handler.
            </para>
            For more information on how to use this callback see the documentation 
            for <see cref="T:Alachisoft.NCache.Client.CustomEventCallback"/>.
            </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Client.StoreImplBase.AddDependency(System.String,Alachisoft.NCache.Runtime.Dependencies.CacheDependency,System.Boolean)">
            <summary>
            Add dependency to the cache item.
            </summary>
            <param name="key">key used to reference the required object</param>
            <param name="dependency">CacheDependency to be added</param>
            <param name="isResyncRequired">Boolean value indicating whether Resync is required or not</param>
            <returns>True if operations succeeded else false</returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.StreamMetadata">
            <summary>
            A metadata class for every new stream opened.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.StreamMode">
            <summary>
            Specifies the modes of CacheStream. 
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.StreamMode.Read">
            <summary>
            Choose this mode for read-only access to the stream by acquiring reader lock.   
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.StreamMode.ReadWithoutLock">
            <summary>
            Choose this mode for read-only access to the stream without acquiring
            reader lock.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.StreamMode.Write">
            <summary>
            Choose this mode for write access to the stream. 
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.TargetMethodAttribute">
            <summary>
            Provides the methods for custom attribute specification
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.TargetMethodAttribute.#ctor(System.Int32)">
            <summary>
            Constructor which sets the value of specified overload
            </summary>
            <param name="overload"></param>
            <returns>Int</returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.TargetMethodAttribute.Overload">
            <summary>
            Gets the value of overload specified
            </summary>
            <returns>Int</returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.TargetMethodAttribute.MethodOverload">
            <summary>
            Gets/Sets the value of method overload specified
            </summary>
            <returns>Int</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.WebCacheEnumerator`1.Reset">
            <summary>
            Set the enumerator to its initial position. which is before the first element in the collection
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.WebCacheEnumerator`1.MoveNext">
            <summary>
            Advance the enumerator to the next element of the collection 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.WebCacheEnumerator`1.Current">
            <summary>
            Gets the current element in the collection
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.WebCacheEnumerator`1.Entry">
            <summary>
            Gets the key and value of the current dictionary entry.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.WebCacheEnumerator`1.Key">
            <summary>
            Gets the key of the current dictionary entry 
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.WebCacheEnumerator`1.Value">
            <summary>
            Gets the value of the current dictionary entry
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.ClientCacheReadThru">
            <summary>
            Read Thru provider for Client Cache.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.ClientCacheReadThru._sourceCache">
            <summary>
            Source cache which is used to read thru
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.ClientCacheReadThru.Init(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Initialization of resources to be used.
            </summary>
            <param name="parameters">Initialization parameters</param>
            <param name="cacheId">Cache Id</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.ClientCacheReadThru.LoadFromSource(System.String)">
            <summary>
            Load the item from the Source cache against the key
            </summary>
            <param name="key">Key of the cache item</param>
            <param name="cacheItem">resultant cache item</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.ClientCacheReadThru.LoadFromSource(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Load data from source against specified keys
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.ClientCacheReadThru.Dispose">
            <summary>
            Release the resources.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.ClientCacheReadThru.ProviderName">
            <summary>
            Provider name for reading thru the data source
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.ClientCacheReadThru.DoReadThru">
            <summary>
            ReadThru option
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.ClientCacheReadThru.Group">
            <summary>
            ReadThru option
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.ClientCacheReadThru.SubGroup">
            <summary>
            ReadThru option
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.ClientCacheWriteThru">
            <summary>
            Write Thru provider for Client Cache.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.ClientCacheWriteThru._sourceCache">
            <summary>
            Source cache which is used to read thru
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.ClientCacheWriteThru._syncCache">
            <summary>
            Sync cache for synchronization of client cache with server cache.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.ClientCacheWriteThru.Init(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Intialization of resources to be used.
            </summary>
            <param name="parameters"></param>
            <param name="cacheId"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.ClientCacheWriteThru.WriteToDataSource(Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperation)">
            <summary>
            Write the data to the source
            </summary>
            <param name="operation">Contains the data to be stored in source</param>
            <returns>Result of the operation</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.ClientCacheWriteThru.WriteToDataSource(System.Collections.Generic.ICollection{Alachisoft.NCache.Runtime.DatasourceProviders.WriteOperation})">
            <summary>
            Write the data array to the source
            </summary>
            <param name="operations">Array of operation containing the data to be stored in source</param>
            <returns>Results of the operations</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.ClientCacheWriteThru.Dispose">
            <summary>
            Releasing the resources
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.ClientCacheWriteThru.ProviderName">
            <summary>
            Provider name for writing thru the data source
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.DataTypes.Collections.DataStructureAttributes">
            <summary>
            DataTypeAttributes contains the information about the DataStructure attributes.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Client.DataTypes.Collections.DataStructureAttributes.#ctor" -->
        <member name="P:Alachisoft.NCache.Client.DataTypes.Collections.DataStructureAttributes.Expiration">
            <summary>
            Specifies the expiration mechanism for DataStructure 
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.DataTypes.Collections.DataStructureAttributes.Dependency">
            <summary>The file or cache key dependencies for the DataStructure. 
            When any dependency changes, the object becomes invalid and is removed from 
            the cache. If there are no dependencies, this property contains a null 
            reference (Nothing in Visual Basic).
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.DataTypes.Collections.DataStructureAttributes.Group">
            <summary>
            The Group to which the DataStructure is associated. It can be queryed on the basis of Groups.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.DataTypes.Collections.DataStructureAttributes.ResyncOptions">
            <summary>
            ResyncOptions specific to the DataStructure
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.DataTypes.Collections.DataStructureAttributes.NamedTags">
            <summary>
            NamedTags information associated with the DataStructure, it can be queried on the basis of NamedTags provided.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.DataTypes.Collections.DataStructureAttributes.Tags">
            <summary>
            Tag information associated with the DataStructure, it can be queried on the basis of Tags provided.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.DataTypes.Collections.DataStructureAttributes.Priority">
            <summary>
            Relative priority for DataType which is kept under consideration whenever cache starts to free up space and evicts items.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.DistributedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{System.String,`1}[],System.Int32)">
            <summary>
            Copies the entire key value pairs to a compatible one-dimensional array, starting at the specified 
            index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from 
            <see cref="T:Alachisoft.NCache.Client.DataTypes.Collections.DistributedDictionary`2"/>. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="T:Alachisoft.NCache.Client.DataTypes.Collections.ICollectionManager">
            <summary>
            This interface contains create and get operations for all collection data types.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.ICollectionManager.CreateList``1(System.String)">
            <summary>
            Creates Distributed List against the provided collection name.
            </summary>
            <typeparam name="T">Type of List items.</typeparam>
            <param name="key">Name of collection to be created.</param>
            <returns>Interface for using List.</returns>
            <example>The following code sample shows how to created a Distributed List.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            string dataTypeName = "DistributedList";
            
            IDistributedLis&lt;Product> list = cache.DataTypeManager.CreateList&lt;Product>(dataTypeName);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.ICollectionManager.CreateList``1(System.String,Alachisoft.NCache.Client.DataTypes.DataTypeAttributes,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Creates Distributed List against the provided collection name and configures it according to the provided user configuration as attributes of collection.
            </summary>
            <typeparam name="T">Type of List items.</typeparam>
            <param name="key">Name of collection to be created.</param>
            <param name="attributes"><see cref="!:DataType.DataTypeAttributes"/> for providing user configuration for this collection.</param>
            <param name = "options" ><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating data source.This can be WriteThru, WriteBehind or None.</param>
            <returns>Interface for using list</returns>
            <example>The following code sample shows how to created a distributed list with absolute expiration of 1 minutes.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedList";
            
            DataTypeAttributes attributes = new DataTypeAttributes();
            attributes.Expiration = new Expiration(ExpirationType.Absolute, new TimeSpan(0, 1, 0));
            
            IDistributedLis&lt;Product> list = cache.DataTypeManager.CreateList&lt;Product>(dataTypeName,attributes);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.ICollectionManager.CreateQueue``1(System.String)">
            <summary>
            Creates Distributed Queue against the provided collection name.
            </summary>
            <typeparam name="T">Type of Queue items.</typeparam>
            <param name="key">Name of collection to be created.</param>
            <returns>Interface for using Queue.</returns>
            <example>The following code sample shows how to create a Distributed Queue.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedQueue";
            
            IDistributedQueue&lt;Product> queue = cache.DataTypeManager.CreateQueue&lt;Product>(dataTypeName);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.ICollectionManager.CreateQueue``1(System.String,Alachisoft.NCache.Client.DataTypes.DataTypeAttributes,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Creates Distributed Queue against the provided collection name and configures it according to the provided user configuration as attributes of collection.
            </summary>
            <typeparam name="T">Type of Queue items.</typeparam>
            <param name="key">Name of collection to be created</param>
            <param name="attributes"><see cref="T:Alachisoft.NCache.Client.DataTypes.Collections.DataStructureAttributes"/> for providing user configuration for this collection.</param>
            <param name="options"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating data source. This can be WriteThru, WriteBehind or None.</param>
            <returns>Interface for using queue.</returns>
            <example>The following code sample shows how to created a distributed queue with absoulte expiration of 1 minutes.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedQueue";
            
            DataTypeAttributes attributes = new DataTypeAttributes();
            attributes.Expiration = new Expiration(ExpirationType.Absolute, new TimeSpan(0, 1, 0));
            
            IDistributedQueue&lt;Product> queue = cache.DataTypeManager.CreateQueue&lt;Product>(dataTypeName, attributes);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.ICollectionManager.CreateDictionary``2(System.String)">
            <summary>
            Creates Distributed Dictionary against the provided collection name.
            </summary>
            <typeparam name="String">Type of Dictionary keys.</typeparam>
            <typeparam name="TValue">Type of Dictionary values.</typeparam>
            <param name="key">Name of collection to be created.</param>
            <returns>Interface for using Dictionary.</returns>
            <example>The following code sample shows how to created a Distributed Dictionary.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedDictionary";
            
            IDistributedDictionary&lt;string, Product> dictionary = cache.DataTypeManager.CreateDictionary&lt;string, Product>(dataTypeName);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.ICollectionManager.CreateDictionary``2(System.String,Alachisoft.NCache.Client.DataTypes.DataTypeAttributes,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Creates Distributed Dictionary against the provided collection name and configures it, according to the provided user configuration as attributes of collection.
            </summary>
            <typeparam name="String">Type of Dictionary keys.</typeparam>
            <typeparam name="TValue">Type of Dictionary values.</typeparam>
            <param name="key">Name of collection to be created.</param>
            <param name="attributes"><see cref="T:Alachisoft.NCache.Client.DataTypes.Collections.DataStructureAttributes"/> for providing user configuration for this collection.</param>
            <param name="options"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating data source. This can be WriteThru, WriteBehind or None.</param>
            <returns>Interface for using dictionary.</returns>
            <example>The following code sample shows how to created a distributed dictionary with absolute expiration of 1 minutes.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedDictionary";
            
            DataTypeAttributes attributes = new DataTypeAttributes();
            attributes.Expiration = new Expiration(ExpirationType.Absolute, new TimeSpan(0, 1, 0));
            
            IDistributedDictionary&lt;string, Product> dictionary = cache.DataTypeManager.CreateDictionary&lt;string, Product>(dataTypeName, attributes);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.ICollectionManager.CreateHashSet``1(System.String)">
            <summary>
            Creates Distributed Set against the provided collection name.
            </summary>
            <typeparam name="T">Type of Set items.</typeparam>
            <param name="key">Name of collection to be created.</param>
            <returns>Interface for using set.</returns>
            <example>The following code sample shows how to created a Distributed Set.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            string dataTypeName = "DistributedSet";
            
            IDistributedHashSet&lt;int> set = cache.DataTypeManager.CreateHashSet&lt;int>(dataTypeName);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.ICollectionManager.CreateHashSet``1(System.String,Alachisoft.NCache.Client.DataTypes.DataTypeAttributes,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Creates Distributed Set against the provided collection name and configures it according to the provided user configuration as attributes of collection.
            </summary>
            <typeparam name="T">Type of Set items.</typeparam>
            <param name="key">Name of collection to be created.</param>
            <param name="attributes"><see cref="T:Alachisoft.NCache.Client.DataTypes.Collections.DataStructureAttributes"/> for providing user configuration for this collection.</param>
            <param name="options"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating data source. This can be WriteThru, WriteBehind or None.</param>
            <returns>Interface for using set.</returns>
            <example>The following code sample shows how to created a Distributed Set with absolute expiration of 1 minutes.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedSet";
            
            DataTypeAttributes attributes = new DataTypeAttributes();
            attributes.Expiration = new Expiration(ExpirationType.Absolute, new TimeSpan(0, 1, 0));
            
            IDistributedHashSet&lt;int> set = cache.DataTypeManager.CreateHashSet&lt;int>(dataTypeName, attributes);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.ICollectionManager.GetList``1(System.String,Alachisoft.NCache.Runtime.Caching.ReadThruOptions)">
            <summary>
            Gets Distributed List interface against the provided collection name.
            </summary>
            <typeparam name="T">Type of List items.</typeparam>
            <param name="key">Name of collection.</param>
            <param name="options"><see cref="T:Alachisoft.NCache.Runtime.Caching.ReadThruOptions"/> to read from data source. These can be either ReadThru, ReadThruForced or none.</param>
            <returns>Interface for using List.</returns>
            <example>The following code sample shows how to get a Distributed List handler from cache.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedList";
            
            IDistributedList&lt;Product> list = cache.DataTypeManager.GetList&lt;Product>(dataTypeName);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.ICollectionManager.GetQueue``1(System.String,Alachisoft.NCache.Runtime.Caching.ReadThruOptions)">
            <summary>
            Gets Distributed Queue interface against the provided collection name.
            </summary>
            <typeparam name="T">Type of Queue items.</typeparam>
            <param name="key">Name of collection to be created.</param>
            <param name="options"><see cref="T:Alachisoft.NCache.Runtime.Caching.ReadThruOptions"/> to read from data source. These can be either ReadThru, ReadThruForced or none.</param>
            <returns>Interface for using Queue.</returns>
            <example>The following code sample shows how to get a Distributed Queue handler from cache.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            string dataTypeName = "DistributedQueue";
            
            IDistributedQueue&lt;Product> queue = cache.DataTypeManager.GetQueue&lt;Product>(dataTypeName);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.ICollectionManager.GetDictionary``2(System.String,Alachisoft.NCache.Runtime.Caching.ReadThruOptions)">
            <summary>
            Gets Distributed Dictionary interface against the provided collection name.
            </summary>
            <typeparam name="String">Type of Dictionary keys.</typeparam>
            <typeparam name="TValue">Type of Dictionary values.</typeparam>
            <param name="key">Name of collection.</param>
            <param name="options"><see cref="T:Alachisoft.NCache.Runtime.Caching.ReadThruOptions"/> to read from data source. These can be either ReadThru, ReadThruForced or none.</param>
            <returns>Interface for using Dictionary.</returns>
            <example>The following code sample shows how to get a Distributed Dictionary handler from cache.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedQueue";
            
            IDistributedDictionary&lt;string, Product> dictionary = cache.DataTypeManager.GetDictionary&lt;string, Product>(dataTypeName);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.ICollectionManager.GetHashSet``1(System.String,Alachisoft.NCache.Runtime.Caching.ReadThruOptions)">
            <summary>
            Gets Distributed Set interface against the provided collection name.
            </summary>
            <typeparam name="T">Type of Set items.</typeparam>
            <param name="key">Name of collection.</param>
            <param name="options"><see cref="T:Alachisoft.NCache.Runtime.Caching.ReadThruOptions"/> to read from data source. These can be either ReadThru, ReadThruForced or none.</param>
            <returns>Interface for using set.</returns>
            <example>The following code sample shows how to get a Distributed Set handler from cache.
            <code>
            ICache cache = CacheManager.GetCache("demoCache");
            string dataTypeName = "DistributedSet";
            
            IDistributedHashSet&lt;int> set = cache.DataTypeManager.GetHashSet&lt;int>(dataTypeName);
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedDictionary`2">
            <summary>
            This interface contains methods and parameters for Distributed Dictionary.
            </summary>
            <typeparam name="TKey">The type of keys in the Dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the Dictionary.</typeparam>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedDictionary`2.Insert(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Insert elements with the provided keys and values in IDistributedDictionary.
            </summary>
            <param name="entries">Elements to be insert in IDistributedDictionary.</param>
            <example>The following code sample shows how to insert multiple entries in distributed dictionary.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedDictionary";
            
            IDistributedDictionary&lt;string, Product> dictionary = cache.DataTypeManager.GetDictionary&lt;string, Product>(dataTypeName);
            
            // Create dictionary of new products to be added
            IDictionary&lt;string, Product> newProducts = new Dictionary&lt;string, Product>();
            
            Product[] products = FetchProducts();
            
            foreach (var product in products)
            {
            	// Add new products 
            	string productKey = "$Product:{product.ProductID}";
            
            	newProducts.Add(productKey, product);
            }
            
            dictionary.Insert(newProducts);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedDictionary`2.Remove(System.Collections.Generic.ICollection{`0})">
            <summary>
            Removes the element with the specified keys from IDistributedDictionary.
            </summary>
            <param name="keys">The keys of the elements to remove.</param>
            <returns>The number of items that were removed.</returns>
            <example>The following code sample shows how to remove multiple entries in distributed dictionary.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedDictionary";
            
            IDistributedDictionary&lt;string, Product> dictionary = cache.DataTypeManager.GetDictionary&lt;string, Product>(dataTypeName);
            
            // Create list of keys to remove
            List&lt;string> keysToRemove = FetchExpiredProducts();
            
            int itemsRemoved = dictionary.Remove(keysToRemove);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedDictionary`2.Get(System.Collections.Generic.ICollection{`0})">
            <summary>
            Returns the values associated with the specified keys.
            </summary>
            <param name="keys">The keys whose values to get.</param>
            <returns>Collection of values against the provided keys.</returns>
            <example>The following code sample shows how to fetch multiple entries from distributed dictionary.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedDictionary";
            
            IDistributedDictionary&lt;string, Product> dictionary = cache.DataTypeManager.GetDictionary&lt;string, Product>(dataTypeName);
            
            // Create list of keys to fetch corresponding values
            List&lt;string> keys = new List&lt;string>();
            keys.Add("Product:1001");
            keys.Add("Product:1002");
            keys.Add("Product:1003");
            
            ICollection&lt;Product> values = dictionary.Get(keys);
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedList`1">
            <summary>
            This interface contains methods and parameters for Distributed List.
            </summary>
            <typeparam name="T">The type of elements in the List.</typeparam>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedList`1.Trim(System.Int32,System.Int32)">
            <summary>
            Trim an existing List so that it will contain only the specified 
            range of elements.
            </summary>
            <param name="start">Starting index.</param>
            <param name="end">Ending index.</param>
            <example>The following code sample shows how to trim a Distributed List from index 5 to 10.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedList";
            
            IDistributedList&lt;Product> list = cache.DataTypeManager.GetList&lt;Product>(dataTypeName);
            list.Trim(5, 10);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Returns a List that will contain only the specified 
            range of elements specified.
            </summary>
            <param name="start">Starting index.</param>
            <param name="count">Number of items.</param>
            <example>The following code sample shows how to get range of specified items form Distributed List.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedList";
            
            IDistributedList&lt;Product> list = cache.DataTypeManager.GetList&lt;Product>(dataTypeName);
            IList&lt;Product> subList = list.GetRange(25, 50);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Adds the elements of the specified collection to the end of the List&lt;T>.
             </summary>
             <param name="collection">The collection whose elements should be added to the end of the List&lt;T></param>
             <example>The following code sample shows how to add multiple of items to Distributed List.
             <code>
             ICache cache = CacheManager.GetCache("demoClusteredCache");
             string dataTypeName = "DistributedList";
             
             IDistributedList&lt;Product> list = cache.DataTypeManager.GetList&lt;Product>(dataTypeName);
             
             // Get new products
             Product[] newProducts = new Product[2];
            
             newProducts[0] = new Product { Id = 1, Name = "Chai" };
             newProducts[1] = new Product { Id = 2, Name = "Chang" };
             newProducts[2] = new Product { Id = 3, Name = "Aniseed Syrup" };
             
             list.AddRange(newProducts);
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the List&lt;T>.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <example>The following code sample shows how to remove multiple of items from Distributed List.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedList";
            
            IDistributedList&lt;Product> list = cache.DataTypeManager.GetList&lt;Product>(dataTypeName);
            list.RemoveRange(25, 50);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Removes the elements of the specified collection from the List&lt;T>.
             </summary>
             <param name="collection">The collection whose elements should be removed from the List&lt;T></param>
             <returns>The number of removed elements.</returns>
             <example>The following code sample shows how to remove multiple of specified items from Distributed List.
             <code>
             ICache cache = CacheManager.GetCache("demoClusteredCache");
             string dataTypeName = "DistributedList";
             
             IDistributedList&lt;Product> list = cache.DataTypeManager.GetList&lt;Product>(dataTypeName);
             
             // Get range of expired products to be removed
             Product[] newProducts = new Product[2];
            
             newProducts[0] = new Product { Id = 1, Name = "Chai" };
             newProducts[1] = new Product { Id = 2, Name = "Chang" };
             newProducts[2] = new Product { Id = 3, Name = "Aniseed Syrup" };
             
             int itemsRemoved = list.RemoveRange(newProducts);
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedList`1.InsertAfter(`0,`0)">
             <summary>
             Inserts the element in the List after the first occurrence of specified element.
             </summary>
             <param name="pivot">Element after which value will be inserted.</param>
             <param name="value">Element to insert in the List.</param>
             <returns> False when the value pivot was not found; else true.</returns>
             <example>The following code sample shows how to insert a value after a given pivot in Distributed List.
             <code>
             ICache cache = CacheManager.GetCache("demoClusteredCache");
             string dataTypeName = "DistributedList";
             
             IDistributedList&lt;Product> list = cache.DataTypeManager.GetList&lt;Product>(dataTypeName);
             
             // Get new products
             Product[] newProducts = new Product[2];
            
             newProducts[0] = new Product { Id = 1, Name = "Chai" };
             newProducts[1] = new Product { Id = 2, Name = "Chang" };
             newProducts[2] = new Product { Id = 3, Name = "Aniseed Syrup" };
             
             list.InsertAfter(list[5], newProduct);
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedList`1.InsertBefore(`0,`0)">
             <summary>
             Inserts the element in the List before the first occurrence of specified element.
             </summary>
             <param name="pivot">Element before which value will be inserted.</param>
             <param name="value">Element to insert in the List.</param>
             <returns>False when the value pivot was not found; else true.</returns>
             <example>The following code sample shows how to insert a value before a given pivot in Distributed List.
             <code>
             ICache cache = CacheManager.GetCache("demoClusteredCache");
             string dataTypeName = "DistributedList";
             
             IDistributedList&lt;Product> list = cache.DataTypeManager.GetList&lt;Product>(dataTypeName);
             
             // Get new products
             Product[] newProducts = new Product[2];
            
             newProducts[0] = new Product { Id = 1, Name = "Chai" };
             newProducts[1] = new Product { Id = 2, Name = "Chang" };
             newProducts[2] = new Product { Id = 3, Name = "Aniseed Syrup" };
             
             list.InsertBefore(list[5], newProduct);
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedList`1.First">
            <summary>
            Returns the first element of the List.
            </summary>
            <returns>The first element in the List.</returns>
            <example>The following code sample shows how to get first element in Distributed List.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedList";
            
            IDistributedList&lt;Product> list = cache.DataTypeManager.GetList&lt;Product>(dataTypeName);
            
            Product product = list.First();
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedList`1.Last">
            <summary>
            Returns the last element of the List.
            </summary>
            <returns>The last element in the List.</returns>
            <example>The following code sample shows how to get last element in Distributed List.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedList";
            
            IDistributedList&lt;Product> list = cache.DataTypeManager.GetList&lt;Product>(dataTypeName);
            
            Product product = list.Last();
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedList`1.InsertAtHead(`0)">
            <summary>
            Insert the specified value at the head of the List.
            </summary>
            <param name="value">Element to insert in the List.</param>
            <example>The following code sample shows how to insert element at start of the Distributed List.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedList";
            
            IDistributedList&lt;Product> list = cache.DataTypeManager.GetList&lt;Product>(dataTypeName);
            
            // Get new product
            Product newProduct = FetchNewProduct();
            
            list.InsertAtHead(newProduct);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedList`1.InsertAtTail(`0)">
            <summary>
            Insert the specified value at the tail of the List.
            </summary>
            <param name="value">Element to insert in the List.</param>
            <example>The following code sample shows how to insert element at end of the Distributed List.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedList";
            
            IDistributedList&lt;Product> list = cache.DataTypeManager.GetList&lt;Product>(dataTypeName);
            
            // Get new product
            Product newProduct = FetchNewProduct();
            
            list.InsertAtTail(newProduct);
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedQueue`1">
            <summary>
            This interface contains methods and parameters for Distrubited Queue.
            </summary>
            <typeparam name="T">The type of elements in the Queue.</typeparam>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedQueue`1.Clear">
            <summary>
            Removes all objects from the IQueue.
            </summary>
            <example>The following code sample shows how to clear Distributed Queue.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedQueue";
            
            IDistributedQueue&lt;Product> queue = cache.DataTypeManager.GetQueue&lt;Product>(dataTypeName);
            queue.Clear();
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedQueue`1.Contains(`0)">
            <summary>
            Determines whether the element exists in IQueue.
            </summary>
            <param name="item">The object to locate.</param>
            <returns>True, if found in the IQueue otherwise; false.</returns>
            <example>The following code sample shows how to check whether the element exists in Distributed Queue.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedQueue";
            
            IDistributedQueue&lt;Product> queue = cache.DataTypeManager.GetQueue&lt;Product>(dataTypeName);
            
            Product product = new Product();
            product.Id = 1;
            product.Name = "Chai";
            
            bool result = queue.Contains(product);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the IQueue elements to the specified array, starting at the
            specified index.
            </summary>
            <param name="array">The destination array of the elements copied from
            IQueue.</param>
            <param name="arrayIndex">The zero-based index in array at which copying 
            begins.</param>
            <example>The following code sample shows how to copy the entire source Queue
            to the target Array starting at 0th index.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedQueue";
            
            IDistributedQueue&lt;Product> queue = cache.DataTypeManager.GetQueue&lt;Product>(dataTypeName);
            
            Product[] products = new Product[queue.Count];
            
            queue.CopyTo(products, 0);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedQueue`1.Dequeue">
            <summary>
            Removes and returns the object at the beginning of the IQueue.
            </summary>
            <returns>The object that is removed from the beginning of the IQueue.</returns>
            <example>The following code sample shows how to dequeue an object from Distributed Queue.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedQueue";
            
            IDistributedQueue&lt;Product> queue = cache.DataTypeManager.GetQueue&lt;Product>(dataTypeName);
            
            Product product = queue.Dequeue();
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedQueue`1.Enqueue(`0)">
            <summary>
            Adds an object to the end of the IQueue.
            </summary>
            <param name="item">The object to add to the IQueue.</param>
            <example>The following code sample shows how to to enqueue an object in Distributed Queue.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedQueue";
            
            IDistributedQueue&lt;Product> queue = cache.DataTypeManager.GetQueue&lt;Product>(dataTypeName);
            
            Product product = new Product();
            product.Id = 1;
            product.Name = "Chai";
            
            queue.Enqueue(product);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedQueue`1.Peek">
            <summary>
            Returns the object at the beginning of the IQueue without removing it.
            </summary>
            <returns>The object at the beginning of the IQueue</returns>
            <example>The following code sample shows how to get an object from the beginning of the
            distributed queue without removing it.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedQueue";
            
            IDistributedQueue&lt;Product> queue = cache.DataTypeManager.GetQueue&lt;Product>(dataTypeName);
            
            Product product = queue.Peek();
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedQueue`1.ToArray">
            <summary>
            Copies the IQueue elements to a new array.
            </summary>
            <returns>A new array containing elements copied from the IQueue.</returns>
            <example>The following code sample shows how to copy a Queue into a one-dimensional array.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedQueue";
            
            IDistributedQueue&lt;Product> queue = cache.DataTypeManager.GetQueue&lt;Product>(dataTypeName);
            
            Product[] products = queue.ToArray();
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedHashSet`1">
            <summary>
            This interface contains methods and parameters for Distributed HashSet.
            </summary>
            <typeparam name="T">The type of the elements in the HashSet.</typeparam>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedHashSet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Insert elements of the provided collection in IDistributedSet.
            </summary>
            <param name="collection">Elements to be inserted in the IDistributedSet.</param>
            <example>The following code sample shows how to add multiple items in a Distributed Set.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedSet";
            
            IDistributedHashSet&lt;int> set = cache.DataTypeManager.GetHashSet&gt;int>(dataTypeName);
            
            // Create array of userIDs
            int[] userIDs = new int[3] { 1223, 3564, 4545 };
            
            set.AddRange(userIDs);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedHashSet`1.RemoveRandom">
            <summary>
            Removes and returns a random element from the Set.
            </summary>
            <returns>Random element from the Set.</returns>
            <example>The following code sample shows how to remove random element from a Distributed Set.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedSet";
            
            IDistributedHashSet&lt;int> set = cache.DataTypeManager.GetHashSet&gt;int>(dataTypeName);
            
            int result = set.RemoveRandom();
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedHashSet`1.GetRandom">
            <summary>
            Returns a random element from the Set.
            </summary>
            <returns>Random element from the Set.</returns>
            <example>The following code sample shows how to get random element from Distributed Set.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedSet";
            
            IDistributedHashSet&lt;int&gt; set = cache.DataTypeManager.GetHashSet&lt;int&gt;(dataTypeName);
            
            int result = set.GetRandom();
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedHashSet`1.GetRandom(System.Int32)">
            <summary>
            Returns count distinct random elements from the Set.
            </summary>
            <param name="count">Number of required elements.</param>
            <returns>Count distinct elements from the Set.</returns>
             <example>The following code sample shows how to get random elements from a Distributed Set.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedSet";
            
            IDistributedHashSet&lt;int&gt; set = cache.DataTypeManager.GetHashSet&lt;int&gt;(dataTypeName);
            
            int[] result = set.GetRandom(5);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedHashSet`1.Remove(System.Collections.Generic.ICollection{`0})">
            <summary>
             Remove the specified items from the Set.
            </summary>
            <param name="items">Items to remove from the Set.</param>
            <returns>The number of members that were removed from the Set.</returns>
            <example>The following code sample shows how to remove specified element from Distributed Set. 
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            
            string dataTypeName  = "DistributedSet";
            
            IDistributedHashSet&lt;int> set = cache.DataTypeManager.GetHashSet&lt;int>(dataTypeName);
            
            // Creating ID to remove from set.
            ICollection&lt;int> ids = GetExpiredIDs();
            
            int count = set.Remove(ids);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedHashSet`1.Union(System.String)">
            <summary>
            Returns the union of the current Set with the specified Set.
            </summary>
            <param name="other">Name of Set to compare with.</param>
            <returns>Union of current Set with the specified Set.</returns>
            <example>The following code sample shows how to get union of a Set with another Set. 
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            
            string MondayUsersKey = "MondayUsers";
            string TuesdayUsersKey = "TuesdayUsers";
            
            IDistributedHashSet&lt;int> set = cache.DataTypeManager.GetHashSet&lt;int>(TuesdayUsersKey);
            
            // Set of MondayUsers already exists in cache.
            IEnumerable&lt;int> result = set.Union(MondayUsers);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedHashSet`1.Intersect(System.String)">
            <summary>
            Returns the intersection of current Set with the specified Set.
            </summary>
            <param name="other">Name of Set to compare with.</param>
            <returns>Intersection of current Set with the specified Set.</returns>
            <example>The following code sample shows how to get intersection of a Set with another Set. 
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            
            string MondayUsersKey = "MondayUsers";
            string TuesdayUsersKey = "TuesdayUsers";
            
            IDistributedHashSet&lt;int> set = cache.DataTypeManager.GetHashSet&lt;int>(TuesdayUsersKey);
            
            // Set of MondayUsers already exists in cache.
            IEnumerable&lt;int> result = set.Intersect(MondayUsers);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedHashSet`1.Difference(System.String)">
            <summary>
            Returns the difference of current Set with the specified Set.
            </summary>
            <param name="other">Name of Set to compare with.</param>
            <returns>Difference of current Set with the specified Set.</returns>
            <example>The following code sample shows how to get difference of a Set with another Set. 
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            
            string MondayUsersKey = "MondayUsers";
            string TuesdayUsersKey = "TuesdayUsers";
            
            IDistributedHashSet&lt;int> set = cache.DataTypeManager.GetHashSet&lt;int>(TuesdayUsersKey);
            
            // Set of MondayUsers already exists in cache.
            IEnumerable&lt;int> result = set.Difference(MondayUsers);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedHashSet`1.StoreUnion(System.String,System.String)">
            <summary>
            Take union of current Set with the specified Set and store the result 
            in a new destination Set.
            </summary>
            <param name="destination">Name of destination Set.</param>
            <param name="other">Name of Set to compare with.</param>
            <returns>Interface of destination Set handler.</returns>
            <example>The following code sample shows how to get union of a Set with another Set and
            store the result in the cache. 
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            
            string MondayUsersKey = "MondayUsers";
            string TuesdayUsersKey = "TuesdayUsers";
            
            IDistributedHashSet&lt;int> set = cache.DataTypeManager.GetHashSet&lt;int>(TuesdayUsersKey);
            
            string unionSet = "UnionSet";
            
            // Set of MondayUsers already exists in cache.
            IDistributedHashSet&lt;int> result = set.StoreUnion(unionSet, MondayUsersKey);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedHashSet`1.StoreDifference(System.String,System.String)">
            <summary>
            Take difference of current Set with the specified Set and store the result
            in a new destination Set.
            </summary>
            <param name="destination">Name of a destination Set.</param>
            <param name="other">Name of the Set to compare with.</param>
            <returns>Interface of destination Set handler.</returns>
            <example>The following code sample shows how to get difference of a Set with another Set and
            store the result in cache. 
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            
            string MondayUsersKey = "MondayUsers";
            string TuesdayUsersKey = "TuesdayUsers";
            
            IDistributedHashSet&lt;int> set = cache.DataTypeManager.GetHashSet&lt;int>(TuesdayUsersKey);
            
            string differenceSet = "DifferenceSet";
            
            // Set of MondayUsers already exists in cache.
            IDistributedHashSet&lt;int> result = set.StoreDifference(differenceSet, MondayUsersKey);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.IDistributedHashSet`1.StoreIntersection(System.String,System.String)">
            <summary>
            Take intersection of current Set with the specified Set and store the result
            in a new destination Set.
            </summary>
            <param name="destination">Name of a destination Set.</param>
            <param name="other">Name of the Set to compare with.</param>
            <returns>Interface of destination Set handler.</returns>
            <example>The following code sample shows how to get intersection of a Set with another Set and
            store the result in cache. 
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            
            string MondayUsersKey = "MondayUsers";
            string TuesdayUsersKey = "TuesdayUsers";
            
            IDistributedHashSet&lt;int> set = cache.DataTypeManager.GetHashSet&lt;int>(TuesdayUsersKey);
            
            string intersectionSet = "IntersectionSet";
            
            // Set of MondayUsers already exists in cache.
            IDistributedHashSet&lt;int> result = set.StoreDifference(intersectionSet, MondayUsersKey);
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Client.DataTypes.Collections.ILockable">
            <summary>
            This interface contains methods and parameters required for locking data types.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.ILockable.Lock(System.TimeSpan)">
            <summary>
            Acquire a Lock on a collection in cache.
            </summary>
            <param name="timeout"> Duration of Lock on a collection.</param>
            <returns>
            True, if Lock was acquired successfully; otherwise false.
            </returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.ILockable.Unlock">
            <summary>
            Unlock a locked collection.
            </summary>
            <returns>True, if item unlocked successfully;otherwise false.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.DataTypes.Collections.INotifiable">
            <summary>
            This interface contains methods for registering and unregistering notifications for data types.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.INotifiable.RegisterNotification(Alachisoft.NCache.Runtime.Events.DataTypeDataNotificationCallback,Alachisoft.NCache.Runtime.Events.EventType,Alachisoft.NCache.Runtime.Events.DataTypeEventDataFilter)">
            <summary>
            Allows you to register collection event notifications like Add, Update, and Remove on the collection.
            </summary>
            <param name="collectionDataNotificationCallback">The <see cref="T:Alachisoft.NCache.Runtime.Events.DataTypeDataNotificationCallback"/> 
            that is invoked when an item is added, updated or removed from the cache.</param>
            <param name="eventType">An enum for specifying events in which you are interested.</param>
            <param name="datafilter">An enum which allows you to specify to which extent you want the data with the event.</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.INotifiable.UnRegisterNotification(Alachisoft.NCache.Runtime.Events.DataTypeDataNotificationCallback,Alachisoft.NCache.Runtime.Events.EventType)">
            <summary>
            Allows you to unregister collection event notification.
            </summary>
            <param name="collectionDataNotificationCallback">The <see cref="T:Alachisoft.NCache.Runtime.Events.DataTypeDataNotificationCallback"/> 
            that is invoked when an item is added, updated or removed from the cache.</param>
            <param name="eventType">The type of event that is to be unregistered.</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.DistributedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all of the elements to a compatible one-dimensional array, starting at the specified 
            index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from 
            <see cref="T:Alachisoft.NCache.Client.DataTypes.Collections.DistributedList`1"/>. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Collections.DistributedQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all of the elements to a compatible one-dimensional array, starting at the specified 
            index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from 
            <see cref="T:Alachisoft.NCache.Client.DataTypes.Collections.DistributedQueue`1"/>. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="T:Alachisoft.NCache.Client.DataTypes.Counter.ICounter">
            <summary>
            This interface contains methods and parameters for Distributed Counter.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Counter.ICounter.SetValue(System.Int64)">
            <summary>
            Sets the given value of the Counter.
            </summary>
            <param name="value">value to be assigned to the Counter</param>
            <returns>Current value of the Counter.</returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.DataTypes.Counter.ICounter.Value">
            <summary>
            Gets the value of Counter.
            </summary>
            <returns>
            The value of Counter.
            </returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Counter.ICounter.Increment">
            <summary>
            Increment the value of Distributed Counter by one.
            </summary>
            <returns>Current value of the Counter.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Counter.ICounter.Decrement">
            <summary>
            Decrement the value of Distributed Counter by one.
            </summary>
            <returns>Current value of the Counter.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Counter.ICounter.IncrementBy(System.Int64)">
            <summary>
            Increment the value of Distributed Counter by the amount specified.
            </summary>
            <param name="value">The value to increment by.</param>
            <returns>Current value of the Counter.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.Counter.ICounter.DecrementBy(System.Int64)">
            <summary>
            Decrement the value of Distributed Counter by the amount specified.
            </summary>
            <param name="value">The value to decrement by.</param>
            <returns>Current value of the Counter.</returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.DataTypes.DataTypeAttributes">
            <summary>
            DataTypeAttributes contains the information about the DataType attributes.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.DataTypeAttributes.#ctor">
            <summary>
            Initializes the DataTypeAttributes instance.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.DataTypes.DataTypeAttributes.Expiration">
            <summary>
            Specifies the expiration mechanism for DataType.
            </summary>
            <returns>
            Specifies the expiration mechanism for DataType.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.DataTypes.DataTypeAttributes.Dependency">
            <summary>The file or cache key dependencies for the DataType. 
            When any dependency changes, the object becomes invalid and is removed from 
            the cache. If there are no dependencies, this property contains a null 
            reference.
            </summary>
            <returns>
            The file or cache key dependencies for the DataType.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.DataTypes.DataTypeAttributes.Group">
            <summary>
            The group to which the DataType is associated. It can be queryed on the basis of Groups.
            </summary>
            <returns>
            Name of group.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.DataTypes.DataTypeAttributes.ResyncOptions">
            <summary>
            ResyncOptions specific to the DataType.
            </summary>
            <returns>
            It contains information for the items that would be resynced after expiration from the Read-Through Provider.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.DataTypes.DataTypeAttributes.NamedTags">
            <summary>
            NamedTags information associated with the DataType, it can be queried on the basis of NamedTags provided.
            </summary>
            <returns>
            NamedTags information associated with the DataType, it can be queried on the basis of NamedTags provided.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.DataTypes.DataTypeAttributes.Tags">
            <summary>
            Tag information associated with the DataType, it can be queried on the basis of Tags provided.
            </summary>
            <returns>
            A string based identifier that can be associated with cache items.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.DataTypes.DataTypeAttributes.Priority">
            <summary>
            Relative priority for DataType which is kept under consideration whenever cache starts to free up space and evicts items.
            </summary>
            <returns>
            Specifies the relative priority of items stored in the cache.
            </returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.DataTypes.IDataTypeManager">
            <summary>
            This interface contains create and get operations for the <see cref="T:Alachisoft.NCache.Client.DataTypes.Counter.ICounter"/> and remove operation for all
            distributed data structures.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.IDataTypeManager.CreateCounter(System.String,System.Int64)">
            <summary>
            Creates the counter against the provided name.
            </summary>
            <param name="key">This is the unqiue identifier for counter object. </param>
            <param name="initialValue">This is the starting index of counter object. The default value is zero.</param>
            <returns>Interface for using counters</returns>
            <example>The following example demonstrates how to create a distributed counter.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedCounter";
            
            ICounter counter = cache.DataTypeManager.CreateCounter(dataTypeName);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.IDataTypeManager.CreateCounter(System.String,Alachisoft.NCache.Client.DataTypes.DataTypeAttributes,System.Int64,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Creates the counter against the provided name and configures it according to the provided user configuration as attributes.
            </summary>
            <param name="name">This is the unqiue identifier for the counter object.</param>
            <param name="attributes"><see cref="T:Alachisoft.NCache.Client.DataTypes.DataTypeAttributes"/> for providing user configuration for this collection.</param>
            <param name="options"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating data source. This can be WriteThru, WriteBehind or none.</param>
            <param name="initialValue">This is the starting index of the counter object. The default value is zero.</param>
            <returns>Interface for using counters.</returns>
            <example>The following example demonstrates how to create a distributed counter with absolute expiration
            of 1 minute.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedCounter";
            
            DataTypeAttributes attributes = new DataTypeAttributes();
            attributes.Expiration = new Expiration(ExpirationType.Absolute, new TimeSpan(0, 1, 0));
            
            ICounter counter = cache.DataTypeManager.CreateCounter(dataTypeName, attributes);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.IDataTypeManager.Remove(System.String,Alachisoft.NCache.Runtime.Caching.WriteThruOptions)">
            <summary>
            Remove the specified data type.
            </summary>
            <param name="key">Name of the data type.</param>
            <param name="writeThruOptions"><see cref="T:Alachisoft.NCache.Runtime.Caching.WriteThruOptions"/> regarding updating data source. This can be WriteThru, WriteBehind or none.</param>
            <example>The following example demonstrates how to remove a DataType from <see cref="T:Alachisoft.NCache.Client.ICache"/>.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DataType0";
            
            cache.DataTypeManager.Remove(dataTypeName);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.DataTypes.IDataTypeManager.GetCounter(System.String,Alachisoft.NCache.Runtime.Caching.ReadThruOptions)">
            <summary>
            Returns instance of the counter specified with backing source ReadThruOptions.
            </summary>
            <param name="key">Name of counter.</param>
            <param name="options"><see cref="T:Alachisoft.NCache.Runtime.Caching.ReadThruOptions"/> to read from data source. These can be either ReadThru, ReadThruForced or none</param>
            <returns>Interface for using counters.</returns>
            <example>The following example demonstrates how to get a distributed counter handler from <see cref="T:Alachisoft.NCache.Client.ICache"/>.
            <code>
            ICache cache = CacheManager.GetCache("demoClusteredCache");
            string dataTypeName = "DistributedCounter";
            
            ICounter counter = cache.DataTypeManager.GetCounter(dataTypeName);
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Client.DataTypes.IDistributedDataTypes">
            <summary>
            This interface contains methods and parameters required for distributed data types.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.DataTypes.IDistributedDataTypes.Key">
            <summary>
            Name of the data type.
            </summary>
            <returns>
            Name of the data type.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.DataTypes.IDistributedDataTypes.WriteThruOptions">
            <summary>
            Datasource write Options.
            </summary>
            <returns>
            It defines the WriteThruOptions regarding the data source update.
            </returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.CacheEventArg">
            <summary>
            This object is received when an event is raised and delegate <see cref="T:Alachisoft.NCache.Client.CacheDataNotificationCallback"/> is executed.
            CacheEventArg contains the necessary information to identify the event and perform the actions necessary, accordingly.
            It inherits <see cref="T:Alachisoft.NCache.Client.EventArg"/> which is also a parent of <see cref="T:Alachisoft.NCache.Client.CQEventArg"/>.
            This class is consistent for both selective and general events.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheEventArg.Descriptor">
            <summary>
            It specifies the description of general events. Only applicable for general events, otherwise it will be null.
            </summary>
            <returns>
            It contains the link necessary for registered delegate use and unregistration, as required.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheEventArg.CacheItemRemovedReason">
            <summary>
            It specifies the reason for removal of cache item. Only applicable for <see cref="F:Alachisoft.NCache.Runtime.Events.EventType.ItemRemoved"/>.
            Otherwise, the default value is DependencyChanged.
            </summary>
            <returns>
            It specifies the reason for the item to be removed.
            </returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.CacheEventDescriptor">
            <summary>
            Instance of this class holds the link to the registered delegate.
            Use it to unregister the registered delegate when required.
            The bool <see cref="P:Alachisoft.NCache.Client.CacheEventDescriptor.IsRegistered"/> returns false when the descriptor has been consumed to unregister the delegate.
            This instance can then be disposed off. Upon re-registering for the interested event, a new descriptor will be created.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheEventDescriptor.DataFilter">
            <summary>
            Gets data filter.
            </summary>
            <returns>
            This property specifies how much data should be retrieved from the cache when a notification is raised.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheEventDescriptor.IsRegistered">
            <summary>
            Returns true if the linked event delegate is registered, returns false when the descriptor has been consumed.
            This property is ThreadSafe.
            </summary>
            <returns>
            Specifies a boolean value, either true or false.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheEventDescriptor.CacheName">
            <summary>
            Name against which the cache is registered.
            </summary>
            <returns>
            Name of the cache.
            </returns> 
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheEventDescriptor.RegisteredAgainst">
            <summary>
            The property against which the event types are registered.
            </summary>
            <returns>
            This property specifies the type against which the event is raised.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheEventDescriptor.CacheDataNotificationCallback">
            <summary>
            Delegate that triggers when any data changes in the cache.
            </summary>
            <returns>
            A delegate that triggers when any data changes in the cache.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.CacheEventDescriptor.Handle">
            <summary>
            Cannot reset once created
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.EventArg">
            <summary>
            Parent of <see cref="T:Alachisoft.NCache.Client.CQEventArg"/> and <see cref="T:Alachisoft.NCache.Client.CacheEventArg"/>.
            Contains the necessary information related to the event being raised.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.EventArg.CacheName">
            <summary>
            Name of the cache against which the event is raised.
            </summary>
            <returns>
            Name of the cache.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.EventArg.EventType">
            <summary>
            Event Type against which the event is raised.
            </summary>
            <returns>
            Event Type against which the event is raised.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.EventArg.Item">
            <summary>
            Contains the item if the event was registered against <see cref="F:Alachisoft.NCache.Runtime.Events.EventDataFilter.Metadata"/> or <see cref="F:Alachisoft.NCache.Runtime.Events.EventDataFilter.DataWithMetadata"/>.
            </summary>
            <returns>
            It contains basic information of an item present in the cache. 
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.EventArg.OldItem">
            <summary>
            Only applicable for <see cref="F:Alachisoft.NCache.Runtime.Events.EventType.ItemUpdated"/>. 
            Otherwise, it will be null.
            </summary>
            <returns>
            It contains basic information of an item present in the cache.
            </returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.EventCacheItem">
            <summary>
            This is a stripped down version of <see cref="T:Alachisoft.NCache.Client.CacheItem"/>
            Contains basic information of an item present in the cache
            Will be provided in <see cref="T:Alachisoft.NCache.Client.QueryDataNotificationCallback"/> or <see cref="T:Alachisoft.NCache.Client.CacheItemRemovedCallback"/>
            but only when the event is registered against <see cref="F:Alachisoft.NCache.Runtime.Events.EventDataFilter.Metadata"/> or <see cref="F:Alachisoft.NCache.Runtime.Events.EventDataFilter.DataWithMetadata"/>.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.EventCacheItem._value">
            <summary> The actual object provided by the client application.</summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.EventCacheItem.CacheItemPriority">
            <summary>
            This property gets the CacheItemPriority of the item present in the cache.
            </summary>
            <returns>
            This property gets the CacheItemPriority of the item present in the cache.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.EventCacheItem.ResyncOptions">
            <summary>
            This property is used to define the ResyncOptions that contains information whether the items are to be ReSynced at expiry. It also 
            specifies the Read Through Provider name.
            </summary>
            <returns>
            It contains information for the items that would be resynced after expiration from the Read-Thru provider.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.EventCacheItem.Group">
            <summary>
            Group of the item.
            </summary>
            <returns>
            Name of the group.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.EventCacheItem.SubGroup">
            <summary>
            This property gets the Group of the item.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.EventCacheItem.CacheItemVersion">
            <summary>
            This property gets the ItemVersion of the item.
            </summary>
            <returns>
            This property gets the ItemVersion of the item.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.EventCacheItem.EntryType">
            <summary>
            This property gets the EntryType of the item.
            </summary>
            <returns>
            This property gets the EntryType of the item.
            </returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.EventCacheItem.GetValue``1">
            <summary>
            Will return the value present in the cache, but only if the event was registered against
            <see cref="F:Alachisoft.NCache.Runtime.Events.EventDataFilter.Metadata"/> or <see cref="F:Alachisoft.NCache.Runtime.Events.EventDataFilter.DataWithMetadata"/>,
            otherwise it will be null.
            </summary>
            <returns>
            Type of the value present in the cache.
            </returns>
            <typeparam name="T">
            Type of the value present in the cache.
            </typeparam>
        </member>
        <member name="M:Alachisoft.NCache.Client.EventCacheItem.Clone">
            <summary>
            Clones the event cache item instance.
            </summary>
            <returns>
            An event cache item instance.
            </returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.EventManager">
            <summary>
            Has the responsibility of creating <see cref="T:Alachisoft.NCache.Client.CacheEventDescriptor"/> and registering it agains a ResourcePool
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.EventManager.GeneralEventRefCountAgainstEvent(Alachisoft.NCache.Caching.Events.EventTypeInternal)">
            <summary>
            Provide 
            </summary>
            <param name="eventType"></param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.EventManager.MaxFilterAgainstEvent(Alachisoft.NCache.Caching.Events.EventTypeInternal)">
            <summary>
            Returns the filter type of the eventType
            </summary>
            <param name="eventType"></param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.EventManager.RegisterSelectiveEvent(Alachisoft.NCache.Client.CacheDataNotificationCallback,Alachisoft.NCache.Caching.Events.EventTypeInternal,Alachisoft.NCache.Runtime.Events.EventDataFilter,Alachisoft.NCache.Runtime.Events.CallbackType)">
            <summary>
            Registeres the callback sepeartely and returns short values of registeredCallbacks
            </summary>
            <param name="key"></param>
            <param name="callback"></param>
            <param name="eventType"></param>
            <param name="datafilter"></param>
            <returns>short array,<para>1st element is updated callbackRef</para><para>2st element is removed callbackRef</para></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.EventManager.RegisterCollectionEvent(Alachisoft.NCache.Runtime.Events.DataTypeDataNotificationCallback,Alachisoft.NCache.Caching.Events.EventTypeInternal,Alachisoft.NCache.Runtime.Events.DataTypeEventDataFilter)">
            <summary>
            Registers the callbacks separately and returns short values of registeredCallbacks.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.EventManager.RaiseGeneralCacheNotification(System.String,Alachisoft.NCache.Runtime.Events.EventType,Alachisoft.NCache.Client.EventCacheItem,Alachisoft.NCache.Client.EventCacheItem,Alachisoft.NCache.Client.CacheItemRemovedReason,System.Boolean)">
            <summary>
            TheadSafe and no locks internally
            </summary>
            <param name="key"></param>
            <param name="eventType">Should contain one type i.e. should not be used as a flag.
            Every EventType should be executed from another thread</param>
            <param name="item"></param>
            <param name="oldItem"></param>
            <param name="reason"></param>
            <param name="notifyAsync"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.EventManager.RaiseSelectiveCacheNotification(System.String,Alachisoft.NCache.Runtime.Events.EventType,Alachisoft.NCache.Client.EventCacheItem,Alachisoft.NCache.Client.EventCacheItem,Alachisoft.NCache.Client.CacheItemRemovedReason,System.Boolean,Alachisoft.NCache.Client.EventHandle,Alachisoft.NCache.Runtime.Events.EventDataFilter)">
            <summary>
            TheadSafe and no locks internally
            </summary>
            <param name="key"></param>
            <param name="eventType">Should contain one type i.e. should not be used as a flag.
            Every EventType should be executed from another thread</param>
            <param name="item"></param>
            <param name="oldItem"></param>
            <param name="reason"></param>
            <param name="_notifyAsync"></param>
            <param name="eventhandle"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.EventManager.RaiseCollectionNotification(System.String,Alachisoft.NCache.Caching.Events.EventTypeInternal,Alachisoft.NCache.Runtime.Caching.DistributedDataType,Alachisoft.NCache.Runtime.Events.DataTypeEventDataFilter,System.Object,System.Object,System.Boolean,Alachisoft.NCache.Client.EventHandle)">
            <summary>
            TheadSafe and no locks internally.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.EventManager.RegisterSelectiveDiscriptor(Alachisoft.NCache.Client.CacheDataNotificationCallback,Alachisoft.NCache.Caching.Events.EventTypeInternal,Alachisoft.NCache.Runtime.Events.CallbackType)">
            <summary>
            Returning Negative value means operation not successfull
            </summary>
            <param name="discriptor"></param>
            <param name="eventType"></param>
            <returns>short array <para>1st value is Update callbackRef</para> <para>nd value is removeRef</para></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.EventManager.OnSelectiveEventMessageReceived(System.Object,Alachisoft.NCache.Runtime.Caching.MessageEventArgs)">
            <summary>
            Handles what to do when a selective event message is received
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.EventManager.RegisterCollectionDescriptor(Alachisoft.NCache.Runtime.Events.DataTypeDataNotificationCallback,Alachisoft.NCache.Caching.Events.EventTypeInternal)">
            <summary>
            Returning Negative value means operation not successful.
            </summary>
            <returns>Short array.
            <para>1st value is Add callbackRef</para>
            <para>2nd value is Update callbackRef</para>
            <para>3rd value is Remove callbackRef</para>
            </returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.EventManager.UnregisterSelectiveNotification(Alachisoft.NCache.Client.CacheDataNotificationCallback,Alachisoft.NCache.Caching.Events.EventTypeInternal)">
            <summary>
            Unregisters CacheDataNotificationCallback
            <para>Flag based unregistration</para>
            </summary>
            <param name="callback"></param>
            <param name="key"></param>
            <param name="eventType"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.EventManager.UnregisterCollectionNotification(Alachisoft.NCache.Runtime.Events.DataTypeDataNotificationCallback,Alachisoft.NCache.Caching.Events.EventTypeInternal)">
            <summary>
            Unregisters CollectionDataNotificationCallback
            <para>Flag based unregistration</para>
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.EventManager.OnGeneralEventMessageReceived(System.Object,Alachisoft.NCache.Runtime.Caching.MessageEventArgs)">
            <summary>
            Handles what to do when a general event message is received
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.EventManager.OnCollectionEventsMessageReceived(System.Object,Alachisoft.NCache.Runtime.Caching.MessageEventArgs)">
            <summary>
            Handles what to do when a collection event message is received.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.EventUtil.ConvertToItem(Alachisoft.NCache.Caching.EventCacheEntry)">
            <summary>
            For Inproc only
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.CQEventArg">
            <summary>
            This object is received when an event is raised and delegate <see cref="T:Alachisoft.NCache.Client.QueryDataNotificationCallback"/> is executed
            CQEventArg contains the necessary information to identify the event and perform the necessary actions, accordingly.
            It inherits <see cref="T:Alachisoft.NCache.Client.EventArg"/> which is also a parent of <see cref="T:Alachisoft.NCache.Client.CacheEventArg"/>.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.CQEventArg.ContinuousQuery">
            <summary>
            Reference to the <see cref="P:Alachisoft.NCache.Client.CQEventArg.ContinuousQuery"/> object it is registered against.
            </summary>
            <returns>
            It holds object query and values, intended for notifications.
            </returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.Topic">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.Topic.#ctor(System.String,Alachisoft.NCache.Runtime.Messaging.TopicPriority,Alachisoft.NCache.Client.StoreImplBase,Alachisoft.NCache.Management.Statistics.IStatisticsCounter,Alachisoft.NCache.Client.IMessageProcessor,Alachisoft.NCache.Client.MessageManager)">
            <summary>
            
            </summary>
            <param name="topicName"></param>
            <param name="cacheImpl"></param>
            <param name="perfStatsCollector"></param>
            <param name="parent"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.Topic.CreateSubscription(Alachisoft.NCache.Runtime.Caching.MessageReceivedCallback,Alachisoft.NCache.Runtime.Caching.DeliveryMode)">
            <summary>
            Create subscription against the Topic. After creation, topic react as subscriber, now it receive messages from server. 
            </summary>
            <param name="messageReceivedCallback"> Callback for message received from topic</param>
            <param name="deliveryMode"></param>
            <returns></returns>
        </member>
        <member name="E:Alachisoft.NCache.Client.Topic.MessageDeliveryFailure">
            <summary>
            Register failure event against topic, when a topic failed to send message to any subscriber due to any reason. 
            That particular message will be fired if this event is registered. 
            reason of failure can be message expiration (could not delivery message to any subscriber within its expiry time), 
            or eviction occur upon cache full (message could not publish on cache store). 
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.Topic.Name">
            <summary>
            Topic Name 
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.Topic.MessageCount">
            <summary>
            Number of messages published for this topic.
            </summary>
            <remarks>
            This property returns value for a specific topic. Count of other topics play no role.
            <para>
            <b>Note:</b> If exceptions are enabled through the <see cref="!:ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.
            </para>
            </remarks>
            <value>The number of messages published for a specific topic.</value>
        </member>
        <member name="M:Alachisoft.NCache.Client.Topic.Dispose">
            <summary>
            topoc  disposed, dispose any resource against topic. such as subscirbation. 
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.Topic.ExpirationTime">
            <summary>
            Expiration time of Topic, That is if user not defined message expiry then topic expiration is used for messages.  
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.Topic.PublishAsync(Alachisoft.NCache.Runtime.Caching.Message,Alachisoft.NCache.Runtime.Caching.DeliveryOption,System.Boolean)">
            <summary>
            Publishes the messages.
            </summary>
            <param name="message"></param>
            <param name="deliverOption"></param>
            <param name="notifyDeliveryFailure"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.Topic.Publish(Alachisoft.NCache.Runtime.Caching.Message,Alachisoft.NCache.Runtime.Caching.DeliveryOption,System.Boolean)">
            <summary>
            Publishes the messages.
            </summary>
            <param name="message"></param>
            <param name="deliverOption"></param>
            <param name="notifyDeliveryFailure"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.Topic.PublishBulkAsync(System.Collections.Generic.IEnumerable{System.Tuple{Alachisoft.NCache.Runtime.Caching.Message,Alachisoft.NCache.Runtime.Caching.DeliveryOption}},System.Boolean)">
            <summary>
            Publish messages in bulk
            </summary>
            <param name="messages">Tuples of <seealso cref="T:Alachisoft.NCache.Runtime.Caching.Message"/> and <seealso cref="T:Alachisoft.NCache.Runtime.Caching.DeliveryOption"/></param>
            <param name="notifyDeliveryFailure">Set this to true to notify if message is not delivered to any subscriber</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.Topic.PublishBulk(System.Collections.Generic.IEnumerable{System.Tuple{Alachisoft.NCache.Runtime.Caching.Message,Alachisoft.NCache.Runtime.Caching.DeliveryOption}},System.Boolean)">
            <summary>
            Publish messages in bulk
            </summary>
            <param name="messages">Tuple of <seealso cref="T:Alachisoft.NCache.Runtime.Caching.Message"/> and <seealso cref="T:Alachisoft.NCache.Runtime.Caching.DeliveryOption"/></param>
            <param name="notifyDeliveryFailure">Set this to true to notify if message is not delivered to any subscriber</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.Topic.Publish(Alachisoft.NCache.Runtime.Caching.Message,Alachisoft.NCache.Runtime.Caching.DeliveryOption,System.String,System.Boolean)">
            <summary>
            Publishes the messages.
            </summary>
            <param name="message"></param>
            <param name="deliverOption"></param>
            <param name="sequenceName"></param>
            <param name="notifyDeliveryFailure"></param>
        </member>
        <member name="P:Alachisoft.NCache.Client.Topic.OnTopicDeleted">
            <summary>
            Delegate that is triggered when topic is deleted.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.Topic.HasFailureDeliveryNotification">
            <summary>
            Returns true if delivery notification is registered
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.TopicSubscription">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.TopicSubscription.#ctor(Alachisoft.NCache.Client.Topic,System.String,Alachisoft.NCache.Runtime.Caching.SubscriptionPolicyType,Alachisoft.NCache.Runtime.Caching.MessageReceivedCallback,Alachisoft.NCache.Runtime.Caching.DeliveryMode,Alachisoft.NCache.Client.IMessageProcessor)">
            <summary>
            
            </summary>
            <param name="topic"></param>
            <param name="messageReceivedCallback"></param>
        </member>
        <member name="T:Alachisoft.NCache.Client.NodeInfo">
            <summary>
            Holds the information about the cluster member nodes. It identifies 
            each member of the cluster uniquely with a combination of the IP Address
            and port.
            An instance of this class can not be instantiated. When client applications
            register the events <see cref="T:Alachisoft.NCache.Client.MemberJoinedCallback"/>
            or <see cref="T:Alachisoft.NCache.Client.MemberLeftCallback"/>, an instance of 
            NodeInfo is passed in the notification.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.NodeInfo.IpAddress">
            <summary>
            This property specifies the Ip address of the node joining/leaving the cluster.
            </summary>
            <returns>
            It specifies the IP address of the node joining/leaving the cluster.
            </returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.NodeInfo.Port">
            <summary>
            This is the port that the members use for the cluster-wide communication.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.NodeInfo.ToString">
            <summary>
            This method provides the string representation of NodeInfo.
            </summary>
            <returns>
            The string representation of NodeInfo.
            </returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.NodeInfo.appendShortName(System.String,System.Text.StringBuilder)">
            <summary> Input: "daddy.nms.fnc.fujitsu.com", output: "daddy". Appends result to string buffer 'sb'.</summary>
            <param name="hostname">The hostname in long form. Guaranteed not to be null.
            </param>
            <param name="sb">The string buffer to which the result is to be appended.
            </param>
        </member>
        <member name="M:Alachisoft.NCache.Client.ConfigReader.ReadSecurityParams(System.String,System.String)">
            <summary>
            reads the security params from the client configuration file.
            </summary>
            <param name="fileName"></param>
            <param name="cacheId"></param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.ConfigReader.ReadItem(System.String,System.String,System.String)">
            <summary>
            Reads client configuration file for value of specified item. The function
            only reads boolean items, false will be returned otherwise.
            </summary>
            <param name="fileName">client configuration file name</param>
            <param name="cacheId">cache id</param>
            <param name="name">item name</param>
            <returns>boolean flag specifying items value</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.ConfigReader.GetClientConfigurationPath">
            <summary>
            see if the client.ncconf is present in the executing assembly local folder. if yes 
            then returns the local path. otherwise search for the client.ncconf in NCache install folder 
            and if found returns the file global path.
            </summary>
            <returns>returns the client.ncconf local or global path if found. otherwise returns null.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.HelperFxn.ToString(System.Byte[])">
            <summary>
            Converts the byte into string using UTF8Encoding
            </summary>
            <param name="buffer">buffer containing values to be converted</param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.HelperFxn.ToBytes(System.String)">
            <summary>
            Converts byte array to string using UTF8Encoding
            </summary>
            <param name="data">values to be converted to byte</param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.HelperFxn.ToInt32(System.Byte[])">
            <summary>
            Converts the specified byte array to int. 
            It is callers responsibilty to ensure that values can be converted to Int32
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.HelperFxn.WriteInt32(System.Int32)">
            <summary>
            Creates a byte buffer representation of a <c>int32</c>
            </summary>
            <param name="value"><c>int</c> to be converted</param>
            <returns>Byte Buffer representation of a <c>Int32</c></returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.CommandBase.FinalDestinationAddress">
            <summary>
            Final address where this command has been sent. Set after response for that command has been initialized
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.CommandBase.IsRetry">
            <summary>
            Indicates wehter the command is a retry command (if first attempt has been failed)
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.CommandBase.IsSafe">
            <summary>
            Indicates of command is safe to reexecute if failed while executing.
            Safe commands return same result if reexecuted with same parameters
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.CommandBase.IsKeyBased">
            <summary>
            Indicades if the command is a key-based operation.
            This flags helps in sending command to appropriate server if more than one servers are available.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.CommandBase.ResetCommand">
            <summary>
            Resets command by resetting command bytes and assigns a new commandID
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.CommandBase.GetDedicatedCommand(System.Collections.Generic.IEnumerable{Alachisoft.NCache.Client.CommandBase})">
            <summary>
            Create a dedicated command by merging all commands provided to the function
            </summary>
            <param name="commands">Commands needed to be merged to create dedicated command</param>
            <returns>Dedicated command</returns>
        </member>
        <member name="F:Alachisoft.NCache.Client.CommandResponse._key">
            <summary> </summary>		
        </member>
        <member name="F:Alachisoft.NCache.Client.CommandResponse._type">
            <summary> Represents the _type of the response.</summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.CommandResponse._requestId">
            <summary> Requested requestId of the command.</summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.CommandResponse._callbackId">
            <summary> CallbackId which will be used to get actual callback from callback table</summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.CommandResponse._reason">
            <summary> Remove reason if item is removed.</summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.CommandResponse._value">
            <summary> Object</summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.CommandResponse._notifId">
            <summary>Notification Id</summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.CommandResponse._brokerReset">
            <summary>Tells if the broker is reset due to lost connection</summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.CommandResponse._resetConnectionIP">
            <summary>Tells with which ip connection is broken</summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.CommandResponse._asyncOpResult">
            <summary></summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.CommandResponse._operationCode">
            <summary></summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.CommandResponse._cacheId">
            <summary></summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.CommandResponse._resultDic">
            <summary> Hold the result bulk operations </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.CommandResponse._registeredSchemas">
            <summary> Hold the result of registered schemas for use in pubsub </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.CommandResponse._schemaEnabled">
            <summary> Indicates whether schema is enabled for this cache </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.CommandResponse._schemaForID">
            <summary> Hold the result of registered schemas for a specific schema Id </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.CommandResponse._messageDic">
            <summary> Hold the pub-sub messages </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.CommandResponse._versionDic">
            <summary> Hold the versions for add/insert bulk operations </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.CommandResponse._resultList">
            <summary>Hold the getGroupKeys from search and get getGroupKeys commands</summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.CommandResponse._bucketSize">
            <summary>Hold bucket size returned from server</summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.CommandResponse._totalBuckets">
            <summary>Hold total number of buckets count</summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.CommandResponse._cacheItem">
            <summary> CacheItem object used to return CacheItem form GetCacheItem command</summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.CommandResponse._sequenceId">
            <summary>
            by default one response is sent back for each request. If required, a single response
            can be segmented into smaller chunks. In that case, these properties must be properly set.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.CommandResponse.BucketSize">
            <summary>
            Get size of each bucket
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.CommandResponse.TotalBuckets">
            <summary>
            Get total number of buckets
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.CommandResponse.#ctor(System.Boolean,Alachisoft.NCache.Common.Net.Address)">
            <summary>
            Creates a new instance of CacheResultItem 
            <param name="brokerReset">True if broker is reset due to lost connection, false otherwise</param>
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.LegacyMessagePublishBulkCommand.#ctor(System.String,System.Collections.ICollection,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="topicName">topic name</param>
            <param name="serverMessages"><seealso cref="T:System.Collections.Generic.List`1"/> of <seealso cref="T:Alachisoft.NCache.Client.Messaging.MessageRecord"/></param>
            <param name="notifyDeliveryFailure">set true to get notifications on un delivered messages</param>
        </member>
        <member name="P:Alachisoft.NCache.Client.LegacyMessagePublishBulkCommand.CommandRequestType">
            <summary>
            Defines request type
            NECESSARY FOR BULK CALLS
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.LegacyMessagePublishBulkCommand.CommandType">
            <summary>
            Defines command type
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.LegacyMessagePublishBulkCommand.IsSafe">
            <summary>
            Whether command can be retried on failure
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.LegacyMessagePublishBulkCommand.GetCommandHandle">
            <summary>
            Get protobuf command handler
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.LegacyMessagePublishBulkCommand.SerializeCommandInternal(System.IO.Stream)">
            <summary>
            serialize this command which includes publish commands in itself in bulk
            NECESSARY FOR BULK CALLS
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.LegacyMessagePublishBulkCommand.CreateCommand">
            <summary>
            Add command necessary properties
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.MessagePublishBulkCommand.#ctor(System.String,System.Collections.Generic.IList{Alachisoft.NCache.Client.Web.Messaging.Schema.MessageObject},Alachisoft.NCache.Common.BitSet)">
            <summary>
            Constructor
            </summary>
            <param name="topicName">topic name</param>
            <param name="serverMessages"><seealso cref="T:System.Collections.Generic.List`1"/> of <seealso cref="T:Alachisoft.NCache.Client.Messaging.MessageRecord"/></param>
            <param name="notifyDeliveryFailure">set true to get notifications on un delivered messages</param>
        </member>
        <member name="P:Alachisoft.NCache.Client.MessagePublishBulkCommand.CommandRequestType">
            <summary>
            Defines request type
            NECESSARY FOR BULK CALLS
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.MessagePublishBulkCommand.CommandType">
            <summary>
            Defines command type
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.MessagePublishBulkCommand.IsSafe">
            <summary>
            Whether command can be retried on failure
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.MessagePublishBulkCommand.GetCommandHandle">
            <summary>
            Get protobuf command handler
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.MessagePublishBulkCommand.SerializeCommandInternal(System.IO.Stream)">
            <summary>
            serialize this command which includes publish commands in itself in bulk
            NECESSARY FOR BULK CALLS
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.MessagePublishBulkCommand.CreateCommand">
            <summary>
            Add command necessary properties
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.ActivityBlockedException">
            <summary>
            Thrown whenever an operation is blocked due to node down of server.
            </summary>
            <example>The following example demonstrates how to use this exception in your code.
            <code>
            
            try
            {
                ...
            }
            catch(ActivityBlockedException ex)
            {
                ...
            }
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Client.ActivityBlockedException.#ctor">
            <summary> 
            default constructor. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.ActivityBlockedException.#ctor(System.String)">
            <summary> 
            overloaded constructor, takes the reason as parameter. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.ActivityBlockedException.#ctor(System.String,Alachisoft.NCache.Common.Net.Address)">
            <summary> 
            overloaded constructor, takes the reason as parameter. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.ActivityBlockedException.#ctor(System.String,System.Exception)">
            <summary>
            overloaded constructor. 
            </summary>
            <param name="reason">reason for exception</param>
            <param name="inner">nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.ActivityBlockedException.#ctor(System.Int32,System.String,Alachisoft.NCache.Common.Net.Address)">
            <summary>
            overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
            <param name="blockedServerIp"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.ActivityBlockedException.#ctor(System.Int32,System.String,Alachisoft.NCache.Common.Net.Address,System.String)">
            <summary>
            overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
            <param name="blockedServerIp"></param>
            <param name="stackTrace">stacktrace of exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.ActivityBlockedException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            overloaded constructor
            </summary>
            <param name="errorCode">assigned errorcode</param>
            <param name="reason">exception message</param>
            <param name="inner">nested exception</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.ActivityBlockedException.#ctor(System.Int32,System.String,System.Exception,Alachisoft.NCache.Common.Net.Address)">
            <summary>
            overloaded constructor
            </summary>
            <param name="errorCode">assigned error code</param>
            <param name="reason">exception message</param>
            <param name="inner">nested exception</param>
            <param name="blockedServerIp"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.ActivityBlockedException.#ctor(System.String,System.Exception,Alachisoft.NCache.Common.Net.Address)">
             <summary>
             overloaded constructor. 
             </summary>
             <param name="reason">reason for exception</param>
             <param name="inner">nested exception</param>
            <param name="blockedServerIp"></param>
        </member>
        <member name="P:Alachisoft.NCache.Client.ActivityBlockedException.BlockedServerIp">
            <exclude/>
        </member>
        <member name="F:Alachisoft.NCache.Client.Broker._value">
            <summary> Object</summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.Broker.CommandReceived(Alachisoft.NCache.Client.CommandResponse,Alachisoft.NCache.Common.Net.Address)">
            <summary>event handler for the Receive CommandBase Event.
            gets the command from teh _requestTable and if this command was async
            then this thread goes on to notify the initiator of this request. if
            the command was synchronous then the thread which is waiting on this
            command object is notified and command object is Remove from the _requestTable.
            
            </summary>
            <param name="result">CommandResponse indicating the response/command received from the client.
            </param>
        </member>
        <member name="M:Alachisoft.NCache.Client.Broker.NewSerializedMapRecieved(System.Byte[])">
            <summary>
            New hashmap recieved. 
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.Broker.NewModuleHashmapRecieved(Alachisoft.NCache.Common.DataStructures.NewHashmap)">
            <summary>
            New hashmap recieved. Just save the module map
            </summary>
            <param name="newHashmap">new hashmap returned from primary server</param>
            <param name="bucketSize">bucket size</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.Broker.FilterOutRunningNodesFromMap(System.Collections.Hashtable)">
            <summary>
            Map conatins the running nodes map addresses so Members also only the running nodes
            </summary>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Broker.NewHashmapRecieved(Alachisoft.NCache.Common.DataStructures.NewHashmap)">
            <summary>
            New hashmap recieved. Depending on new and old hashmap, some connections are
            disposed and some new connections are formed(not always as in some cases only buckets have
            transfered between servers). This method should be called asynchronously so the recieve thread
            will be free to recieve other command responces.
            </summary>
            <param name="newHashmap">new hashmap returned from primary server</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.Broker.NewHashmapRecievedCompleted(System.IAsyncResult)">
            <summary>
            Called when NewHashmapRecieved callback is executed
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.Broker.NewModuleHashmapRecievedCompleted(System.IAsyncResult)">
            <summary>
            Called when NewModuleHashmapRecieved callback is executed
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.Broker.GetDistributionMap(System.Collections.IDictionary,System.Collections.IDictionary@)">
            <summary>
            This method provides distribution Map of Bridge Operation Keys. 
            Now Bridge Operations will transfer to tis particular node based on cache-key represent Bridge Operation.
            </summary>
            <param name="keyBridgeOpMap"></param>
            <param name="keysDistributionMap"></param>
            <returns>return true is hashMap recivied. And also return populated dictionary Object of server address and bridge Operations to replicated.  </returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Broker.GetServerAddressWithCallStatus(Alachisoft.NCache.Runtime.Messaging.IMessageRecord,Alachisoft.NCache.Common.Net.Address@)">
            <summary>
            Get server address according to key distribution map
            </summary>
            <param name="key">Hash of this value decides the server address to be used</param>
            <param name="serverAddress">Server address to which request must be sent</param>
            <returns>true if call is a dedicated call</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Broker.GetServerAddressWithCallStatus(System.String,Alachisoft.NCache.Common.Net.Address@)">
            <summary>
            Get server address according to key distribution map
            </summary>
            <param name="key">Hash of this value decides the server address to be used</param>
            <param name="serverAddress">Server address to which request must be sent</param>
            <returns>true if call is a dedicated call</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Broker.RetrySendCommand(Alachisoft.NCache.Client.CommandBase)">
            <summary>
            Called when a command is failed while sending
            </summary>
            <param name="command">Command failed to be sent</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.Broker.RetrySendBulkCommand(Alachisoft.NCache.Client.CommandBase)">
            <summary>
            Called when a bulk command is failed while sending
            </summary>
            <param name="command">Command failed to be sent</param>
            <returns>True if command was resent as dedicated command (no need to send pending commands)</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Broker.ExecuteRequest(Alachisoft.NCache.Client.Request,Alachisoft.NCache.Client.Connection,System.Boolean,System.Boolean)">
            <summary>
            Ensure execution of request on remote cache server.
            </summary>
            <param name="request">Request to be executed</param>
            <param name="connection">Preferred connection to execute the request</param>
            <param name="checkConnected">If True, checks connection status before execution.</param>
            <param name="waitForResponse">If True, this function will be a blocking call till response is recieved</param>
            <exception cref="!: Alachisoft.NCache.Client.Communication.ParallelRequsetFailedException">Must be handled by bulk operations.</exception>
        </member>
        <member name="M:Alachisoft.NCache.Client.Broker.RetryUnsafeCommand(Alachisoft.NCache.Client.Request,Alachisoft.NCache.Client.CommandBase[],System.Int64,System.Boolean)">
             <summary>
            This method id for unsafe parallel commands
            Keybased parallel unsafe commands
            Remove failed response
            Inquiry each command seperatly
            re-execute each command(whose inquiry is failed) else add response recieved by inquiry
            For non-key based parallel unsafe commands e.g. DeleteQuery
            Remove failed response
            Inquiry each command seperatly
            add response recieved by inquiry
             </summary>
             <param name="request"></param>
             <param name="failedCommands"></param>
             <param name="executionStartTime"></param>
             <param name="sendDedicatedRequest"></param>
             <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Broker.ExecuteRequest(Alachisoft.NCache.Client.Request)">
            <summary>
            Ensure execution of request on remote cache server. This is a blocking function call, till the response from server is recieved.
            </summary>
            <param name="request">Request to be executed</param>
            <exception cref="!: Alachisoft.NCache.Client.Communication.ParallelRequsetFailedException">Must be handled by bulk operations.</exception>
        </member>
        <member name="M:Alachisoft.NCache.Client.Broker.InitializeResponse(Alachisoft.NCache.Client.Connection,Alachisoft.NCache.Client.CommandBase)">
            <summary>
            Adds request to request table. Depending on type of type is request id is set here.
            </summary>
            <param name="connection"></param>
            <param name="command"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.Broker.ResetBroker(Alachisoft.NCache.Common.Net.Address)">
            <summary>
            Reset request table. only those command from table are removed who are sent to the provided
            ip address
            </summary>
            <param name="ip">ip address of server to which the connection is lost</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.Broker.TryNextServer">
            <summary>
            Try to connect with next server in config
            </summary>
            <returns>new connection</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Broker.GetConnection(Alachisoft.NCache.Common.Net.Address,System.Boolean)">
            <summary>
            Get connection from pool. If disconnected, the function tries to make connection again.
            If strict match is set to false, any present connection will be returned from pool
            </summary>
            <param name="ip">expected connection's ip</param>
            <param name="strictMatch">specifies if ip is strictly matched or any connection from pool
            is returned incase connection not found or disconnected</param>
            <returns>connection. it may be connected or disconnected</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Broker.TryConnecting(Alachisoft.NCache.Client.Connection,System.Exception@,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Try connecting to the connection provided
            </summary>
            <returns>True if connection was successful, false otherwise</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Broker.ConnectRemoteServer(Alachisoft.NCache.Client.Connection,Alachisoft.NCache.Client.ServerInfo,System.Boolean)">
            <summary>
            Try to connect with the server. The connection object will be used to connect with the ip
            address on port provided
            </summary>
            <param name="connection">This object will be used to connect with server</param>
            <param name="server">remote server information</param>
            <param name="securityParams">security parameters</param>
            <param name="registerNotifs">if re registring of events is needed</param>
            <returns>true if connecion is established, false otherwise</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Broker.CheckRetryConnectionDelay">
            <summary>
            Checks if the retry connection interval is over and sets retry connection flag to true.
            </summary>        
        </member>
        <member name="M:Alachisoft.NCache.Client.Broker.ConnectRemoteServer(Alachisoft.NCache.Client.Connection,System.Net.IPAddress,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Exception@,System.Boolean)">
            <summary>
            Try to connect with the server. The connection object will be used to connect with the ip
            address on port provided
            </summary>
            <param name="connection">This object will be used to connect with server</param>
            <param name="addr">ip address of server</param>
            <param name="port">port on which socket server is running</param>
            <param name="balanceNodes">balance clients load on servers</param>
            <param name="importHashmap">if hashmap is to be fetched from connecting server</param>
            <param name="registerNotifs">if re registring of events is needed</param>
            <param name="securityParams">security parameters</param>
            <returns>true if connecion is established, false otherwise</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Broker.GetIpOfConnectedMachine(Alachisoft.NCache.Client.Connection)">
            <summary>
            This is used for the case of load balancer when server are behind a load balancer
            This is used to get the actual IP of the server, something that is not visible if the machine
            is behind a load balancer
            </summary>
            <param name="connection"></param>
            <returns>The IP of the machine the client is connected to</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Broker.GetCachePort(Alachisoft.NCache.Client.Connection)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="connectedServerAddress"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.Connection.RequestInquiryEnabled">
            <summary>
            Checks if request logging is enabled on this server or not.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.Connection.IpAddress">
            <summary>
            Get ip address of machine to which connection is made
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.Connection.Port">
            <summary>
            Get port on which connection is made
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.Connection.CommunicationSocket">
            <summary>
            Gets the prefered communication socket.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.Connection.SwitchTo(Alachisoft.NCache.Client.Broker,Alachisoft.NCache.Client.OnCommandRecieved,Alachisoft.NCache.Client.OnServerLost,Alachisoft.NCache.Client.Logs,Alachisoft.NCache.Management.Statistics.ICacheStatisticsCounter,Alachisoft.NCache.Client.ResponseIntegrator,System.String,System.String,System.Net.IPAddress,System.Int32,System.Boolean)">
            <summary>
            it transfers the existing connection to a new connection without changing the object container
            </summary>
            <param name="container"></param>
            <param name="commandRecieved"></param>
            <param name="serverLost"></param>
            <param name="logs"></param>
            <param name="perfStatsCollector"></param>
            <param name="rspIntegraotr"></param>
            <param name="bindIP"></param>
            <param name="cacheName"></param>
            <param name="ipAddress"></param>
            <param name="cachePort"></param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.Connection.AssureSend(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            This method is used by the naggling manager to send the naggled data.
            We pass a fixed sized buffer to this method that contains the naggled data.
            One extra argument 'bytesToSent' tells how many bytes we need to send from this buffer.
            </summary>
            <param name="client"></param>
            <param name="buffer"></param>
            <param name="bytesToSent"></param>
            <param name="checkConnected"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.Connection.ProcessResponse(System.IO.Stream)">
            <summary>
            Reads a single single response from the stream and processes it.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="T:Alachisoft.NCache.Client.ConnectionPool">
            <summary>
            Hold connection objects and hashmap from partition and partition of replica.
            Makes decision on bases of key and hashmap.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.ConnectionPool.Item(Alachisoft.NCache.Common.Net.Address)">
            <summary>
            Get or set connection in connection pool
            </summary>
            <param name="ip">ip of system to which connection is made</param>
            <returns>connection object</returns>
        </member>
        <member name="P:Alachisoft.NCache.Client.ConnectionPool.BucketSize">
            <summary>
            Get or set bucket size
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.ConnectionPool.Count">
            <summary>
            Get count of connection in pool
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.ConnectionPool.LastViewId">
            <summary>
            Get last view id that published this hashmap
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.ConnectionPool.GetConnection(System.String)">
            <summary>
            Get connection to server on which the item is residing.
            If no connection exists, null will be returned.
            </summary>
            <param name="key">key of item</param>
            <returns>connection to server on which item is residing</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.ConnectionPool.GetIpInternal(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.ConnectionPool.GetServerAddress(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.ConnectionPool.GetIp(System.String)">
            <summary>
            Get ip address of server on which key resides
            </summary>
            <param name="key">key</param>
            <returns>ip address of server</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.ConnectionPool.SetHashmap(Alachisoft.NCache.Common.DataStructures.NewHashmap)">
            <summary>
            Set new hashmap to this new hashmap
            </summary>
            <param name="hashMap">new hashmap</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.ConnectionPool.Add(Alachisoft.NCache.Common.Net.Address,Alachisoft.NCache.Client.Connection)">
            <summary>
            Add connection to pool. If connection already exists, it will be replaced with new
            connection instance
            </summary>
            <param name="ip">ip address of machine to which connection is made</param>
            <param name="connection">connection object</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.ConnectionPool.Remove(Alachisoft.NCache.Common.Net.Address)">
            <summary>
            Remove connection from pool
            </summary>
            <param name="ip">ip address of machine to which connection is made</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.ConnectionPool.Contains(Alachisoft.NCache.Common.Net.Address)">
            <summary>
            Check whether connection pool contains specified connection
            </summary>
            <param name="ip">ip address of machine to which connection is made</param>
            <returns>true if the connection exists, false otherwise</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.ConnectionPool.CloneConnectionTable">
            <summary>
            Clone connection table.
            </summary>
            <returns>cloned connection table</returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.ConnectionStatus">
            <summary>
            Enumeration that defines the runtime status of connection.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.ConnectionStatus.Connecting">
            <summary> The connection is in initialization phase.</summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.ConnectionStatus.Connected">
            <summary> The connection is fully functional. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.ConnectionStatus.Disconnected">
            <summary> The connection is disconnected. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.ConnectionStatus.LoadBalance">
            <summary> This is in load balance state so dont wont queue up new request </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.RequestLogger.LogNewRequest(System.Int64)">
            <summary>
            Adds a new request to the table and returns the last removed request id.
            </summary>
            <param name="requestId"></param>
            <returns>Last remove request Id</returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.RequestLogger.RemoveRequest(System.Int64)">
            <summary>
            Removes the request with specified Id.
            </summary>
            <param name="requestId"></param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.RequestLogger.Expire(System.Int64)">
            <summary>
            Expires the old requests
            </summary>
            <param name="expirationInterval">expiration interval in seconds</param>
        </member>
        <member name="P:Alachisoft.NCache.Client.RequestLogManager.RequestLoggers">
            <summary>
            Gets the collection of RequestLoggers
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.ClientConfiguration">
            <summary>
            Contains the
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.ClientConfiguration.ConnectUsingLoadBalancer">
            <summary>
            This is used in the case of when the cluster machines are behind a load balancer. 
            This property signifies that the IP in the client config is that of the Load balancer and
            not of the underlying machines in the cluster
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.ServerInfo">
            <summary>
            Provide connection information for the client to the server node in cache.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.ServerInfo.#ctor(System.String)">
            <summary>
            It initializes a new instance of ServerInfo.
            </summary>
            <param name="name">Specifies name of the server node where cache is running.</param>
            <param name="port">Specifies port for client to connect to the server node.</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.ServerInfo.#ctor(System.Net.IPAddress)">
            <summary>
            It initializes new instance of ServerInfo.
            </summary>
            <param name="ip">Specifies <see cref="T:System.Net.IPAddress"/> of the server node where cache is running.</param>
            <param name="port">Specifies port for client to connect to the server node.</param>
        </member>
        <member name="M:Alachisoft.NCache.Client.ServerInfo.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            It is used in the case of load balancer where the underlying machines are behind a load balancer.
            The isLoadBalancer flag passed in the constructor signifies whether the server being added is the load balancer or the underlying machine 
            </summary>
            <param name="name"></param>
            <param name="isLoadBalancer"></param>
            <param name="port"></param>
        </member>
        <member name="P:Alachisoft.NCache.Client.ServerInfo.Port">
            <summary>
            Port for client to connect to the server node.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.ServerInfo.Priority">
            <summary>
            Priority for client connection to the server node.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.ServerInfo.Name">
            <summary>
            Name of the server node where cache is running.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.ServerInfo.IsLoadBalancer">
            <summary>
            Indicates that the server IP is that of a load balancer.
            The load Balancer is used to forward connections to underlying machines.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.ServerInfo.IP">
            <summary>
            IPAddress of the server node where cache is running.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.ServerInfo.Equals(System.Object)">
            <summary>
            Compares two ServerInfo instances.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.ServerInfo.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.ServerInfo.CompareTo(System.Object)">
            <summary>
            Compares the ServerInfo on the basis of priority
            </summary>
            <param name="obj"></param>
            <returns>0 if equals, -1 if lesser and 1 if greater than the comparing serverInfo</returns>
        </member>
        <member name="T:Alachisoft.NCache.Client.UserProvidedBooleanParameters">
            <summary>
            Hold user provided boolean parameters. If user provides any boolean param like balance nodes
            or import hashmap then there is no need to read it from config.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.UserProvidedBooleanParameters.Value">
            <summary>
            Get value of parameter
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.UserProvidedBooleanParameters.UserProvided">
            <summary>
            True is passed through parameters, false otherwise (read from config)
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.UserProvidedBooleanParameters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="userProvided"></param>
        </member>
        <member name="T:Alachisoft.NCache.Client.TrackableTask.ITaskManagement">
            <summary>
            This interface can be used for managing tasks.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.TrackableTask.ITaskManagement.CancelTask(System.String)">
            <summary>
            Cancels the specified task.
            </summary>
            <param name="taskId"></param>
        </member>
        <member name="M:Alachisoft.NCache.Client.TrackableTask.ITaskManagement.GetTaskProgress(System.String)">
            <summary>
            Gets task progress.
            </summary>
            <param name="taskId"></param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.TrackableTask.ITaskManagement.DisposeResult(System.String)">
            <summary>
            Dispose the result of task.
            </summary>
            <param name="taskId"></param>
        </member>
        <member name="T:Alachisoft.NCache.Client.TrackableTask.TaskEnumerator">
            <summary>
            The instance of this class is used for enumerating the results of the task.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.TrackableTask.TaskEnumerator.#ctor(System.Collections.Generic.List{Alachisoft.NCache.Common.TrackableTask.TaskEnumeratorResult},Alachisoft.NCache.Client.TrackableTask.TaskEnumeratorHandler)">
            <summary>
            
            </summary>
            <param name="enumeratorResultSet"></param>
            <param name="remoteCache"></param>
        </member>
        <member name="P:Alachisoft.NCache.Client.TrackableTask.TaskEnumerator.Entry">
            <summary>
            Sets the dictionary entry.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.TrackableTask.TaskEnumerator.Key">
            <summary>
            Specifies the key.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.TrackableTask.TaskEnumerator.Value">
            <summary>
            The value against specified key
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Client.TrackableTask.TaskEnumerator.Current">
            <summary>
            Current entry
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Client.TrackableTask.TaskEnumerator.MoveNext">
            <summary>
            Move to next entry
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Client.TrackableTask.TaskEnumerator.Reset">
            <summary>
            Reset. Throws not supported exception
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.TrackableTask.TaskEnumeratorHandler">
            <summary>
            Interface that can be implemented for 
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Client.TrackableTask.TrackableTaskOutputOption">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.TrackableTask.TrackableTaskOutputOption.IN_MEMORY">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.TrackableTask.TrackableTaskOutputOption.SOURCE_CACHE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Client.TrackableTask.TrackableTaskOutputOption.OTHER_CACHE">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Bridge.BridgeStoreBase.Initialize">
            <summary>
            Ping underlying cache to check if cache server is running
            </summary>
            <returns>
            True:  If underlying cache is running
            False: If unserlying cache is stopped
            </returns>
        </member>
    </members>
</doc>
